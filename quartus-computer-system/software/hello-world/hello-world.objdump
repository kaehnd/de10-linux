
hello-world.elf:     file format elf32-littlenios2
hello-world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08040224

Program Header:
    LOAD off    0x00001000 vaddr 0x08040000 paddr 0x08040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08040020 paddr 0x08040020 align 2**12
         filesz 0x000056ec memsz 0x000056ec flags r-x
    LOAD off    0x0000670c vaddr 0x0804570c paddr 0x08047178 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00000be4 vaddr 0x08048be4 paddr 0x08048be4 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08040000  08040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  08040020  08040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000549c  08040224  08040224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  080456c0  080456c0  000066c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0804570c  08047178  0000670c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  08048be4  08048be4  00008be4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  08048d3c  08048d3c  00008178  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008178  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a30  00000000  00000000  000081a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000177aa  00000000  00000000  00008bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006e45  00000000  00000000  00020382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00005f7d  00000000  00000000  000271c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001548  00000000  00000000  0002d144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001a07  00000000  00000000  0002e68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00030094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  000300a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 0000149f  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000041c3  00000000  00000000  000315b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005db  00000000  00000000  0003577a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00038252  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00038255  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00038261  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00038262  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00038263  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0003826e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00038279  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000a  00000000  00000000  00038284  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000029  00000000  00000000  0003828e  2**0
                  CONTENTS, READONLY
 28 .jdi          00004f41  00000000  00000000  000382b7  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00041649  00000000  00000000  0003d1f8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08040000 l    d  .entry	00000000 .entry
08040020 l    d  .exceptions	00000000 .exceptions
08040224 l    d  .text	00000000 .text
080456c0 l    d  .rodata	00000000 .rodata
0804570c l    d  .rwdata	00000000 .rwdata
08048be4 l    d  .bss	00000000 .bss
08048d3c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
0804025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0804040c l     F .text	00000008 __fp_lock
08040420 l     F .text	00000008 __fp_unlock
08040428 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0804570c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
080430d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080431ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08043218 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08043310 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080433fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080434e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
080436c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08047168 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08043934 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08043a74 l     F .text	00000034 alt_dev_reg
080460e0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08043d50 l     F .text	00000214 altera_avalon_jtag_uart_irq
08043f64 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08044730 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08044b94 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08044ce4 l     F .text	0000003c alt_get_errno
08044d20 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08048c10 g     O .bss	00000004 alt_instruction_exception_handler
08042ea0 g     F .text	00000058 _isatty_r
08043604 g     F .text	0000007c alt_main
08040294 g     F .text	000000d0 _puts_r
08048c3c g     O .bss	00000100 alt_irq
08042b4c g     F .text	00000064 _lseek_r
08047178 g       *ABS*	00000000 __flash_rwdata_start
08048d3c g       *ABS*	00000000 __alt_heap_start
080420c0 g     F .text	0000005c __sseek
08040750 g     F .text	00000010 __sinit
08040590 g     F .text	00000078 __sfmoreglue
080436a4 g     F .text	00000024 __malloc_unlock
08041730 g     F .text	00000128 memmove
0804073c g     F .text	00000014 _cleanup
0804512c g     F .text	00000024 altera_nios2_gen2_irq_init
08040000 g     F .entry	0000000c __reset
08040020 g       *ABS*	00000000 __flash_exceptions_start
08042e40 g     F .text	00000060 _fstat_r
08048bf0 g     O .bss	00000004 errno
08042038 g     F .text	00000008 __seofread
08048bf8 g     O .bss	00000004 alt_argv
0804f140 g       *ABS*	00000000 _gp
08045f60 g     O .rwdata	00000180 alt_fd_list
08045150 g     F .text	00000090 alt_find_dev
08041630 g     F .text	00000100 memcpy
08040414 g     F .text	0000000c _cleanup_r
08044c68 g     F .text	0000007c alt_io_redirect
080456c0 g       *ABS*	00000000 __DTOR_END__
08040364 g     F .text	00000010 puts
080453a0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
08044168 g     F .text	00000220 altera_avalon_jtag_uart_read
08040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08042fec g     F .text	00000064 .hidden __udivsi3
0804334c g     F .text	000000b0 isatty
08048bec g     O .bss	00000004 __malloc_top_pad
08040798 g     F .text	000004a8 __sfvwrite_r
08041f8c g     F .text	00000058 _sbrk_r
08042ddc g     F .text	00000064 _read_r
08047160 g     O .rwdata	00000004 alt_max_fd
0804232c g     F .text	000000f8 _fclose_r
0804269c g     F .text	00000084 fflush
08048be8 g     O .bss	00000004 __malloc_max_sbrked_mem
08043524 g     F .text	000000e0 lseek
08047140 g     O .rwdata	00000004 _global_impure_ptr
08041998 g     F .text	000005f4 _realloc_r
08048d3c g       *ABS*	00000000 __bss_end
08044aac g     F .text	000000e8 alt_iic_isr_register
08045000 g     F .text	0000012c alt_tick
08040770 g     F .text	00000014 __fp_lock_all
08044a60 g     F .text	0000004c alt_ic_irq_enabled
08044f5c g     F .text	000000a4 alt_alarm_stop
08048c00 g     O .bss	00000004 alt_irq_active
080400fc g     F .exceptions	000000c8 alt_irq_handler
08045f38 g     O .rwdata	00000028 alt_dev_null
08044710 g     F .text	00000020 alt_dcache_flush_all
08047178 g       *ABS*	00000000 __ram_rwdata_end
08047158 g     O .rwdata	00000008 alt_dev_list
08043970 g     F .text	00000104 write
0804570c g       *ABS*	00000000 __ram_rodata_end
08043254 g     F .text	000000bc fstat
08043050 g     F .text	0000005c .hidden __umodsi3
08048d3c g       *ABS*	00000000 end
08043c90 g     F .text	000000c0 altera_avalon_jtag_uart_init
080401c4 g     F .exceptions	00000060 alt_instruction_exception_entry
080456c0 g       *ABS*	00000000 __CTOR_LIST__
0806944c g       *ABS*	00000000 __alt_stack_pointer
08044388 g     F .text	00000228 altera_avalon_jtag_uart_write
08040760 g     F .text	00000004 __sfp_lock_acquire
08041534 g     F .text	000000fc memchr
08042844 g     F .text	00000308 _free_r
08045564 g     F .text	00000120 __call_exitprocs
08047148 g     O .rwdata	00000004 __malloc_sbrk_base
08040224 g     F .text	0000003c _start
08048c04 g     O .bss	00000004 _alt_tick_rate
08048c08 g     O .bss	00000008 _alt_nticks
08043704 g     F .text	00000108 read
08043ae4 g     F .text	00000048 alt_sys_init
080454d4 g     F .text	00000090 __register_exitproc
0804400c g     F .text	00000068 altera_avalon_jtag_uart_close
080430ac g     F .text	00000028 .hidden __mulsi3
0804570c g       *ABS*	00000000 __ram_rwdata_start
080456c0 g       *ABS*	00000000 __ram_rodata_start
08048c14 g     O .bss	00000028 __malloc_current_mallinfo
08043b2c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080452e8 g     F .text	000000b8 alt_get_fd
080422d4 g     F .text	00000058 _close_r
0804545c g     F .text	00000078 memcmp
08043bec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08048d3c g       *ABS*	00000000 __alt_stack_base
08043c3c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08042188 g     F .text	0000014c __swsetup_r
08040608 g     F .text	00000134 __sfp
08045b30 g     O .rwdata	00000408 __malloc_av_
0804076c g     F .text	00000004 __sinit_lock_release
08041fe4 g     F .text	00000054 __sread
080451e0 g     F .text	00000108 alt_find_file
0804476c g     F .text	000000a8 alt_dev_llist_insert
08043680 g     F .text	00000024 __malloc_lock
0804387c g     F .text	000000b8 sbrk
0804263c g     F .text	00000060 _fflush_r
08048be4 g       *ABS*	00000000 __bss_start
08041858 g     F .text	00000140 memset
08040260 g     F .text	00000034 main
08048bfc g     O .bss	00000004 alt_envp
08048be4 g     O .bss	00000004 __malloc_max_total_mem
08043b8c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0804211c g     F .text	00000008 __sclose
0806944c g       *ABS*	00000000 __alt_heap_limit
08042424 g     F .text	00000010 fclose
08040d80 g     F .text	000007b4 _malloc_r
08047164 g     O .rwdata	00000004 alt_errno
08040c40 g     F .text	00000098 _fwalk
08042ef8 g     F .text	00000080 .hidden __divsi3
08042720 g     F .text	00000124 _malloc_trim_r
080456c0 g       *ABS*	00000000 __CTOR_END__
080456c0 g       *ABS*	00000000 __flash_rodata_start
080456c0 g       *ABS*	00000000 __DTOR_LIST__
08043aa8 g     F .text	0000003c alt_irq_init
0804380c g     F .text	00000070 alt_release_fd
08045414 g     F .text	00000014 atexit
08042124 g     F .text	00000064 _write_r
08047144 g     O .rwdata	00000004 _impure_ptr
08048bf4 g     O .bss	00000004 alt_argc
08042434 g     F .text	00000208 __sflush_r
08044878 g     F .text	00000064 _do_dtors
08040020 g       .exceptions	00000000 alt_irq_entry
08040784 g     F .text	00000014 __fp_unlock_all
08047150 g     O .rwdata	00000008 alt_fs_list
08040020 g       *ABS*	00000000 __ram_exceptions_start
08042d50 g     F .text	0000008c __swhatbuf_r
080448fc g     F .text	00000050 alt_ic_isr_register
08047178 g       *ABS*	00000000 _edata
08048d3c g       *ABS*	00000000 _end
08040224 g       *ABS*	00000000 __ram_exceptions_end
08044074 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
080449d4 g     F .text	0000008c alt_ic_irq_disable
08042040 g     F .text	00000080 __swrite
0804714c g     O .rwdata	00000004 __malloc_trim_threshold
08045428 g     F .text	00000034 exit
08040cd8 g     F .text	000000a8 _fwalk_reent
08042f78 g     F .text	00000074 .hidden __modsi3
0806944c g       *ABS*	00000000 __alt_data_end
08040020 g     F .exceptions	00000000 alt_exception
08040764 g     F .text	00000004 __sfp_lock_release
08045684 g     F .text	0000003c _exit
080445b0 g     F .text	00000160 alt_alarm_start
08042bb0 g     F .text	000001a0 __smakebuf_r
08040374 g     F .text	00000098 strlen
08044dfc g     F .text	00000160 open
080448dc g     F .text	00000020 alt_icache_flush_all
0804716c g     O .rwdata	00000004 alt_priority_mask
0804494c g     F .text	00000088 alt_ic_irq_enable
08047170 g     O .rwdata	00000008 alt_alarm_list
08044814 g     F .text	00000064 _do_ctors
08043110 g     F .text	000000dc close
08043464 g     F .text	00000084 alt_load
08040768 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8040000:	00420134 	movhi	at,2052
    ori r1, r1, %lo(_start)
 8040004:	08408914 	ori	at,at,548
    jmp r1
 8040008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 804002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 804003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 804004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 804005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 804006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 804007c:	10000326 	beq	r2,zero,804008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8040080:	20000226 	beq	r4,zero,804008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8040084:	80400fc0 	call	80400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8040088:	00000706 	br	80400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 804008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8040090:	e8bfff17 	ldw	r2,-4(ea)
 8040094:	e93fff04 	addi	r4,ea,-4
 8040098:	80401c40 	call	80401c4 <alt_instruction_exception_entry>
 804009c:	1000021e 	bne	r2,zero,80400a8 <alt_exception+0x88>
 80400a0:	ebffff04 	addi	r15,ea,-4
 80400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80400f8:	ef80083a 	eret

080400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80400fc:	defff904 	addi	sp,sp,-28
 8040100:	dfc00615 	stw	ra,24(sp)
 8040104:	df000515 	stw	fp,20(sp)
 8040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 804010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8040110:	0005313a 	rdctl	r2,ipending
 8040114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8040118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 804011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8040124:	00800044 	movi	r2,1
 8040128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 804012c:	e0ffff17 	ldw	r3,-4(fp)
 8040130:	e0bffe17 	ldw	r2,-8(fp)
 8040134:	1884703a 	and	r2,r3,r2
 8040138:	10001126 	beq	r2,zero,8040180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 804013c:	e0bffd17 	ldw	r2,-12(fp)
 8040140:	100690fa 	slli	r3,r2,3
 8040144:	00820174 	movhi	r2,2053
 8040148:	1885883a 	add	r2,r3,r2
 804014c:	10e30f17 	ldw	r3,-29636(r2)
 8040150:	e0bffd17 	ldw	r2,-12(fp)
 8040154:	100890fa 	slli	r4,r2,3
 8040158:	00820174 	movhi	r2,2053
 804015c:	2085883a 	add	r2,r4,r2
 8040160:	10a31017 	ldw	r2,-29632(r2)
 8040164:	1009883a 	mov	r4,r2
 8040168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 804016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8040170:	0005313a 	rdctl	r2,ipending
 8040174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8040178:	e0bffb17 	ldw	r2,-20(fp)
 804017c:	00000706 	br	804019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8040180:	e0bffe17 	ldw	r2,-8(fp)
 8040184:	1085883a 	add	r2,r2,r2
 8040188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 804018c:	e0bffd17 	ldw	r2,-12(fp)
 8040190:	10800044 	addi	r2,r2,1
 8040194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8040198:	003fe406 	br	804012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 804019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 80401a0:	e0bfff17 	ldw	r2,-4(fp)
 80401a4:	103fde1e 	bne	r2,zero,8040120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80401a8:	0001883a 	nop
}
 80401ac:	0001883a 	nop
 80401b0:	e037883a 	mov	sp,fp
 80401b4:	dfc00117 	ldw	ra,4(sp)
 80401b8:	df000017 	ldw	fp,0(sp)
 80401bc:	dec00204 	addi	sp,sp,8
 80401c0:	f800283a 	ret

080401c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80401c4:	defffb04 	addi	sp,sp,-20
 80401c8:	dfc00415 	stw	ra,16(sp)
 80401cc:	df000315 	stw	fp,12(sp)
 80401d0:	df000304 	addi	fp,sp,12
 80401d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80401d8:	00bfffc4 	movi	r2,-1
 80401dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 80401e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80401e4:	d0a6b417 	ldw	r2,-25904(gp)
 80401e8:	10000726 	beq	r2,zero,8040208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80401ec:	d0a6b417 	ldw	r2,-25904(gp)
 80401f0:	e0ffff17 	ldw	r3,-4(fp)
 80401f4:	e1bffe17 	ldw	r6,-8(fp)
 80401f8:	e17ffd17 	ldw	r5,-12(fp)
 80401fc:	1809883a 	mov	r4,r3
 8040200:	103ee83a 	callr	r2
 8040204:	00000206 	br	8040210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8040208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 804020c:	0005883a 	mov	r2,zero
}
 8040210:	e037883a 	mov	sp,fp
 8040214:	dfc00117 	ldw	ra,4(sp)
 8040218:	df000017 	ldw	fp,0(sp)
 804021c:	dec00204 	addi	sp,sp,8
 8040220:	f800283a 	ret

Disassembly of section .text:

08040224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8040224:	06c201b4 	movhi	sp,2054
    ori sp, sp, %lo(__alt_stack_pointer)
 8040228:	dee51314 	ori	sp,sp,37964
    movhi gp, %hi(_gp)
 804022c:	06820134 	movhi	gp,2052
    ori gp, gp, %lo(_gp)
 8040230:	d6bc5014 	ori	gp,gp,61760
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8040234:	00820134 	movhi	r2,2052
    ori r2, r2, %lo(__bss_start)
 8040238:	10a2f914 	ori	r2,r2,35812

    movhi r3, %hi(__bss_end)
 804023c:	00c20134 	movhi	r3,2052
    ori r3, r3, %lo(__bss_end)
 8040240:	18e34f14 	ori	r3,r3,36156

    beq r2, r3, 1f
 8040244:	10c00326 	beq	r2,r3,8040254 <_start+0x30>

0:
    stw zero, (r2)
 8040248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 804024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8040250:	10fffd36 	bltu	r2,r3,8040248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8040254:	80434640 	call	8043464 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8040258:	80436040 	call	8043604 <alt_main>

0804025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 804025c:	003fff06 	br	804025c <alt_after_alt_main>

08040260 <main>:
 */

#include <stdio.h>

int main()
{
 8040260:	defffe04 	addi	sp,sp,-8
 8040264:	dfc00115 	stw	ra,4(sp)
 8040268:	df000015 	stw	fp,0(sp)
 804026c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 8040270:	01020134 	movhi	r4,2052
 8040274:	2115b004 	addi	r4,r4,22208
 8040278:	80403640 	call	8040364 <puts>

  return 0;
 804027c:	0005883a 	mov	r2,zero
}
 8040280:	e037883a 	mov	sp,fp
 8040284:	dfc00117 	ldw	ra,4(sp)
 8040288:	df000017 	ldw	fp,0(sp)
 804028c:	dec00204 	addi	sp,sp,8
 8040290:	f800283a 	ret

08040294 <_puts_r>:
 8040294:	defff504 	addi	sp,sp,-44
 8040298:	dc000815 	stw	r16,32(sp)
 804029c:	2021883a 	mov	r16,r4
 80402a0:	2809883a 	mov	r4,r5
 80402a4:	dc400915 	stw	r17,36(sp)
 80402a8:	dfc00a15 	stw	ra,40(sp)
 80402ac:	2823883a 	mov	r17,r5
 80402b0:	80403740 	call	8040374 <strlen>
 80402b4:	11000044 	addi	r4,r2,1
 80402b8:	d8800515 	stw	r2,20(sp)
 80402bc:	00800044 	movi	r2,1
 80402c0:	00c20134 	movhi	r3,2052
 80402c4:	d8800715 	stw	r2,28(sp)
 80402c8:	d8800404 	addi	r2,sp,16
 80402cc:	18d5b504 	addi	r3,r3,22228
 80402d0:	d8800115 	stw	r2,4(sp)
 80402d4:	00800084 	movi	r2,2
 80402d8:	dc400415 	stw	r17,16(sp)
 80402dc:	d8c00615 	stw	r3,24(sp)
 80402e0:	d9000315 	stw	r4,12(sp)
 80402e4:	d8800215 	stw	r2,8(sp)
 80402e8:	81400217 	ldw	r5,8(r16)
 80402ec:	80000226 	beq	r16,zero,80402f8 <_puts_r+0x64>
 80402f0:	80800e17 	ldw	r2,56(r16)
 80402f4:	10001426 	beq	r2,zero,8040348 <_puts_r+0xb4>
 80402f8:	2880030b 	ldhu	r2,12(r5)
 80402fc:	10c8000c 	andi	r3,r2,8192
 8040300:	1800061e 	bne	r3,zero,804031c <_puts_r+0x88>
 8040304:	28c01917 	ldw	r3,100(r5)
 8040308:	0137ffc4 	movi	r4,-8193
 804030c:	10880014 	ori	r2,r2,8192
 8040310:	1906703a 	and	r3,r3,r4
 8040314:	2880030d 	sth	r2,12(r5)
 8040318:	28c01915 	stw	r3,100(r5)
 804031c:	d9800104 	addi	r6,sp,4
 8040320:	8009883a 	mov	r4,r16
 8040324:	80407980 	call	8040798 <__sfvwrite_r>
 8040328:	1007883a 	mov	r3,r2
 804032c:	00800284 	movi	r2,10
 8040330:	18000a1e 	bne	r3,zero,804035c <_puts_r+0xc8>
 8040334:	dfc00a17 	ldw	ra,40(sp)
 8040338:	dc400917 	ldw	r17,36(sp)
 804033c:	dc000817 	ldw	r16,32(sp)
 8040340:	dec00b04 	addi	sp,sp,44
 8040344:	f800283a 	ret
 8040348:	8009883a 	mov	r4,r16
 804034c:	d9400015 	stw	r5,0(sp)
 8040350:	80407500 	call	8040750 <__sinit>
 8040354:	d9400017 	ldw	r5,0(sp)
 8040358:	003fe706 	br	80402f8 <_puts_r+0x64>
 804035c:	00bfffc4 	movi	r2,-1
 8040360:	003ff406 	br	8040334 <_puts_r+0xa0>

08040364 <puts>:
 8040364:	00820134 	movhi	r2,2052
 8040368:	200b883a 	mov	r5,r4
 804036c:	111c5117 	ldw	r4,28996(r2)
 8040370:	80402941 	jmpi	8040294 <_puts_r>

08040374 <strlen>:
 8040374:	208000cc 	andi	r2,r4,3
 8040378:	10000926 	beq	r2,zero,80403a0 <strlen+0x2c>
 804037c:	2005883a 	mov	r2,r4
 8040380:	00000306 	br	8040390 <strlen+0x1c>
 8040384:	10800044 	addi	r2,r2,1
 8040388:	10c000cc 	andi	r3,r2,3
 804038c:	18000526 	beq	r3,zero,80403a4 <strlen+0x30>
 8040390:	10c00007 	ldb	r3,0(r2)
 8040394:	183ffb1e 	bne	r3,zero,8040384 <strlen+0x10>
 8040398:	1105c83a 	sub	r2,r2,r4
 804039c:	f800283a 	ret
 80403a0:	2005883a 	mov	r2,r4
 80403a4:	11400017 	ldw	r5,0(r2)
 80403a8:	01ffbff4 	movhi	r7,65279
 80403ac:	39ffbfc4 	addi	r7,r7,-257
 80403b0:	29c7883a 	add	r3,r5,r7
 80403b4:	01a02074 	movhi	r6,32897
 80403b8:	014a303a 	nor	r5,zero,r5
 80403bc:	1946703a 	and	r3,r3,r5
 80403c0:	31a02004 	addi	r6,r6,-32640
 80403c4:	1986703a 	and	r3,r3,r6
 80403c8:	1800071e 	bne	r3,zero,80403e8 <strlen+0x74>
 80403cc:	11400117 	ldw	r5,4(r2)
 80403d0:	10800104 	addi	r2,r2,4
 80403d4:	29c7883a 	add	r3,r5,r7
 80403d8:	014a303a 	nor	r5,zero,r5
 80403dc:	1946703a 	and	r3,r3,r5
 80403e0:	1986703a 	and	r3,r3,r6
 80403e4:	183ff926 	beq	r3,zero,80403cc <strlen+0x58>
 80403e8:	10c00007 	ldb	r3,0(r2)
 80403ec:	183fea26 	beq	r3,zero,8040398 <strlen+0x24>
 80403f0:	10c00047 	ldb	r3,1(r2)
 80403f4:	10800044 	addi	r2,r2,1
 80403f8:	183fe726 	beq	r3,zero,8040398 <strlen+0x24>
 80403fc:	10c00047 	ldb	r3,1(r2)
 8040400:	10800044 	addi	r2,r2,1
 8040404:	183ffa1e 	bne	r3,zero,80403f0 <strlen+0x7c>
 8040408:	003fe306 	br	8040398 <strlen+0x24>

0804040c <__fp_lock>:
 804040c:	0005883a 	mov	r2,zero
 8040410:	f800283a 	ret

08040414 <_cleanup_r>:
 8040414:	01420134 	movhi	r5,2052
 8040418:	2948cb04 	addi	r5,r5,9004
 804041c:	8040cd81 	jmpi	8040cd8 <_fwalk_reent>

08040420 <__fp_unlock>:
 8040420:	0005883a 	mov	r2,zero
 8040424:	f800283a 	ret

08040428 <__sinit.part.0>:
 8040428:	00c20134 	movhi	r3,2052
 804042c:	20800117 	ldw	r2,4(r4)
 8040430:	18c10504 	addi	r3,r3,1044
 8040434:	20c00f15 	stw	r3,60(r4)
 8040438:	2140bb04 	addi	r5,r4,748
 804043c:	00c000c4 	movi	r3,3
 8040440:	20c0b915 	stw	r3,740(r4)
 8040444:	2140ba15 	stw	r5,744(r4)
 8040448:	2000b815 	stw	zero,736(r4)
 804044c:	10001705 	stb	zero,92(r2)
 8040450:	10001745 	stb	zero,93(r2)
 8040454:	10001785 	stb	zero,94(r2)
 8040458:	100017c5 	stb	zero,95(r2)
 804045c:	10001805 	stb	zero,96(r2)
 8040460:	10001845 	stb	zero,97(r2)
 8040464:	10001885 	stb	zero,98(r2)
 8040468:	100018c5 	stb	zero,99(r2)
 804046c:	00c00104 	movi	r3,4
 8040470:	10c00315 	stw	r3,12(r2)
 8040474:	02020134 	movhi	r8,2052
 8040478:	20c00217 	ldw	r3,8(r4)
 804047c:	01c20134 	movhi	r7,2052
 8040480:	01820134 	movhi	r6,2052
 8040484:	01420134 	movhi	r5,2052
 8040488:	4207f904 	addi	r8,r8,8164
 804048c:	39c81004 	addi	r7,r7,8256
 8040490:	31883004 	addi	r6,r6,8384
 8040494:	29484704 	addi	r5,r5,8476
 8040498:	02400074 	movhi	r9,1
 804049c:	10000015 	stw	zero,0(r2)
 80404a0:	10000115 	stw	zero,4(r2)
 80404a4:	10000215 	stw	zero,8(r2)
 80404a8:	10001915 	stw	zero,100(r2)
 80404ac:	10000415 	stw	zero,16(r2)
 80404b0:	10000515 	stw	zero,20(r2)
 80404b4:	10000615 	stw	zero,24(r2)
 80404b8:	10800715 	stw	r2,28(r2)
 80404bc:	12000815 	stw	r8,32(r2)
 80404c0:	11c00915 	stw	r7,36(r2)
 80404c4:	11800a15 	stw	r6,40(r2)
 80404c8:	11400b15 	stw	r5,44(r2)
 80404cc:	4a400284 	addi	r9,r9,10
 80404d0:	1a400315 	stw	r9,12(r3)
 80404d4:	18000015 	stw	zero,0(r3)
 80404d8:	18000115 	stw	zero,4(r3)
 80404dc:	18000215 	stw	zero,8(r3)
 80404e0:	18001915 	stw	zero,100(r3)
 80404e4:	18000415 	stw	zero,16(r3)
 80404e8:	18001705 	stb	zero,92(r3)
 80404ec:	18001745 	stb	zero,93(r3)
 80404f0:	18001785 	stb	zero,94(r3)
 80404f4:	180017c5 	stb	zero,95(r3)
 80404f8:	18001805 	stb	zero,96(r3)
 80404fc:	18001845 	stb	zero,97(r3)
 8040500:	18001885 	stb	zero,98(r3)
 8040504:	180018c5 	stb	zero,99(r3)
 8040508:	20800317 	ldw	r2,12(r4)
 804050c:	024000b4 	movhi	r9,2
 8040510:	18000515 	stw	zero,20(r3)
 8040514:	18000615 	stw	zero,24(r3)
 8040518:	18c00715 	stw	r3,28(r3)
 804051c:	1a000815 	stw	r8,32(r3)
 8040520:	19c00915 	stw	r7,36(r3)
 8040524:	19800a15 	stw	r6,40(r3)
 8040528:	19400b15 	stw	r5,44(r3)
 804052c:	4a400484 	addi	r9,r9,18
 8040530:	10000015 	stw	zero,0(r2)
 8040534:	10000115 	stw	zero,4(r2)
 8040538:	10000215 	stw	zero,8(r2)
 804053c:	10001915 	stw	zero,100(r2)
 8040540:	12400315 	stw	r9,12(r2)
 8040544:	10000415 	stw	zero,16(r2)
 8040548:	10000515 	stw	zero,20(r2)
 804054c:	10000615 	stw	zero,24(r2)
 8040550:	10001705 	stb	zero,92(r2)
 8040554:	10001745 	stb	zero,93(r2)
 8040558:	10001785 	stb	zero,94(r2)
 804055c:	100017c5 	stb	zero,95(r2)
 8040560:	10001805 	stb	zero,96(r2)
 8040564:	10001845 	stb	zero,97(r2)
 8040568:	10001885 	stb	zero,98(r2)
 804056c:	100018c5 	stb	zero,99(r2)
 8040570:	10800715 	stw	r2,28(r2)
 8040574:	12000815 	stw	r8,32(r2)
 8040578:	11c00915 	stw	r7,36(r2)
 804057c:	11800a15 	stw	r6,40(r2)
 8040580:	11400b15 	stw	r5,44(r2)
 8040584:	00800044 	movi	r2,1
 8040588:	20800e15 	stw	r2,56(r4)
 804058c:	f800283a 	ret

08040590 <__sfmoreglue>:
 8040590:	defffc04 	addi	sp,sp,-16
 8040594:	dc800215 	stw	r18,8(sp)
 8040598:	2825883a 	mov	r18,r5
 804059c:	dc000015 	stw	r16,0(sp)
 80405a0:	01401a04 	movi	r5,104
 80405a4:	2021883a 	mov	r16,r4
 80405a8:	913fffc4 	addi	r4,r18,-1
 80405ac:	dfc00315 	stw	ra,12(sp)
 80405b0:	dc400115 	stw	r17,4(sp)
 80405b4:	80430ac0 	call	80430ac <__mulsi3>
 80405b8:	8009883a 	mov	r4,r16
 80405bc:	11401d04 	addi	r5,r2,116
 80405c0:	1023883a 	mov	r17,r2
 80405c4:	8040d800 	call	8040d80 <_malloc_r>
 80405c8:	1021883a 	mov	r16,r2
 80405cc:	10000726 	beq	r2,zero,80405ec <__sfmoreglue+0x5c>
 80405d0:	11000304 	addi	r4,r2,12
 80405d4:	10000015 	stw	zero,0(r2)
 80405d8:	14800115 	stw	r18,4(r2)
 80405dc:	11000215 	stw	r4,8(r2)
 80405e0:	89801a04 	addi	r6,r17,104
 80405e4:	000b883a 	mov	r5,zero
 80405e8:	80418580 	call	8041858 <memset>
 80405ec:	8005883a 	mov	r2,r16
 80405f0:	dfc00317 	ldw	ra,12(sp)
 80405f4:	dc800217 	ldw	r18,8(sp)
 80405f8:	dc400117 	ldw	r17,4(sp)
 80405fc:	dc000017 	ldw	r16,0(sp)
 8040600:	dec00404 	addi	sp,sp,16
 8040604:	f800283a 	ret

08040608 <__sfp>:
 8040608:	defffc04 	addi	sp,sp,-16
 804060c:	00820134 	movhi	r2,2052
 8040610:	dc400115 	stw	r17,4(sp)
 8040614:	145c5017 	ldw	r17,28992(r2)
 8040618:	dc800215 	stw	r18,8(sp)
 804061c:	dfc00315 	stw	ra,12(sp)
 8040620:	88800e17 	ldw	r2,56(r17)
 8040624:	dc000015 	stw	r16,0(sp)
 8040628:	2025883a 	mov	r18,r4
 804062c:	10002d26 	beq	r2,zero,80406e4 <__sfp+0xdc>
 8040630:	8c40b804 	addi	r17,r17,736
 8040634:	88800117 	ldw	r2,4(r17)
 8040638:	8c000217 	ldw	r16,8(r17)
 804063c:	10bfffc4 	addi	r2,r2,-1
 8040640:	1000030e 	bge	r2,zero,8040650 <__sfp+0x48>
 8040644:	00002306 	br	80406d4 <__sfp+0xcc>
 8040648:	84001a04 	addi	r16,r16,104
 804064c:	28002126 	beq	r5,zero,80406d4 <__sfp+0xcc>
 8040650:	80c0030f 	ldh	r3,12(r16)
 8040654:	10bfffc4 	addi	r2,r2,-1
 8040658:	117fffd8 	cmpnei	r5,r2,-1
 804065c:	183ffa1e 	bne	r3,zero,8040648 <__sfp+0x40>
 8040660:	00bffff4 	movhi	r2,65535
 8040664:	10800044 	addi	r2,r2,1
 8040668:	80800315 	stw	r2,12(r16)
 804066c:	80001915 	stw	zero,100(r16)
 8040670:	80000015 	stw	zero,0(r16)
 8040674:	80000215 	stw	zero,8(r16)
 8040678:	80000115 	stw	zero,4(r16)
 804067c:	80000415 	stw	zero,16(r16)
 8040680:	80000515 	stw	zero,20(r16)
 8040684:	80000615 	stw	zero,24(r16)
 8040688:	80001705 	stb	zero,92(r16)
 804068c:	80001745 	stb	zero,93(r16)
 8040690:	80001785 	stb	zero,94(r16)
 8040694:	800017c5 	stb	zero,95(r16)
 8040698:	80001805 	stb	zero,96(r16)
 804069c:	80001845 	stb	zero,97(r16)
 80406a0:	80001885 	stb	zero,98(r16)
 80406a4:	800018c5 	stb	zero,99(r16)
 80406a8:	80000c15 	stw	zero,48(r16)
 80406ac:	80000d15 	stw	zero,52(r16)
 80406b0:	80001115 	stw	zero,68(r16)
 80406b4:	80001215 	stw	zero,72(r16)
 80406b8:	8005883a 	mov	r2,r16
 80406bc:	dfc00317 	ldw	ra,12(sp)
 80406c0:	dc800217 	ldw	r18,8(sp)
 80406c4:	dc400117 	ldw	r17,4(sp)
 80406c8:	dc000017 	ldw	r16,0(sp)
 80406cc:	dec00404 	addi	sp,sp,16
 80406d0:	f800283a 	ret
 80406d4:	8c000017 	ldw	r16,0(r17)
 80406d8:	80000526 	beq	r16,zero,80406f0 <__sfp+0xe8>
 80406dc:	8023883a 	mov	r17,r16
 80406e0:	003fd406 	br	8040634 <__sfp+0x2c>
 80406e4:	8809883a 	mov	r4,r17
 80406e8:	80404280 	call	8040428 <__sinit.part.0>
 80406ec:	003fd006 	br	8040630 <__sfp+0x28>
 80406f0:	01406b04 	movi	r5,428
 80406f4:	9009883a 	mov	r4,r18
 80406f8:	8040d800 	call	8040d80 <_malloc_r>
 80406fc:	1021883a 	mov	r16,r2
 8040700:	10000a26 	beq	r2,zero,804072c <__sfp+0x124>
 8040704:	10000015 	stw	zero,0(r2)
 8040708:	11000304 	addi	r4,r2,12
 804070c:	00800104 	movi	r2,4
 8040710:	80800115 	stw	r2,4(r16)
 8040714:	81000215 	stw	r4,8(r16)
 8040718:	01806804 	movi	r6,416
 804071c:	000b883a 	mov	r5,zero
 8040720:	80418580 	call	8041858 <memset>
 8040724:	8c000015 	stw	r16,0(r17)
 8040728:	003fec06 	br	80406dc <__sfp+0xd4>
 804072c:	88000015 	stw	zero,0(r17)
 8040730:	00800304 	movi	r2,12
 8040734:	90800015 	stw	r2,0(r18)
 8040738:	003fdf06 	br	80406b8 <__sfp+0xb0>

0804073c <_cleanup>:
 804073c:	00820134 	movhi	r2,2052
 8040740:	111c5017 	ldw	r4,28992(r2)
 8040744:	01420134 	movhi	r5,2052
 8040748:	2948cb04 	addi	r5,r5,9004
 804074c:	8040cd81 	jmpi	8040cd8 <_fwalk_reent>

08040750 <__sinit>:
 8040750:	20800e17 	ldw	r2,56(r4)
 8040754:	10000126 	beq	r2,zero,804075c <__sinit+0xc>
 8040758:	f800283a 	ret
 804075c:	80404281 	jmpi	8040428 <__sinit.part.0>

08040760 <__sfp_lock_acquire>:
 8040760:	f800283a 	ret

08040764 <__sfp_lock_release>:
 8040764:	f800283a 	ret

08040768 <__sinit_lock_acquire>:
 8040768:	f800283a 	ret

0804076c <__sinit_lock_release>:
 804076c:	f800283a 	ret

08040770 <__fp_lock_all>:
 8040770:	00820134 	movhi	r2,2052
 8040774:	111c5117 	ldw	r4,28996(r2)
 8040778:	01420134 	movhi	r5,2052
 804077c:	29410304 	addi	r5,r5,1036
 8040780:	8040c401 	jmpi	8040c40 <_fwalk>

08040784 <__fp_unlock_all>:
 8040784:	00820134 	movhi	r2,2052
 8040788:	111c5117 	ldw	r4,28996(r2)
 804078c:	01420134 	movhi	r5,2052
 8040790:	29410804 	addi	r5,r5,1056
 8040794:	8040c401 	jmpi	8040c40 <_fwalk>

08040798 <__sfvwrite_r>:
 8040798:	30800217 	ldw	r2,8(r6)
 804079c:	1000c426 	beq	r2,zero,8040ab0 <__sfvwrite_r+0x318>
 80407a0:	2a80030b 	ldhu	r10,12(r5)
 80407a4:	defff504 	addi	sp,sp,-44
 80407a8:	df000915 	stw	fp,36(sp)
 80407ac:	dcc00415 	stw	r19,16(sp)
 80407b0:	dc000115 	stw	r16,4(sp)
 80407b4:	dfc00a15 	stw	ra,40(sp)
 80407b8:	ddc00815 	stw	r23,32(sp)
 80407bc:	dd800715 	stw	r22,28(sp)
 80407c0:	dd400615 	stw	r21,24(sp)
 80407c4:	dd000515 	stw	r20,20(sp)
 80407c8:	dc800315 	stw	r18,12(sp)
 80407cc:	dc400215 	stw	r17,8(sp)
 80407d0:	5080020c 	andi	r2,r10,8
 80407d4:	3039883a 	mov	fp,r6
 80407d8:	2027883a 	mov	r19,r4
 80407dc:	2821883a 	mov	r16,r5
 80407e0:	10002226 	beq	r2,zero,804086c <__sfvwrite_r+0xd4>
 80407e4:	28800417 	ldw	r2,16(r5)
 80407e8:	10002026 	beq	r2,zero,804086c <__sfvwrite_r+0xd4>
 80407ec:	5080008c 	andi	r2,r10,2
 80407f0:	e4400017 	ldw	r17,0(fp)
 80407f4:	10002526 	beq	r2,zero,804088c <__sfvwrite_r+0xf4>
 80407f8:	80800917 	ldw	r2,36(r16)
 80407fc:	81400717 	ldw	r5,28(r16)
 8040800:	05600034 	movhi	r21,32768
 8040804:	0029883a 	mov	r20,zero
 8040808:	0025883a 	mov	r18,zero
 804080c:	ad7f0004 	addi	r21,r21,-1024
 8040810:	a00d883a 	mov	r6,r20
 8040814:	9809883a 	mov	r4,r19
 8040818:	90001026 	beq	r18,zero,804085c <__sfvwrite_r+0xc4>
 804081c:	900f883a 	mov	r7,r18
 8040820:	ac80012e 	bgeu	r21,r18,8040828 <__sfvwrite_r+0x90>
 8040824:	a80f883a 	mov	r7,r21
 8040828:	103ee83a 	callr	r2
 804082c:	00809b0e 	bge	zero,r2,8040a9c <__sfvwrite_r+0x304>
 8040830:	e0c00217 	ldw	r3,8(fp)
 8040834:	a0a9883a 	add	r20,r20,r2
 8040838:	90a5c83a 	sub	r18,r18,r2
 804083c:	1885c83a 	sub	r2,r3,r2
 8040840:	e0800215 	stw	r2,8(fp)
 8040844:	10008426 	beq	r2,zero,8040a58 <__sfvwrite_r+0x2c0>
 8040848:	80800917 	ldw	r2,36(r16)
 804084c:	81400717 	ldw	r5,28(r16)
 8040850:	a00d883a 	mov	r6,r20
 8040854:	9809883a 	mov	r4,r19
 8040858:	903ff01e 	bne	r18,zero,804081c <__sfvwrite_r+0x84>
 804085c:	8d000017 	ldw	r20,0(r17)
 8040860:	8c800117 	ldw	r18,4(r17)
 8040864:	8c400204 	addi	r17,r17,8
 8040868:	003fe906 	br	8040810 <__sfvwrite_r+0x78>
 804086c:	800b883a 	mov	r5,r16
 8040870:	9809883a 	mov	r4,r19
 8040874:	80421880 	call	8042188 <__swsetup_r>
 8040878:	10008b1e 	bne	r2,zero,8040aa8 <__sfvwrite_r+0x310>
 804087c:	8280030b 	ldhu	r10,12(r16)
 8040880:	e4400017 	ldw	r17,0(fp)
 8040884:	5080008c 	andi	r2,r10,2
 8040888:	103fdb1e 	bne	r2,zero,80407f8 <__sfvwrite_r+0x60>
 804088c:	5080004c 	andi	r2,r10,1
 8040890:	10004f1e 	bne	r2,zero,80409d0 <__sfvwrite_r+0x238>
 8040894:	00a00034 	movhi	r2,32768
 8040898:	81c00017 	ldw	r7,0(r16)
 804089c:	80c00217 	ldw	r3,8(r16)
 80408a0:	10bfffc4 	addi	r2,r2,-1
 80408a4:	002d883a 	mov	r22,zero
 80408a8:	0025883a 	mov	r18,zero
 80408ac:	d8800015 	stw	r2,0(sp)
 80408b0:	3809883a 	mov	r4,r7
 80408b4:	1829883a 	mov	r20,r3
 80408b8:	90004126 	beq	r18,zero,80409c0 <__sfvwrite_r+0x228>
 80408bc:	5080800c 	andi	r2,r10,512
 80408c0:	10009526 	beq	r2,zero,8040b18 <__sfvwrite_r+0x380>
 80408c4:	182b883a 	mov	r21,r3
 80408c8:	90c0ba36 	bltu	r18,r3,8040bb4 <__sfvwrite_r+0x41c>
 80408cc:	5081200c 	andi	r2,r10,1152
 80408d0:	10002526 	beq	r2,zero,8040968 <__sfvwrite_r+0x1d0>
 80408d4:	80c00517 	ldw	r3,20(r16)
 80408d8:	81000417 	ldw	r4,16(r16)
 80408dc:	18c5883a 	add	r2,r3,r3
 80408e0:	10c5883a 	add	r2,r2,r3
 80408e4:	1012d7fa 	srli	r9,r2,31
 80408e8:	392fc83a 	sub	r23,r7,r4
 80408ec:	b8c00044 	addi	r3,r23,1
 80408f0:	4893883a 	add	r9,r9,r2
 80408f4:	4829d07a 	srai	r20,r9,1
 80408f8:	1c85883a 	add	r2,r3,r18
 80408fc:	a00b883a 	mov	r5,r20
 8040900:	a080022e 	bgeu	r20,r2,804090c <__sfvwrite_r+0x174>
 8040904:	1029883a 	mov	r20,r2
 8040908:	100b883a 	mov	r5,r2
 804090c:	5281000c 	andi	r10,r10,1024
 8040910:	5000b926 	beq	r10,zero,8040bf8 <__sfvwrite_r+0x460>
 8040914:	9809883a 	mov	r4,r19
 8040918:	8040d800 	call	8040d80 <_malloc_r>
 804091c:	1000c426 	beq	r2,zero,8040c30 <__sfvwrite_r+0x498>
 8040920:	81400417 	ldw	r5,16(r16)
 8040924:	1009883a 	mov	r4,r2
 8040928:	b80d883a 	mov	r6,r23
 804092c:	80416300 	call	8041630 <memcpy>
 8040930:	1007883a 	mov	r3,r2
 8040934:	8080030b 	ldhu	r2,12(r16)
 8040938:	013edfc4 	movi	r4,-1153
 804093c:	1104703a 	and	r2,r2,r4
 8040940:	10802014 	ori	r2,r2,128
 8040944:	8080030d 	sth	r2,12(r16)
 8040948:	a5cfc83a 	sub	r7,r20,r23
 804094c:	1dc9883a 	add	r4,r3,r23
 8040950:	85000515 	stw	r20,20(r16)
 8040954:	80c00415 	stw	r3,16(r16)
 8040958:	81000015 	stw	r4,0(r16)
 804095c:	9029883a 	mov	r20,r18
 8040960:	81c00215 	stw	r7,8(r16)
 8040964:	902b883a 	mov	r21,r18
 8040968:	a80d883a 	mov	r6,r21
 804096c:	b00b883a 	mov	r5,r22
 8040970:	80417300 	call	8041730 <memmove>
 8040974:	80c00217 	ldw	r3,8(r16)
 8040978:	81c00017 	ldw	r7,0(r16)
 804097c:	902f883a 	mov	r23,r18
 8040980:	1d07c83a 	sub	r3,r3,r20
 8040984:	3d4d883a 	add	r6,r7,r21
 8040988:	80c00215 	stw	r3,8(r16)
 804098c:	81800015 	stw	r6,0(r16)
 8040990:	0025883a 	mov	r18,zero
 8040994:	e0800217 	ldw	r2,8(fp)
 8040998:	b5ed883a 	add	r22,r22,r23
 804099c:	15c5c83a 	sub	r2,r2,r23
 80409a0:	e0800215 	stw	r2,8(fp)
 80409a4:	10002c26 	beq	r2,zero,8040a58 <__sfvwrite_r+0x2c0>
 80409a8:	81c00017 	ldw	r7,0(r16)
 80409ac:	80c00217 	ldw	r3,8(r16)
 80409b0:	8280030b 	ldhu	r10,12(r16)
 80409b4:	3809883a 	mov	r4,r7
 80409b8:	1829883a 	mov	r20,r3
 80409bc:	903fbf1e 	bne	r18,zero,80408bc <__sfvwrite_r+0x124>
 80409c0:	8d800017 	ldw	r22,0(r17)
 80409c4:	8c800117 	ldw	r18,4(r17)
 80409c8:	8c400204 	addi	r17,r17,8
 80409cc:	003fb806 	br	80408b0 <__sfvwrite_r+0x118>
 80409d0:	002f883a 	mov	r23,zero
 80409d4:	0005883a 	mov	r2,zero
 80409d8:	002b883a 	mov	r21,zero
 80409dc:	0029883a 	mov	r20,zero
 80409e0:	a0003526 	beq	r20,zero,8040ab8 <__sfvwrite_r+0x320>
 80409e4:	10003926 	beq	r2,zero,8040acc <__sfvwrite_r+0x334>
 80409e8:	b805883a 	mov	r2,r23
 80409ec:	a02d883a 	mov	r22,r20
 80409f0:	1500012e 	bgeu	r2,r20,80409f8 <__sfvwrite_r+0x260>
 80409f4:	102d883a 	mov	r22,r2
 80409f8:	81000017 	ldw	r4,0(r16)
 80409fc:	80800417 	ldw	r2,16(r16)
 8040a00:	84800217 	ldw	r18,8(r16)
 8040a04:	81c00517 	ldw	r7,20(r16)
 8040a08:	1100022e 	bgeu	r2,r4,8040a14 <__sfvwrite_r+0x27c>
 8040a0c:	91e5883a 	add	r18,r18,r7
 8040a10:	95803616 	blt	r18,r22,8040aec <__sfvwrite_r+0x354>
 8040a14:	b1c06a16 	blt	r22,r7,8040bc0 <__sfvwrite_r+0x428>
 8040a18:	80800917 	ldw	r2,36(r16)
 8040a1c:	81400717 	ldw	r5,28(r16)
 8040a20:	a80d883a 	mov	r6,r21
 8040a24:	9809883a 	mov	r4,r19
 8040a28:	103ee83a 	callr	r2
 8040a2c:	1025883a 	mov	r18,r2
 8040a30:	00801a0e 	bge	zero,r2,8040a9c <__sfvwrite_r+0x304>
 8040a34:	bcafc83a 	sub	r23,r23,r18
 8040a38:	b8001426 	beq	r23,zero,8040a8c <__sfvwrite_r+0x2f4>
 8040a3c:	00800044 	movi	r2,1
 8040a40:	e0c00217 	ldw	r3,8(fp)
 8040a44:	acab883a 	add	r21,r21,r18
 8040a48:	a4a9c83a 	sub	r20,r20,r18
 8040a4c:	1c87c83a 	sub	r3,r3,r18
 8040a50:	e0c00215 	stw	r3,8(fp)
 8040a54:	183fe21e 	bne	r3,zero,80409e0 <__sfvwrite_r+0x248>
 8040a58:	0005883a 	mov	r2,zero
 8040a5c:	dfc00a17 	ldw	ra,40(sp)
 8040a60:	df000917 	ldw	fp,36(sp)
 8040a64:	ddc00817 	ldw	r23,32(sp)
 8040a68:	dd800717 	ldw	r22,28(sp)
 8040a6c:	dd400617 	ldw	r21,24(sp)
 8040a70:	dd000517 	ldw	r20,20(sp)
 8040a74:	dcc00417 	ldw	r19,16(sp)
 8040a78:	dc800317 	ldw	r18,12(sp)
 8040a7c:	dc400217 	ldw	r17,8(sp)
 8040a80:	dc000117 	ldw	r16,4(sp)
 8040a84:	dec00b04 	addi	sp,sp,44
 8040a88:	f800283a 	ret
 8040a8c:	800b883a 	mov	r5,r16
 8040a90:	9809883a 	mov	r4,r19
 8040a94:	804263c0 	call	804263c <_fflush_r>
 8040a98:	103fe926 	beq	r2,zero,8040a40 <__sfvwrite_r+0x2a8>
 8040a9c:	8080030b 	ldhu	r2,12(r16)
 8040aa0:	10801014 	ori	r2,r2,64
 8040aa4:	8080030d 	sth	r2,12(r16)
 8040aa8:	00bfffc4 	movi	r2,-1
 8040aac:	003feb06 	br	8040a5c <__sfvwrite_r+0x2c4>
 8040ab0:	0005883a 	mov	r2,zero
 8040ab4:	f800283a 	ret
 8040ab8:	8d000117 	ldw	r20,4(r17)
 8040abc:	8805883a 	mov	r2,r17
 8040ac0:	8c400204 	addi	r17,r17,8
 8040ac4:	a03ffc26 	beq	r20,zero,8040ab8 <__sfvwrite_r+0x320>
 8040ac8:	15400017 	ldw	r21,0(r2)
 8040acc:	a00d883a 	mov	r6,r20
 8040ad0:	01400284 	movi	r5,10
 8040ad4:	a809883a 	mov	r4,r21
 8040ad8:	80415340 	call	8041534 <memchr>
 8040adc:	10004326 	beq	r2,zero,8040bec <__sfvwrite_r+0x454>
 8040ae0:	10800044 	addi	r2,r2,1
 8040ae4:	156fc83a 	sub	r23,r2,r21
 8040ae8:	003fbf06 	br	80409e8 <__sfvwrite_r+0x250>
 8040aec:	a80b883a 	mov	r5,r21
 8040af0:	900d883a 	mov	r6,r18
 8040af4:	80417300 	call	8041730 <memmove>
 8040af8:	80800017 	ldw	r2,0(r16)
 8040afc:	800b883a 	mov	r5,r16
 8040b00:	9809883a 	mov	r4,r19
 8040b04:	1485883a 	add	r2,r2,r18
 8040b08:	80800015 	stw	r2,0(r16)
 8040b0c:	804263c0 	call	804263c <_fflush_r>
 8040b10:	103fc826 	beq	r2,zero,8040a34 <__sfvwrite_r+0x29c>
 8040b14:	003fe106 	br	8040a9c <__sfvwrite_r+0x304>
 8040b18:	80800417 	ldw	r2,16(r16)
 8040b1c:	11c01236 	bltu	r2,r7,8040b68 <__sfvwrite_r+0x3d0>
 8040b20:	81400517 	ldw	r5,20(r16)
 8040b24:	91401036 	bltu	r18,r5,8040b68 <__sfvwrite_r+0x3d0>
 8040b28:	00a00034 	movhi	r2,32768
 8040b2c:	902f883a 	mov	r23,r18
 8040b30:	90800136 	bltu	r18,r2,8040b38 <__sfvwrite_r+0x3a0>
 8040b34:	ddc00017 	ldw	r23,0(sp)
 8040b38:	b809883a 	mov	r4,r23
 8040b3c:	8042f780 	call	8042f78 <__modsi3>
 8040b40:	80c00917 	ldw	r3,36(r16)
 8040b44:	81400717 	ldw	r5,28(r16)
 8040b48:	b88fc83a 	sub	r7,r23,r2
 8040b4c:	b00d883a 	mov	r6,r22
 8040b50:	9809883a 	mov	r4,r19
 8040b54:	183ee83a 	callr	r3
 8040b58:	102f883a 	mov	r23,r2
 8040b5c:	00bfcf0e 	bge	zero,r2,8040a9c <__sfvwrite_r+0x304>
 8040b60:	95e5c83a 	sub	r18,r18,r23
 8040b64:	003f8b06 	br	8040994 <__sfvwrite_r+0x1fc>
 8040b68:	182f883a 	mov	r23,r3
 8040b6c:	90c0012e 	bgeu	r18,r3,8040b74 <__sfvwrite_r+0x3dc>
 8040b70:	902f883a 	mov	r23,r18
 8040b74:	3809883a 	mov	r4,r7
 8040b78:	b80d883a 	mov	r6,r23
 8040b7c:	b00b883a 	mov	r5,r22
 8040b80:	80417300 	call	8041730 <memmove>
 8040b84:	80c00217 	ldw	r3,8(r16)
 8040b88:	81c00017 	ldw	r7,0(r16)
 8040b8c:	1dc7c83a 	sub	r3,r3,r23
 8040b90:	3dcf883a 	add	r7,r7,r23
 8040b94:	80c00215 	stw	r3,8(r16)
 8040b98:	81c00015 	stw	r7,0(r16)
 8040b9c:	183ff01e 	bne	r3,zero,8040b60 <__sfvwrite_r+0x3c8>
 8040ba0:	800b883a 	mov	r5,r16
 8040ba4:	9809883a 	mov	r4,r19
 8040ba8:	804263c0 	call	804263c <_fflush_r>
 8040bac:	103fec26 	beq	r2,zero,8040b60 <__sfvwrite_r+0x3c8>
 8040bb0:	003fba06 	br	8040a9c <__sfvwrite_r+0x304>
 8040bb4:	9029883a 	mov	r20,r18
 8040bb8:	902b883a 	mov	r21,r18
 8040bbc:	003f6a06 	br	8040968 <__sfvwrite_r+0x1d0>
 8040bc0:	b00d883a 	mov	r6,r22
 8040bc4:	a80b883a 	mov	r5,r21
 8040bc8:	80417300 	call	8041730 <memmove>
 8040bcc:	80c00217 	ldw	r3,8(r16)
 8040bd0:	80800017 	ldw	r2,0(r16)
 8040bd4:	b025883a 	mov	r18,r22
 8040bd8:	1d87c83a 	sub	r3,r3,r22
 8040bdc:	1585883a 	add	r2,r2,r22
 8040be0:	80c00215 	stw	r3,8(r16)
 8040be4:	80800015 	stw	r2,0(r16)
 8040be8:	003f9206 	br	8040a34 <__sfvwrite_r+0x29c>
 8040bec:	a0800044 	addi	r2,r20,1
 8040bf0:	102f883a 	mov	r23,r2
 8040bf4:	003f7d06 	br	80409ec <__sfvwrite_r+0x254>
 8040bf8:	280d883a 	mov	r6,r5
 8040bfc:	200b883a 	mov	r5,r4
 8040c00:	9809883a 	mov	r4,r19
 8040c04:	80419980 	call	8041998 <_realloc_r>
 8040c08:	1007883a 	mov	r3,r2
 8040c0c:	103f4e1e 	bne	r2,zero,8040948 <__sfvwrite_r+0x1b0>
 8040c10:	81400417 	ldw	r5,16(r16)
 8040c14:	9809883a 	mov	r4,r19
 8040c18:	80428440 	call	8042844 <_free_r>
 8040c1c:	8080030b 	ldhu	r2,12(r16)
 8040c20:	00c00304 	movi	r3,12
 8040c24:	98c00015 	stw	r3,0(r19)
 8040c28:	10bfdfcc 	andi	r2,r2,65407
 8040c2c:	003f9c06 	br	8040aa0 <__sfvwrite_r+0x308>
 8040c30:	00c00304 	movi	r3,12
 8040c34:	8080030b 	ldhu	r2,12(r16)
 8040c38:	98c00015 	stw	r3,0(r19)
 8040c3c:	003f9806 	br	8040aa0 <__sfvwrite_r+0x308>

08040c40 <_fwalk>:
 8040c40:	defffa04 	addi	sp,sp,-24
 8040c44:	dd000415 	stw	r20,16(sp)
 8040c48:	dcc00315 	stw	r19,12(sp)
 8040c4c:	dc800215 	stw	r18,8(sp)
 8040c50:	dfc00515 	stw	ra,20(sp)
 8040c54:	dc400115 	stw	r17,4(sp)
 8040c58:	dc000015 	stw	r16,0(sp)
 8040c5c:	2827883a 	mov	r19,r5
 8040c60:	2480b804 	addi	r18,r4,736
 8040c64:	0029883a 	mov	r20,zero
 8040c68:	94400117 	ldw	r17,4(r18)
 8040c6c:	94000217 	ldw	r16,8(r18)
 8040c70:	8c7fffc4 	addi	r17,r17,-1
 8040c74:	88000d16 	blt	r17,zero,8040cac <_fwalk+0x6c>
 8040c78:	8080030b 	ldhu	r2,12(r16)
 8040c7c:	8c7fffc4 	addi	r17,r17,-1
 8040c80:	108000b0 	cmpltui	r2,r2,2
 8040c84:	1000061e 	bne	r2,zero,8040ca0 <_fwalk+0x60>
 8040c88:	8080038f 	ldh	r2,14(r16)
 8040c8c:	8009883a 	mov	r4,r16
 8040c90:	10bfffe0 	cmpeqi	r2,r2,-1
 8040c94:	1000021e 	bne	r2,zero,8040ca0 <_fwalk+0x60>
 8040c98:	983ee83a 	callr	r19
 8040c9c:	a0a8b03a 	or	r20,r20,r2
 8040ca0:	88bfffd8 	cmpnei	r2,r17,-1
 8040ca4:	84001a04 	addi	r16,r16,104
 8040ca8:	103ff31e 	bne	r2,zero,8040c78 <_fwalk+0x38>
 8040cac:	94800017 	ldw	r18,0(r18)
 8040cb0:	903fed1e 	bne	r18,zero,8040c68 <_fwalk+0x28>
 8040cb4:	a005883a 	mov	r2,r20
 8040cb8:	dfc00517 	ldw	ra,20(sp)
 8040cbc:	dd000417 	ldw	r20,16(sp)
 8040cc0:	dcc00317 	ldw	r19,12(sp)
 8040cc4:	dc800217 	ldw	r18,8(sp)
 8040cc8:	dc400117 	ldw	r17,4(sp)
 8040ccc:	dc000017 	ldw	r16,0(sp)
 8040cd0:	dec00604 	addi	sp,sp,24
 8040cd4:	f800283a 	ret

08040cd8 <_fwalk_reent>:
 8040cd8:	defff904 	addi	sp,sp,-28
 8040cdc:	dd400515 	stw	r21,20(sp)
 8040ce0:	dd000415 	stw	r20,16(sp)
 8040ce4:	dcc00315 	stw	r19,12(sp)
 8040ce8:	dc800215 	stw	r18,8(sp)
 8040cec:	dfc00615 	stw	ra,24(sp)
 8040cf0:	dc400115 	stw	r17,4(sp)
 8040cf4:	dc000015 	stw	r16,0(sp)
 8040cf8:	2025883a 	mov	r18,r4
 8040cfc:	2829883a 	mov	r20,r5
 8040d00:	24c0b804 	addi	r19,r4,736
 8040d04:	002b883a 	mov	r21,zero
 8040d08:	9c400117 	ldw	r17,4(r19)
 8040d0c:	9c000217 	ldw	r16,8(r19)
 8040d10:	8c7fffc4 	addi	r17,r17,-1
 8040d14:	88000e16 	blt	r17,zero,8040d50 <_fwalk_reent+0x78>
 8040d18:	8080030b 	ldhu	r2,12(r16)
 8040d1c:	8c7fffc4 	addi	r17,r17,-1
 8040d20:	108000b0 	cmpltui	r2,r2,2
 8040d24:	1000071e 	bne	r2,zero,8040d44 <_fwalk_reent+0x6c>
 8040d28:	8080038f 	ldh	r2,14(r16)
 8040d2c:	800b883a 	mov	r5,r16
 8040d30:	9009883a 	mov	r4,r18
 8040d34:	10bfffe0 	cmpeqi	r2,r2,-1
 8040d38:	1000021e 	bne	r2,zero,8040d44 <_fwalk_reent+0x6c>
 8040d3c:	a03ee83a 	callr	r20
 8040d40:	a8aab03a 	or	r21,r21,r2
 8040d44:	88bfffd8 	cmpnei	r2,r17,-1
 8040d48:	84001a04 	addi	r16,r16,104
 8040d4c:	103ff21e 	bne	r2,zero,8040d18 <_fwalk_reent+0x40>
 8040d50:	9cc00017 	ldw	r19,0(r19)
 8040d54:	983fec1e 	bne	r19,zero,8040d08 <_fwalk_reent+0x30>
 8040d58:	a805883a 	mov	r2,r21
 8040d5c:	dfc00617 	ldw	ra,24(sp)
 8040d60:	dd400517 	ldw	r21,20(sp)
 8040d64:	dd000417 	ldw	r20,16(sp)
 8040d68:	dcc00317 	ldw	r19,12(sp)
 8040d6c:	dc800217 	ldw	r18,8(sp)
 8040d70:	dc400117 	ldw	r17,4(sp)
 8040d74:	dc000017 	ldw	r16,0(sp)
 8040d78:	dec00704 	addi	sp,sp,28
 8040d7c:	f800283a 	ret

08040d80 <_malloc_r>:
 8040d80:	defff604 	addi	sp,sp,-40
 8040d84:	dc400115 	stw	r17,4(sp)
 8040d88:	2c4002c4 	addi	r17,r5,11
 8040d8c:	dc800215 	stw	r18,8(sp)
 8040d90:	dfc00915 	stw	ra,36(sp)
 8040d94:	df000815 	stw	fp,32(sp)
 8040d98:	ddc00715 	stw	r23,28(sp)
 8040d9c:	dd800615 	stw	r22,24(sp)
 8040da0:	dd400515 	stw	r21,20(sp)
 8040da4:	dd000415 	stw	r20,16(sp)
 8040da8:	dcc00315 	stw	r19,12(sp)
 8040dac:	dc000015 	stw	r16,0(sp)
 8040db0:	888005e8 	cmpgeui	r2,r17,23
 8040db4:	2025883a 	mov	r18,r4
 8040db8:	1000261e 	bne	r2,zero,8040e54 <_malloc_r+0xd4>
 8040dbc:	29400468 	cmpgeui	r5,r5,17
 8040dc0:	28008d1e 	bne	r5,zero,8040ff8 <_malloc_r+0x278>
 8040dc4:	80436800 	call	8043680 <__malloc_lock>
 8040dc8:	04400404 	movi	r17,16
 8040dcc:	00800604 	movi	r2,24
 8040dd0:	01c00084 	movi	r7,2
 8040dd4:	04c20134 	movhi	r19,2052
 8040dd8:	9cd6cc04 	addi	r19,r19,23344
 8040ddc:	9885883a 	add	r2,r19,r2
 8040de0:	14000117 	ldw	r16,4(r2)
 8040de4:	10fffe04 	addi	r3,r2,-8
 8040de8:	80c0cb26 	beq	r16,r3,8041118 <_malloc_r+0x398>
 8040dec:	80800117 	ldw	r2,4(r16)
 8040df0:	81000317 	ldw	r4,12(r16)
 8040df4:	00ffff04 	movi	r3,-4
 8040df8:	10c4703a 	and	r2,r2,r3
 8040dfc:	81400217 	ldw	r5,8(r16)
 8040e00:	8085883a 	add	r2,r16,r2
 8040e04:	10c00117 	ldw	r3,4(r2)
 8040e08:	29000315 	stw	r4,12(r5)
 8040e0c:	21400215 	stw	r5,8(r4)
 8040e10:	18c00054 	ori	r3,r3,1
 8040e14:	10c00115 	stw	r3,4(r2)
 8040e18:	9009883a 	mov	r4,r18
 8040e1c:	80436a40 	call	80436a4 <__malloc_unlock>
 8040e20:	80800204 	addi	r2,r16,8
 8040e24:	dfc00917 	ldw	ra,36(sp)
 8040e28:	df000817 	ldw	fp,32(sp)
 8040e2c:	ddc00717 	ldw	r23,28(sp)
 8040e30:	dd800617 	ldw	r22,24(sp)
 8040e34:	dd400517 	ldw	r21,20(sp)
 8040e38:	dd000417 	ldw	r20,16(sp)
 8040e3c:	dcc00317 	ldw	r19,12(sp)
 8040e40:	dc800217 	ldw	r18,8(sp)
 8040e44:	dc400117 	ldw	r17,4(sp)
 8040e48:	dc000017 	ldw	r16,0(sp)
 8040e4c:	dec00a04 	addi	sp,sp,40
 8040e50:	f800283a 	ret
 8040e54:	00bffe04 	movi	r2,-8
 8040e58:	88a2703a 	and	r17,r17,r2
 8040e5c:	88006616 	blt	r17,zero,8040ff8 <_malloc_r+0x278>
 8040e60:	89406536 	bltu	r17,r5,8040ff8 <_malloc_r+0x278>
 8040e64:	80436800 	call	8043680 <__malloc_lock>
 8040e68:	88807e28 	cmpgeui	r2,r17,504
 8040e6c:	1000ef26 	beq	r2,zero,804122c <_malloc_r+0x4ac>
 8040e70:	8804d27a 	srli	r2,r17,9
 8040e74:	10006426 	beq	r2,zero,8041008 <_malloc_r+0x288>
 8040e78:	10c00168 	cmpgeui	r3,r2,5
 8040e7c:	1800c31e 	bne	r3,zero,804118c <_malloc_r+0x40c>
 8040e80:	8804d1ba 	srli	r2,r17,6
 8040e84:	11c00e44 	addi	r7,r2,57
 8040e88:	380890fa 	slli	r4,r7,3
 8040e8c:	12000e04 	addi	r8,r2,56
 8040e90:	04c20134 	movhi	r19,2052
 8040e94:	9cd6cc04 	addi	r19,r19,23344
 8040e98:	9909883a 	add	r4,r19,r4
 8040e9c:	24000117 	ldw	r16,4(r4)
 8040ea0:	213ffe04 	addi	r4,r4,-8
 8040ea4:	24000b26 	beq	r4,r16,8040ed4 <_malloc_r+0x154>
 8040ea8:	01bfff04 	movi	r6,-4
 8040eac:	00000306 	br	8040ebc <_malloc_r+0x13c>
 8040eb0:	1800970e 	bge	r3,zero,8041110 <_malloc_r+0x390>
 8040eb4:	84000317 	ldw	r16,12(r16)
 8040eb8:	24000626 	beq	r4,r16,8040ed4 <_malloc_r+0x154>
 8040ebc:	80800117 	ldw	r2,4(r16)
 8040ec0:	1184703a 	and	r2,r2,r6
 8040ec4:	1447c83a 	sub	r3,r2,r17
 8040ec8:	19400408 	cmpgei	r5,r3,16
 8040ecc:	283ff826 	beq	r5,zero,8040eb0 <_malloc_r+0x130>
 8040ed0:	400f883a 	mov	r7,r8
 8040ed4:	9c000417 	ldw	r16,16(r19)
 8040ed8:	02420134 	movhi	r9,2052
 8040edc:	4a56ce04 	addi	r9,r9,23352
 8040ee0:	82407f26 	beq	r16,r9,80410e0 <_malloc_r+0x360>
 8040ee4:	80800117 	ldw	r2,4(r16)
 8040ee8:	00ffff04 	movi	r3,-4
 8040eec:	10c4703a 	and	r2,r2,r3
 8040ef0:	1447c83a 	sub	r3,r2,r17
 8040ef4:	19000410 	cmplti	r4,r3,16
 8040ef8:	2000cf26 	beq	r4,zero,8041238 <_malloc_r+0x4b8>
 8040efc:	9a400515 	stw	r9,20(r19)
 8040f00:	9a400415 	stw	r9,16(r19)
 8040f04:	1800c10e 	bge	r3,zero,804120c <_malloc_r+0x48c>
 8040f08:	10c08028 	cmpgeui	r3,r2,512
 8040f0c:	99400117 	ldw	r5,4(r19)
 8040f10:	1800851e 	bne	r3,zero,8041128 <_malloc_r+0x3a8>
 8040f14:	1006d0fa 	srli	r3,r2,3
 8040f18:	1008d17a 	srli	r4,r2,5
 8040f1c:	18800044 	addi	r2,r3,1
 8040f20:	100490fa 	slli	r2,r2,3
 8040f24:	00c00044 	movi	r3,1
 8040f28:	1906983a 	sll	r3,r3,r4
 8040f2c:	9885883a 	add	r2,r19,r2
 8040f30:	11000017 	ldw	r4,0(r2)
 8040f34:	28cab03a 	or	r5,r5,r3
 8040f38:	10fffe04 	addi	r3,r2,-8
 8040f3c:	80c00315 	stw	r3,12(r16)
 8040f40:	81000215 	stw	r4,8(r16)
 8040f44:	99400115 	stw	r5,4(r19)
 8040f48:	14000015 	stw	r16,0(r2)
 8040f4c:	24000315 	stw	r16,12(r4)
 8040f50:	3805d0ba 	srai	r2,r7,2
 8040f54:	01000044 	movi	r4,1
 8040f58:	2088983a 	sll	r4,r4,r2
 8040f5c:	29002e36 	bltu	r5,r4,8041018 <_malloc_r+0x298>
 8040f60:	2144703a 	and	r2,r4,r5
 8040f64:	10000a1e 	bne	r2,zero,8040f90 <_malloc_r+0x210>
 8040f68:	2109883a 	add	r4,r4,r4
 8040f6c:	00bfff04 	movi	r2,-4
 8040f70:	3884703a 	and	r2,r7,r2
 8040f74:	2146703a 	and	r3,r4,r5
 8040f78:	11c00104 	addi	r7,r2,4
 8040f7c:	1800041e 	bne	r3,zero,8040f90 <_malloc_r+0x210>
 8040f80:	2109883a 	add	r4,r4,r4
 8040f84:	2144703a 	and	r2,r4,r5
 8040f88:	39c00104 	addi	r7,r7,4
 8040f8c:	103ffc26 	beq	r2,zero,8040f80 <_malloc_r+0x200>
 8040f90:	02bfff04 	movi	r10,-4
 8040f94:	381690fa 	slli	r11,r7,3
 8040f98:	3819883a 	mov	r12,r7
 8040f9c:	9ad7883a 	add	r11,r19,r11
 8040fa0:	5811883a 	mov	r8,r11
 8040fa4:	40800317 	ldw	r2,12(r8)
 8040fa8:	40808126 	beq	r8,r2,80411b0 <_malloc_r+0x430>
 8040fac:	10c00117 	ldw	r3,4(r2)
 8040fb0:	1021883a 	mov	r16,r2
 8040fb4:	10800317 	ldw	r2,12(r2)
 8040fb8:	1a86703a 	and	r3,r3,r10
 8040fbc:	1c4bc83a 	sub	r5,r3,r17
 8040fc0:	29800410 	cmplti	r6,r5,16
 8040fc4:	30007f26 	beq	r6,zero,80411c4 <_malloc_r+0x444>
 8040fc8:	283ff716 	blt	r5,zero,8040fa8 <_malloc_r+0x228>
 8040fcc:	80c7883a 	add	r3,r16,r3
 8040fd0:	19400117 	ldw	r5,4(r3)
 8040fd4:	81800217 	ldw	r6,8(r16)
 8040fd8:	9009883a 	mov	r4,r18
 8040fdc:	29400054 	ori	r5,r5,1
 8040fe0:	19400115 	stw	r5,4(r3)
 8040fe4:	30800315 	stw	r2,12(r6)
 8040fe8:	11800215 	stw	r6,8(r2)
 8040fec:	80436a40 	call	80436a4 <__malloc_unlock>
 8040ff0:	80800204 	addi	r2,r16,8
 8040ff4:	003f8b06 	br	8040e24 <_malloc_r+0xa4>
 8040ff8:	00800304 	movi	r2,12
 8040ffc:	90800015 	stw	r2,0(r18)
 8041000:	0005883a 	mov	r2,zero
 8041004:	003f8706 	br	8040e24 <_malloc_r+0xa4>
 8041008:	01008004 	movi	r4,512
 804100c:	01c01004 	movi	r7,64
 8041010:	02000fc4 	movi	r8,63
 8041014:	003f9e06 	br	8040e90 <_malloc_r+0x110>
 8041018:	9c000217 	ldw	r16,8(r19)
 804101c:	00bfff04 	movi	r2,-4
 8041020:	80c00117 	ldw	r3,4(r16)
 8041024:	18aa703a 	and	r21,r3,r2
 8041028:	ac400336 	bltu	r21,r17,8041038 <_malloc_r+0x2b8>
 804102c:	ac47c83a 	sub	r3,r21,r17
 8041030:	18800408 	cmpgei	r2,r3,16
 8041034:	10002c1e 	bne	r2,zero,80410e8 <_malloc_r+0x368>
 8041038:	00820134 	movhi	r2,2052
 804103c:	109c5217 	ldw	r2,29000(r2)
 8041040:	00c20174 	movhi	r3,2053
 8041044:	1d22fb17 	ldw	r20,-29716(r3)
 8041048:	10bfffd8 	cmpnei	r2,r2,-1
 804104c:	856f883a 	add	r23,r16,r21
 8041050:	8d29883a 	add	r20,r17,r20
 8041054:	1000e726 	beq	r2,zero,80413f4 <_malloc_r+0x674>
 8041058:	a50403c4 	addi	r20,r20,4111
 804105c:	00bc0004 	movi	r2,-4096
 8041060:	a0a8703a 	and	r20,r20,r2
 8041064:	a00b883a 	mov	r5,r20
 8041068:	9009883a 	mov	r4,r18
 804106c:	8041f8c0 	call	8041f8c <_sbrk_r>
 8041070:	102d883a 	mov	r22,r2
 8041074:	10bfffd8 	cmpnei	r2,r2,-1
 8041078:	10008426 	beq	r2,zero,804128c <_malloc_r+0x50c>
 804107c:	b5c08236 	bltu	r22,r23,8041288 <_malloc_r+0x508>
 8041080:	00820174 	movhi	r2,2053
 8041084:	11230517 	ldw	r4,-29676(r2)
 8041088:	a109883a 	add	r4,r20,r4
 804108c:	11230515 	stw	r4,-29676(r2)
 8041090:	2007883a 	mov	r3,r4
 8041094:	bd80a51e 	bne	r23,r22,804132c <_malloc_r+0x5ac>
 8041098:	b083ffcc 	andi	r2,r22,4095
 804109c:	1000a31e 	bne	r2,zero,804132c <_malloc_r+0x5ac>
 80410a0:	9d800217 	ldw	r22,8(r19)
 80410a4:	ad07883a 	add	r3,r21,r20
 80410a8:	18c00054 	ori	r3,r3,1
 80410ac:	b0c00115 	stw	r3,4(r22)
 80410b0:	00820174 	movhi	r2,2053
 80410b4:	10a2fa17 	ldw	r2,-29720(r2)
 80410b8:	1100022e 	bgeu	r2,r4,80410c4 <_malloc_r+0x344>
 80410bc:	00820174 	movhi	r2,2053
 80410c0:	1122fa15 	stw	r4,-29720(r2)
 80410c4:	00820174 	movhi	r2,2053
 80410c8:	10a2f917 	ldw	r2,-29724(r2)
 80410cc:	1100022e 	bgeu	r2,r4,80410d8 <_malloc_r+0x358>
 80410d0:	00820174 	movhi	r2,2053
 80410d4:	1122f915 	stw	r4,-29724(r2)
 80410d8:	b021883a 	mov	r16,r22
 80410dc:	00006d06 	br	8041294 <_malloc_r+0x514>
 80410e0:	99400117 	ldw	r5,4(r19)
 80410e4:	003f9a06 	br	8040f50 <_malloc_r+0x1d0>
 80410e8:	88800054 	ori	r2,r17,1
 80410ec:	80800115 	stw	r2,4(r16)
 80410f0:	8463883a 	add	r17,r16,r17
 80410f4:	9c400215 	stw	r17,8(r19)
 80410f8:	18c00054 	ori	r3,r3,1
 80410fc:	88c00115 	stw	r3,4(r17)
 8041100:	9009883a 	mov	r4,r18
 8041104:	80436a40 	call	80436a4 <__malloc_unlock>
 8041108:	80800204 	addi	r2,r16,8
 804110c:	003f4506 	br	8040e24 <_malloc_r+0xa4>
 8041110:	81000317 	ldw	r4,12(r16)
 8041114:	003f3906 	br	8040dfc <_malloc_r+0x7c>
 8041118:	14000317 	ldw	r16,12(r2)
 804111c:	143f331e 	bne	r2,r16,8040dec <_malloc_r+0x6c>
 8041120:	39c00084 	addi	r7,r7,2
 8041124:	003f6b06 	br	8040ed4 <_malloc_r+0x154>
 8041128:	1006d27a 	srli	r3,r2,9
 804112c:	19000168 	cmpgeui	r4,r3,5
 8041130:	20005026 	beq	r4,zero,8041274 <_malloc_r+0x4f4>
 8041134:	19000568 	cmpgeui	r4,r3,21
 8041138:	2000c01e 	bne	r4,zero,804143c <_malloc_r+0x6bc>
 804113c:	19801704 	addi	r6,r3,92
 8041140:	300c90fa 	slli	r6,r6,3
 8041144:	190016c4 	addi	r4,r3,91
 8041148:	998d883a 	add	r6,r19,r6
 804114c:	30c00017 	ldw	r3,0(r6)
 8041150:	31bffe04 	addi	r6,r6,-8
 8041154:	30c0a926 	beq	r6,r3,80413fc <_malloc_r+0x67c>
 8041158:	023fff04 	movi	r8,-4
 804115c:	00000206 	br	8041168 <_malloc_r+0x3e8>
 8041160:	18c00217 	ldw	r3,8(r3)
 8041164:	30c00326 	beq	r6,r3,8041174 <_malloc_r+0x3f4>
 8041168:	19000117 	ldw	r4,4(r3)
 804116c:	2208703a 	and	r4,r4,r8
 8041170:	113ffb36 	bltu	r2,r4,8041160 <_malloc_r+0x3e0>
 8041174:	19800317 	ldw	r6,12(r3)
 8041178:	81800315 	stw	r6,12(r16)
 804117c:	80c00215 	stw	r3,8(r16)
 8041180:	34000215 	stw	r16,8(r6)
 8041184:	1c000315 	stw	r16,12(r3)
 8041188:	003f7106 	br	8040f50 <_malloc_r+0x1d0>
 804118c:	10c00568 	cmpgeui	r3,r2,21
 8041190:	18004926 	beq	r3,zero,80412b8 <_malloc_r+0x538>
 8041194:	10c01568 	cmpgeui	r3,r2,85
 8041198:	1800af1e 	bne	r3,zero,8041458 <_malloc_r+0x6d8>
 804119c:	8804d33a 	srli	r2,r17,12
 80411a0:	11c01bc4 	addi	r7,r2,111
 80411a4:	380890fa 	slli	r4,r7,3
 80411a8:	12001b84 	addi	r8,r2,110
 80411ac:	003f3806 	br	8040e90 <_malloc_r+0x110>
 80411b0:	63000044 	addi	r12,r12,1
 80411b4:	608000cc 	andi	r2,r12,3
 80411b8:	42000204 	addi	r8,r8,8
 80411bc:	103f791e 	bne	r2,zero,8040fa4 <_malloc_r+0x224>
 80411c0:	00004406 	br	80412d4 <_malloc_r+0x554>
 80411c4:	81000217 	ldw	r4,8(r16)
 80411c8:	89800054 	ori	r6,r17,1
 80411cc:	81800115 	stw	r6,4(r16)
 80411d0:	20800315 	stw	r2,12(r4)
 80411d4:	11000215 	stw	r4,8(r2)
 80411d8:	8463883a 	add	r17,r16,r17
 80411dc:	9c400515 	stw	r17,20(r19)
 80411e0:	9c400415 	stw	r17,16(r19)
 80411e4:	28800054 	ori	r2,r5,1
 80411e8:	88800115 	stw	r2,4(r17)
 80411ec:	8a400315 	stw	r9,12(r17)
 80411f0:	8a400215 	stw	r9,8(r17)
 80411f4:	80c7883a 	add	r3,r16,r3
 80411f8:	19400015 	stw	r5,0(r3)
 80411fc:	9009883a 	mov	r4,r18
 8041200:	80436a40 	call	80436a4 <__malloc_unlock>
 8041204:	80800204 	addi	r2,r16,8
 8041208:	003f0606 	br	8040e24 <_malloc_r+0xa4>
 804120c:	8085883a 	add	r2,r16,r2
 8041210:	10c00117 	ldw	r3,4(r2)
 8041214:	9009883a 	mov	r4,r18
 8041218:	18c00054 	ori	r3,r3,1
 804121c:	10c00115 	stw	r3,4(r2)
 8041220:	80436a40 	call	80436a4 <__malloc_unlock>
 8041224:	80800204 	addi	r2,r16,8
 8041228:	003efe06 	br	8040e24 <_malloc_r+0xa4>
 804122c:	880ed0fa 	srli	r7,r17,3
 8041230:	88800204 	addi	r2,r17,8
 8041234:	003ee706 	br	8040dd4 <_malloc_r+0x54>
 8041238:	89000054 	ori	r4,r17,1
 804123c:	81000115 	stw	r4,4(r16)
 8041240:	8463883a 	add	r17,r16,r17
 8041244:	9c400515 	stw	r17,20(r19)
 8041248:	9c400415 	stw	r17,16(r19)
 804124c:	19000054 	ori	r4,r3,1
 8041250:	89000115 	stw	r4,4(r17)
 8041254:	8085883a 	add	r2,r16,r2
 8041258:	8a400315 	stw	r9,12(r17)
 804125c:	8a400215 	stw	r9,8(r17)
 8041260:	10c00015 	stw	r3,0(r2)
 8041264:	9009883a 	mov	r4,r18
 8041268:	80436a40 	call	80436a4 <__malloc_unlock>
 804126c:	80800204 	addi	r2,r16,8
 8041270:	003eec06 	br	8040e24 <_malloc_r+0xa4>
 8041274:	1006d1ba 	srli	r3,r2,6
 8041278:	19800e44 	addi	r6,r3,57
 804127c:	300c90fa 	slli	r6,r6,3
 8041280:	19000e04 	addi	r4,r3,56
 8041284:	003fb006 	br	8041148 <_malloc_r+0x3c8>
 8041288:	84c02426 	beq	r16,r19,804131c <_malloc_r+0x59c>
 804128c:	9c000217 	ldw	r16,8(r19)
 8041290:	80c00117 	ldw	r3,4(r16)
 8041294:	00bfff04 	movi	r2,-4
 8041298:	1884703a 	and	r2,r3,r2
 804129c:	1447c83a 	sub	r3,r2,r17
 80412a0:	14400236 	bltu	r2,r17,80412ac <_malloc_r+0x52c>
 80412a4:	18800408 	cmpgei	r2,r3,16
 80412a8:	103f8f1e 	bne	r2,zero,80410e8 <_malloc_r+0x368>
 80412ac:	9009883a 	mov	r4,r18
 80412b0:	80436a40 	call	80436a4 <__malloc_unlock>
 80412b4:	003f5206 	br	8041000 <_malloc_r+0x280>
 80412b8:	11c01704 	addi	r7,r2,92
 80412bc:	380890fa 	slli	r4,r7,3
 80412c0:	120016c4 	addi	r8,r2,91
 80412c4:	003ef206 	br	8040e90 <_malloc_r+0x110>
 80412c8:	58800217 	ldw	r2,8(r11)
 80412cc:	39ffffc4 	addi	r7,r7,-1
 80412d0:	12c0961e 	bne	r2,r11,804152c <_malloc_r+0x7ac>
 80412d4:	388000cc 	andi	r2,r7,3
 80412d8:	5afffe04 	addi	r11,r11,-8
 80412dc:	103ffa1e 	bne	r2,zero,80412c8 <_malloc_r+0x548>
 80412e0:	98c00117 	ldw	r3,4(r19)
 80412e4:	0104303a 	nor	r2,zero,r4
 80412e8:	10c4703a 	and	r2,r2,r3
 80412ec:	98800115 	stw	r2,4(r19)
 80412f0:	2109883a 	add	r4,r4,r4
 80412f4:	113f4836 	bltu	r2,r4,8041018 <_malloc_r+0x298>
 80412f8:	203f4726 	beq	r4,zero,8041018 <_malloc_r+0x298>
 80412fc:	2086703a 	and	r3,r4,r2
 8041300:	1800041e 	bne	r3,zero,8041314 <_malloc_r+0x594>
 8041304:	2109883a 	add	r4,r4,r4
 8041308:	2086703a 	and	r3,r4,r2
 804130c:	63000104 	addi	r12,r12,4
 8041310:	183ffc26 	beq	r3,zero,8041304 <_malloc_r+0x584>
 8041314:	600f883a 	mov	r7,r12
 8041318:	003f1e06 	br	8040f94 <_malloc_r+0x214>
 804131c:	00820174 	movhi	r2,2053
 8041320:	10e30517 	ldw	r3,-29676(r2)
 8041324:	a0c7883a 	add	r3,r20,r3
 8041328:	10e30515 	stw	r3,-29676(r2)
 804132c:	00820134 	movhi	r2,2052
 8041330:	109c5217 	ldw	r2,29000(r2)
 8041334:	10bfffd8 	cmpnei	r2,r2,-1
 8041338:	10004e26 	beq	r2,zero,8041474 <_malloc_r+0x6f4>
 804133c:	b5c5c83a 	sub	r2,r22,r23
 8041340:	10c5883a 	add	r2,r2,r3
 8041344:	00c20174 	movhi	r3,2053
 8041348:	18a30515 	stw	r2,-29676(r3)
 804134c:	b70001cc 	andi	fp,r22,7
 8041350:	e0003026 	beq	fp,zero,8041414 <_malloc_r+0x694>
 8041354:	b72dc83a 	sub	r22,r22,fp
 8041358:	b5800204 	addi	r22,r22,8
 804135c:	01040204 	movi	r4,4104
 8041360:	2709c83a 	sub	r4,r4,fp
 8041364:	b529883a 	add	r20,r22,r20
 8041368:	2509c83a 	sub	r4,r4,r20
 804136c:	25c3ffcc 	andi	r23,r4,4095
 8041370:	b80b883a 	mov	r5,r23
 8041374:	9009883a 	mov	r4,r18
 8041378:	8041f8c0 	call	8041f8c <_sbrk_r>
 804137c:	10ffffe0 	cmpeqi	r3,r2,-1
 8041380:	1800501e 	bne	r3,zero,80414c4 <_malloc_r+0x744>
 8041384:	1585c83a 	sub	r2,r2,r22
 8041388:	15e9883a 	add	r20,r2,r23
 804138c:	00820174 	movhi	r2,2053
 8041390:	10a30517 	ldw	r2,-29676(r2)
 8041394:	9d800215 	stw	r22,8(r19)
 8041398:	a0c00054 	ori	r3,r20,1
 804139c:	b889883a 	add	r4,r23,r2
 80413a0:	00820174 	movhi	r2,2053
 80413a4:	11230515 	stw	r4,-29676(r2)
 80413a8:	b0c00115 	stw	r3,4(r22)
 80413ac:	84ff4026 	beq	r16,r19,80410b0 <_malloc_r+0x330>
 80413b0:	a8800428 	cmpgeui	r2,r21,16
 80413b4:	10003226 	beq	r2,zero,8041480 <_malloc_r+0x700>
 80413b8:	80800117 	ldw	r2,4(r16)
 80413bc:	017ffe04 	movi	r5,-8
 80413c0:	a8fffd04 	addi	r3,r21,-12
 80413c4:	1946703a 	and	r3,r3,r5
 80413c8:	1080004c 	andi	r2,r2,1
 80413cc:	10c4b03a 	or	r2,r2,r3
 80413d0:	80800115 	stw	r2,4(r16)
 80413d4:	01400144 	movi	r5,5
 80413d8:	80c5883a 	add	r2,r16,r3
 80413dc:	11400115 	stw	r5,4(r2)
 80413e0:	11400215 	stw	r5,8(r2)
 80413e4:	18c00428 	cmpgeui	r3,r3,16
 80413e8:	18003b1e 	bne	r3,zero,80414d8 <_malloc_r+0x758>
 80413ec:	b0c00117 	ldw	r3,4(r22)
 80413f0:	003f2f06 	br	80410b0 <_malloc_r+0x330>
 80413f4:	a5000404 	addi	r20,r20,16
 80413f8:	003f1a06 	br	8041064 <_malloc_r+0x2e4>
 80413fc:	2009d0ba 	srai	r4,r4,2
 8041400:	00800044 	movi	r2,1
 8041404:	1104983a 	sll	r2,r2,r4
 8041408:	288ab03a 	or	r5,r5,r2
 804140c:	99400115 	stw	r5,4(r19)
 8041410:	003f5906 	br	8041178 <_malloc_r+0x3f8>
 8041414:	b509883a 	add	r4,r22,r20
 8041418:	0109c83a 	sub	r4,zero,r4
 804141c:	25c3ffcc 	andi	r23,r4,4095
 8041420:	b80b883a 	mov	r5,r23
 8041424:	9009883a 	mov	r4,r18
 8041428:	8041f8c0 	call	8041f8c <_sbrk_r>
 804142c:	10ffffe0 	cmpeqi	r3,r2,-1
 8041430:	183fd426 	beq	r3,zero,8041384 <_malloc_r+0x604>
 8041434:	002f883a 	mov	r23,zero
 8041438:	003fd406 	br	804138c <_malloc_r+0x60c>
 804143c:	19001568 	cmpgeui	r4,r3,85
 8041440:	2000121e 	bne	r4,zero,804148c <_malloc_r+0x70c>
 8041444:	1006d33a 	srli	r3,r2,12
 8041448:	19801bc4 	addi	r6,r3,111
 804144c:	300c90fa 	slli	r6,r6,3
 8041450:	19001b84 	addi	r4,r3,110
 8041454:	003f3c06 	br	8041148 <_malloc_r+0x3c8>
 8041458:	10c05568 	cmpgeui	r3,r2,341
 804145c:	1800121e 	bne	r3,zero,80414a8 <_malloc_r+0x728>
 8041460:	8804d3fa 	srli	r2,r17,15
 8041464:	11c01e04 	addi	r7,r2,120
 8041468:	380890fa 	slli	r4,r7,3
 804146c:	12001dc4 	addi	r8,r2,119
 8041470:	003e8706 	br	8040e90 <_malloc_r+0x110>
 8041474:	00820134 	movhi	r2,2052
 8041478:	159c5215 	stw	r22,29000(r2)
 804147c:	003fb306 	br	804134c <_malloc_r+0x5cc>
 8041480:	00800044 	movi	r2,1
 8041484:	b0800115 	stw	r2,4(r22)
 8041488:	003f8806 	br	80412ac <_malloc_r+0x52c>
 804148c:	19005568 	cmpgeui	r4,r3,341
 8041490:	2000181e 	bne	r4,zero,80414f4 <_malloc_r+0x774>
 8041494:	1006d3fa 	srli	r3,r2,15
 8041498:	19801e04 	addi	r6,r3,120
 804149c:	300c90fa 	slli	r6,r6,3
 80414a0:	19001dc4 	addi	r4,r3,119
 80414a4:	003f2806 	br	8041148 <_malloc_r+0x3c8>
 80414a8:	10815568 	cmpgeui	r2,r2,1365
 80414ac:	1000181e 	bne	r2,zero,8041510 <_malloc_r+0x790>
 80414b0:	8804d4ba 	srli	r2,r17,18
 80414b4:	11c01f44 	addi	r7,r2,125
 80414b8:	380890fa 	slli	r4,r7,3
 80414bc:	12001f04 	addi	r8,r2,124
 80414c0:	003e7306 	br	8040e90 <_malloc_r+0x110>
 80414c4:	e73ffe04 	addi	fp,fp,-8
 80414c8:	a729883a 	add	r20,r20,fp
 80414cc:	a5a9c83a 	sub	r20,r20,r22
 80414d0:	002f883a 	mov	r23,zero
 80414d4:	003fad06 	br	804138c <_malloc_r+0x60c>
 80414d8:	9009883a 	mov	r4,r18
 80414dc:	81400204 	addi	r5,r16,8
 80414e0:	80428440 	call	8042844 <_free_r>
 80414e4:	00820174 	movhi	r2,2053
 80414e8:	9d800217 	ldw	r22,8(r19)
 80414ec:	11230517 	ldw	r4,-29676(r2)
 80414f0:	003fbe06 	br	80413ec <_malloc_r+0x66c>
 80414f4:	18c15568 	cmpgeui	r3,r3,1365
 80414f8:	1800091e 	bne	r3,zero,8041520 <_malloc_r+0x7a0>
 80414fc:	1006d4ba 	srli	r3,r2,18
 8041500:	19801f44 	addi	r6,r3,125
 8041504:	300c90fa 	slli	r6,r6,3
 8041508:	19001f04 	addi	r4,r3,124
 804150c:	003f0e06 	br	8041148 <_malloc_r+0x3c8>
 8041510:	0100fe04 	movi	r4,1016
 8041514:	01c01fc4 	movi	r7,127
 8041518:	02001f84 	movi	r8,126
 804151c:	003e5c06 	br	8040e90 <_malloc_r+0x110>
 8041520:	0180fe04 	movi	r6,1016
 8041524:	01001f84 	movi	r4,126
 8041528:	003f0706 	br	8041148 <_malloc_r+0x3c8>
 804152c:	98800117 	ldw	r2,4(r19)
 8041530:	003f6f06 	br	80412f0 <_malloc_r+0x570>

08041534 <memchr>:
 8041534:	defffc04 	addi	sp,sp,-16
 8041538:	dc000015 	stw	r16,0(sp)
 804153c:	2021883a 	mov	r16,r4
 8041540:	dc800215 	stw	r18,8(sp)
 8041544:	dfc00315 	stw	ra,12(sp)
 8041548:	dc400115 	stw	r17,4(sp)
 804154c:	808000cc 	andi	r2,r16,3
 8041550:	2809883a 	mov	r4,r5
 8041554:	2825883a 	mov	r18,r5
 8041558:	10000e26 	beq	r2,zero,8041594 <memchr+0x60>
 804155c:	347fffc4 	addi	r17,r6,-1
 8041560:	30001726 	beq	r6,zero,80415c0 <memchr+0x8c>
 8041564:	28c03fcc 	andi	r3,r5,255
 8041568:	00000606 	br	8041584 <memchr+0x50>
 804156c:	84000044 	addi	r16,r16,1
 8041570:	808000cc 	andi	r2,r16,3
 8041574:	10000826 	beq	r2,zero,8041598 <memchr+0x64>
 8041578:	8c7fffc4 	addi	r17,r17,-1
 804157c:	88bfffe0 	cmpeqi	r2,r17,-1
 8041580:	10000f1e 	bne	r2,zero,80415c0 <memchr+0x8c>
 8041584:	80800003 	ldbu	r2,0(r16)
 8041588:	10fff81e 	bne	r2,r3,804156c <memchr+0x38>
 804158c:	8005883a 	mov	r2,r16
 8041590:	00000c06 	br	80415c4 <memchr+0x90>
 8041594:	3023883a 	mov	r17,r6
 8041598:	88800130 	cmpltui	r2,r17,4
 804159c:	10000f26 	beq	r2,zero,80415dc <memchr+0xa8>
 80415a0:	88000726 	beq	r17,zero,80415c0 <memchr+0x8c>
 80415a4:	8463883a 	add	r17,r16,r17
 80415a8:	8005883a 	mov	r2,r16
 80415ac:	90c03fcc 	andi	r3,r18,255
 80415b0:	11000003 	ldbu	r4,0(r2)
 80415b4:	20c00326 	beq	r4,r3,80415c4 <memchr+0x90>
 80415b8:	10800044 	addi	r2,r2,1
 80415bc:	88bffc1e 	bne	r17,r2,80415b0 <memchr+0x7c>
 80415c0:	0005883a 	mov	r2,zero
 80415c4:	dfc00317 	ldw	ra,12(sp)
 80415c8:	dc800217 	ldw	r18,8(sp)
 80415cc:	dc400117 	ldw	r17,4(sp)
 80415d0:	dc000017 	ldw	r16,0(sp)
 80415d4:	dec00404 	addi	sp,sp,16
 80415d8:	f800283a 	ret
 80415dc:	01404074 	movhi	r5,257
 80415e0:	29404044 	addi	r5,r5,257
 80415e4:	21003fcc 	andi	r4,r4,255
 80415e8:	80430ac0 	call	80430ac <__mulsi3>
 80415ec:	01bfbff4 	movhi	r6,65279
 80415f0:	01602074 	movhi	r5,32897
 80415f4:	31bfbfc4 	addi	r6,r6,-257
 80415f8:	29602004 	addi	r5,r5,-32640
 80415fc:	00000406 	br	8041610 <memchr+0xdc>
 8041600:	8c7fff04 	addi	r17,r17,-4
 8041604:	88c00128 	cmpgeui	r3,r17,4
 8041608:	84000104 	addi	r16,r16,4
 804160c:	183fe426 	beq	r3,zero,80415a0 <memchr+0x6c>
 8041610:	80c00017 	ldw	r3,0(r16)
 8041614:	10c6f03a 	xor	r3,r2,r3
 8041618:	1989883a 	add	r4,r3,r6
 804161c:	00c6303a 	nor	r3,zero,r3
 8041620:	20c6703a 	and	r3,r4,r3
 8041624:	1946703a 	and	r3,r3,r5
 8041628:	183ff526 	beq	r3,zero,8041600 <memchr+0xcc>
 804162c:	003fdc06 	br	80415a0 <memchr+0x6c>

08041630 <memcpy>:
 8041630:	30c00428 	cmpgeui	r3,r6,16
 8041634:	2005883a 	mov	r2,r4
 8041638:	18000b1e 	bne	r3,zero,8041668 <memcpy+0x38>
 804163c:	2007883a 	mov	r3,r4
 8041640:	31ffffc4 	addi	r7,r6,-1
 8041644:	30003426 	beq	r6,zero,8041718 <memcpy+0xe8>
 8041648:	39c00044 	addi	r7,r7,1
 804164c:	19cf883a 	add	r7,r3,r7
 8041650:	29800003 	ldbu	r6,0(r5)
 8041654:	18c00044 	addi	r3,r3,1
 8041658:	29400044 	addi	r5,r5,1
 804165c:	19bfffc5 	stb	r6,-1(r3)
 8041660:	19fffb1e 	bne	r3,r7,8041650 <memcpy+0x20>
 8041664:	f800283a 	ret
 8041668:	2146b03a 	or	r3,r4,r5
 804166c:	18c000cc 	andi	r3,r3,3
 8041670:	18002a1e 	bne	r3,zero,804171c <memcpy+0xec>
 8041674:	333ffc04 	addi	r12,r6,-16
 8041678:	6018d13a 	srli	r12,r12,4
 804167c:	2811883a 	mov	r8,r5
 8041680:	200f883a 	mov	r7,r4
 8041684:	63000044 	addi	r12,r12,1
 8041688:	6018913a 	slli	r12,r12,4
 804168c:	2307883a 	add	r3,r4,r12
 8041690:	42c00017 	ldw	r11,0(r8)
 8041694:	42800117 	ldw	r10,4(r8)
 8041698:	42400217 	ldw	r9,8(r8)
 804169c:	41000317 	ldw	r4,12(r8)
 80416a0:	39c00404 	addi	r7,r7,16
 80416a4:	3afffc15 	stw	r11,-16(r7)
 80416a8:	3abffd15 	stw	r10,-12(r7)
 80416ac:	3a7ffe15 	stw	r9,-8(r7)
 80416b0:	393fff15 	stw	r4,-4(r7)
 80416b4:	42000404 	addi	r8,r8,16
 80416b8:	38fff51e 	bne	r7,r3,8041690 <memcpy+0x60>
 80416bc:	3100030c 	andi	r4,r6,12
 80416c0:	2b0b883a 	add	r5,r5,r12
 80416c4:	324003cc 	andi	r9,r6,15
 80416c8:	20001726 	beq	r4,zero,8041728 <memcpy+0xf8>
 80416cc:	2811883a 	mov	r8,r5
 80416d0:	1809883a 	mov	r4,r3
 80416d4:	1a57883a 	add	r11,r3,r9
 80416d8:	42800017 	ldw	r10,0(r8)
 80416dc:	21000104 	addi	r4,r4,4
 80416e0:	590fc83a 	sub	r7,r11,r4
 80416e4:	39c00128 	cmpgeui	r7,r7,4
 80416e8:	22bfff15 	stw	r10,-4(r4)
 80416ec:	42000104 	addi	r8,r8,4
 80416f0:	383ff91e 	bne	r7,zero,80416d8 <memcpy+0xa8>
 80416f4:	493fff04 	addi	r4,r9,-4
 80416f8:	2008d0ba 	srli	r4,r4,2
 80416fc:	318000cc 	andi	r6,r6,3
 8041700:	31ffffc4 	addi	r7,r6,-1
 8041704:	21000044 	addi	r4,r4,1
 8041708:	200890ba 	slli	r4,r4,2
 804170c:	1907883a 	add	r3,r3,r4
 8041710:	290b883a 	add	r5,r5,r4
 8041714:	303fcc1e 	bne	r6,zero,8041648 <memcpy+0x18>
 8041718:	f800283a 	ret
 804171c:	31ffffc4 	addi	r7,r6,-1
 8041720:	2007883a 	mov	r3,r4
 8041724:	003fc806 	br	8041648 <memcpy+0x18>
 8041728:	480d883a 	mov	r6,r9
 804172c:	003fc406 	br	8041640 <memcpy+0x10>

08041730 <memmove>:
 8041730:	2005883a 	mov	r2,r4
 8041734:	29000a2e 	bgeu	r5,r4,8041760 <memmove+0x30>
 8041738:	298f883a 	add	r7,r5,r6
 804173c:	21c0082e 	bgeu	r4,r7,8041760 <memmove+0x30>
 8041740:	2187883a 	add	r3,r4,r6
 8041744:	30001226 	beq	r6,zero,8041790 <memmove+0x60>
 8041748:	397fffc3 	ldbu	r5,-1(r7)
 804174c:	18ffffc4 	addi	r3,r3,-1
 8041750:	39ffffc4 	addi	r7,r7,-1
 8041754:	19400005 	stb	r5,0(r3)
 8041758:	10fffb1e 	bne	r2,r3,8041748 <memmove+0x18>
 804175c:	f800283a 	ret
 8041760:	30c00428 	cmpgeui	r3,r6,16
 8041764:	18000b1e 	bne	r3,zero,8041794 <memmove+0x64>
 8041768:	1007883a 	mov	r3,r2
 804176c:	31ffffc4 	addi	r7,r6,-1
 8041770:	30003626 	beq	r6,zero,804184c <memmove+0x11c>
 8041774:	39c00044 	addi	r7,r7,1
 8041778:	19cf883a 	add	r7,r3,r7
 804177c:	29800003 	ldbu	r6,0(r5)
 8041780:	18c00044 	addi	r3,r3,1
 8041784:	29400044 	addi	r5,r5,1
 8041788:	19bfffc5 	stb	r6,-1(r3)
 804178c:	19fffb1e 	bne	r3,r7,804177c <memmove+0x4c>
 8041790:	f800283a 	ret
 8041794:	1146b03a 	or	r3,r2,r5
 8041798:	18c000cc 	andi	r3,r3,3
 804179c:	1800281e 	bne	r3,zero,8041840 <memmove+0x110>
 80417a0:	313ffc04 	addi	r4,r6,-16
 80417a4:	2008d13a 	srli	r4,r4,4
 80417a8:	2811883a 	mov	r8,r5
 80417ac:	100f883a 	mov	r7,r2
 80417b0:	21000044 	addi	r4,r4,1
 80417b4:	2008913a 	slli	r4,r4,4
 80417b8:	1107883a 	add	r3,r2,r4
 80417bc:	42400017 	ldw	r9,0(r8)
 80417c0:	42000404 	addi	r8,r8,16
 80417c4:	39c00404 	addi	r7,r7,16
 80417c8:	3a7ffc15 	stw	r9,-16(r7)
 80417cc:	427ffd17 	ldw	r9,-12(r8)
 80417d0:	3a7ffd15 	stw	r9,-12(r7)
 80417d4:	427ffe17 	ldw	r9,-8(r8)
 80417d8:	3a7ffe15 	stw	r9,-8(r7)
 80417dc:	427fff17 	ldw	r9,-4(r8)
 80417e0:	3a7fff15 	stw	r9,-4(r7)
 80417e4:	38fff51e 	bne	r7,r3,80417bc <memmove+0x8c>
 80417e8:	31c0030c 	andi	r7,r6,12
 80417ec:	290b883a 	add	r5,r5,r4
 80417f0:	324003cc 	andi	r9,r6,15
 80417f4:	38001626 	beq	r7,zero,8041850 <memmove+0x120>
 80417f8:	2809883a 	mov	r4,r5
 80417fc:	180f883a 	mov	r7,r3
 8041800:	1a57883a 	add	r11,r3,r9
 8041804:	22800017 	ldw	r10,0(r4)
 8041808:	39c00104 	addi	r7,r7,4
 804180c:	59d1c83a 	sub	r8,r11,r7
 8041810:	42000128 	cmpgeui	r8,r8,4
 8041814:	3abfff15 	stw	r10,-4(r7)
 8041818:	21000104 	addi	r4,r4,4
 804181c:	403ff91e 	bne	r8,zero,8041804 <memmove+0xd4>
 8041820:	493fff04 	addi	r4,r9,-4
 8041824:	2008d0ba 	srli	r4,r4,2
 8041828:	318000cc 	andi	r6,r6,3
 804182c:	21000044 	addi	r4,r4,1
 8041830:	200890ba 	slli	r4,r4,2
 8041834:	1907883a 	add	r3,r3,r4
 8041838:	290b883a 	add	r5,r5,r4
 804183c:	003fcb06 	br	804176c <memmove+0x3c>
 8041840:	31ffffc4 	addi	r7,r6,-1
 8041844:	1007883a 	mov	r3,r2
 8041848:	003fca06 	br	8041774 <memmove+0x44>
 804184c:	f800283a 	ret
 8041850:	480d883a 	mov	r6,r9
 8041854:	003fc506 	br	804176c <memmove+0x3c>

08041858 <memset>:
 8041858:	defffb04 	addi	sp,sp,-20
 804185c:	dc800215 	stw	r18,8(sp)
 8041860:	dc400115 	stw	r17,4(sp)
 8041864:	dfc00415 	stw	ra,16(sp)
 8041868:	dcc00315 	stw	r19,12(sp)
 804186c:	dc000015 	stw	r16,0(sp)
 8041870:	208000cc 	andi	r2,r4,3
 8041874:	2023883a 	mov	r17,r4
 8041878:	2825883a 	mov	r18,r5
 804187c:	10004026 	beq	r2,zero,8041980 <memset+0x128>
 8041880:	34ffffc4 	addi	r19,r6,-1
 8041884:	30003326 	beq	r6,zero,8041954 <memset+0xfc>
 8041888:	280f883a 	mov	r7,r5
 804188c:	2021883a 	mov	r16,r4
 8041890:	00000306 	br	80418a0 <memset+0x48>
 8041894:	9cffffc4 	addi	r19,r19,-1
 8041898:	99bfffe0 	cmpeqi	r6,r19,-1
 804189c:	30002d1e 	bne	r6,zero,8041954 <memset+0xfc>
 80418a0:	84000044 	addi	r16,r16,1
 80418a4:	818000cc 	andi	r6,r16,3
 80418a8:	81ffffc5 	stb	r7,-1(r16)
 80418ac:	303ff91e 	bne	r6,zero,8041894 <memset+0x3c>
 80418b0:	98800128 	cmpgeui	r2,r19,4
 80418b4:	10002126 	beq	r2,zero,804193c <memset+0xe4>
 80418b8:	01404074 	movhi	r5,257
 80418bc:	29404044 	addi	r5,r5,257
 80418c0:	91003fcc 	andi	r4,r18,255
 80418c4:	80430ac0 	call	80430ac <__mulsi3>
 80418c8:	98c00430 	cmpltui	r3,r19,16
 80418cc:	18002f1e 	bne	r3,zero,804198c <memset+0x134>
 80418d0:	99bffc04 	addi	r6,r19,-16
 80418d4:	300cd13a 	srli	r6,r6,4
 80418d8:	31800044 	addi	r6,r6,1
 80418dc:	300c913a 	slli	r6,r6,4
 80418e0:	818d883a 	add	r6,r16,r6
 80418e4:	80800015 	stw	r2,0(r16)
 80418e8:	80800115 	stw	r2,4(r16)
 80418ec:	80800215 	stw	r2,8(r16)
 80418f0:	80800315 	stw	r2,12(r16)
 80418f4:	84000404 	addi	r16,r16,16
 80418f8:	81bffa1e 	bne	r16,r6,80418e4 <memset+0x8c>
 80418fc:	9900030c 	andi	r4,r19,12
 8041900:	98c003cc 	andi	r3,r19,15
 8041904:	20001b26 	beq	r4,zero,8041974 <memset+0x11c>
 8041908:	3009883a 	mov	r4,r6
 804190c:	30cb883a 	add	r5,r6,r3
 8041910:	21000104 	addi	r4,r4,4
 8041914:	290fc83a 	sub	r7,r5,r4
 8041918:	39c00128 	cmpgeui	r7,r7,4
 804191c:	20bfff15 	stw	r2,-4(r4)
 8041920:	383ffb1e 	bne	r7,zero,8041910 <memset+0xb8>
 8041924:	1c3fff04 	addi	r16,r3,-4
 8041928:	8020d0ba 	srli	r16,r16,2
 804192c:	1cc000cc 	andi	r19,r3,3
 8041930:	84000044 	addi	r16,r16,1
 8041934:	802090ba 	slli	r16,r16,2
 8041938:	3421883a 	add	r16,r6,r16
 804193c:	98000526 	beq	r19,zero,8041954 <memset+0xfc>
 8041940:	900b883a 	mov	r5,r18
 8041944:	84c7883a 	add	r3,r16,r19
 8041948:	84000044 	addi	r16,r16,1
 804194c:	817fffc5 	stb	r5,-1(r16)
 8041950:	1c3ffd1e 	bne	r3,r16,8041948 <memset+0xf0>
 8041954:	8805883a 	mov	r2,r17
 8041958:	dfc00417 	ldw	ra,16(sp)
 804195c:	dcc00317 	ldw	r19,12(sp)
 8041960:	dc800217 	ldw	r18,8(sp)
 8041964:	dc400117 	ldw	r17,4(sp)
 8041968:	dc000017 	ldw	r16,0(sp)
 804196c:	dec00504 	addi	sp,sp,20
 8041970:	f800283a 	ret
 8041974:	1827883a 	mov	r19,r3
 8041978:	983ff11e 	bne	r19,zero,8041940 <memset+0xe8>
 804197c:	003ff506 	br	8041954 <memset+0xfc>
 8041980:	2021883a 	mov	r16,r4
 8041984:	3027883a 	mov	r19,r6
 8041988:	003fc906 	br	80418b0 <memset+0x58>
 804198c:	800d883a 	mov	r6,r16
 8041990:	9807883a 	mov	r3,r19
 8041994:	003fdc06 	br	8041908 <memset+0xb0>

08041998 <_realloc_r>:
 8041998:	defff504 	addi	sp,sp,-44
 804199c:	dd000515 	stw	r20,20(sp)
 80419a0:	dfc00a15 	stw	ra,40(sp)
 80419a4:	df000915 	stw	fp,36(sp)
 80419a8:	ddc00815 	stw	r23,32(sp)
 80419ac:	dd800715 	stw	r22,28(sp)
 80419b0:	dd400615 	stw	r21,24(sp)
 80419b4:	dcc00415 	stw	r19,16(sp)
 80419b8:	dc800315 	stw	r18,12(sp)
 80419bc:	dc400215 	stw	r17,8(sp)
 80419c0:	dc000115 	stw	r16,4(sp)
 80419c4:	3029883a 	mov	r20,r6
 80419c8:	28008a26 	beq	r5,zero,8041bf4 <_realloc_r+0x25c>
 80419cc:	2821883a 	mov	r16,r5
 80419d0:	202b883a 	mov	r21,r4
 80419d4:	80436800 	call	8043680 <__malloc_lock>
 80419d8:	84ffff17 	ldw	r19,-4(r16)
 80419dc:	a44002c4 	addi	r17,r20,11
 80419e0:	04bfff04 	movi	r18,-4
 80419e4:	888005f0 	cmpltui	r2,r17,23
 80419e8:	85bffe04 	addi	r22,r16,-8
 80419ec:	9ca4703a 	and	r18,r19,r18
 80419f0:	10005a1e 	bne	r2,zero,8041b5c <_realloc_r+0x1c4>
 80419f4:	00bffe04 	movi	r2,-8
 80419f8:	88a2703a 	and	r17,r17,r2
 80419fc:	88005916 	blt	r17,zero,8041b64 <_realloc_r+0x1cc>
 8041a00:	8d005836 	bltu	r17,r20,8041b64 <_realloc_r+0x1cc>
 8041a04:	94403b0e 	bge	r18,r17,8041af4 <_realloc_r+0x15c>
 8041a08:	05c20134 	movhi	r23,2052
 8041a0c:	bdd6cc04 	addi	r23,r23,23344
 8041a10:	b9400217 	ldw	r5,8(r23)
 8041a14:	b489883a 	add	r4,r22,r18
 8041a18:	20800117 	ldw	r2,4(r4)
 8041a1c:	29008e26 	beq	r5,r4,8041c58 <_realloc_r+0x2c0>
 8041a20:	00ffff84 	movi	r3,-2
 8041a24:	10c6703a 	and	r3,r2,r3
 8041a28:	20c7883a 	add	r3,r4,r3
 8041a2c:	18c00117 	ldw	r3,4(r3)
 8041a30:	18c0004c 	andi	r3,r3,1
 8041a34:	18004f1e 	bne	r3,zero,8041b74 <_realloc_r+0x1dc>
 8041a38:	00ffff04 	movi	r3,-4
 8041a3c:	10c4703a 	and	r2,r2,r3
 8041a40:	9087883a 	add	r3,r18,r2
 8041a44:	1c40c30e 	bge	r3,r17,8041d54 <_realloc_r+0x3bc>
 8041a48:	9cc0004c 	andi	r19,r19,1
 8041a4c:	98004b1e 	bne	r19,zero,8041b7c <_realloc_r+0x1e4>
 8041a50:	873ffe17 	ldw	fp,-8(r16)
 8041a54:	00ffff04 	movi	r3,-4
 8041a58:	b739c83a 	sub	fp,r22,fp
 8041a5c:	e4c00117 	ldw	r19,4(fp)
 8041a60:	98c6703a 	and	r3,r19,r3
 8041a64:	20000426 	beq	r4,zero,8041a78 <_realloc_r+0xe0>
 8041a68:	90cf883a 	add	r7,r18,r3
 8041a6c:	388f883a 	add	r7,r7,r2
 8041a70:	2900c226 	beq	r5,r4,8041d7c <_realloc_r+0x3e4>
 8041a74:	3c409e0e 	bge	r7,r17,8041cf0 <_realloc_r+0x358>
 8041a78:	e0004026 	beq	fp,zero,8041b7c <_realloc_r+0x1e4>
 8041a7c:	90ef883a 	add	r23,r18,r3
 8041a80:	bc403e16 	blt	r23,r17,8041b7c <_realloc_r+0x1e4>
 8041a84:	e0800317 	ldw	r2,12(fp)
 8041a88:	e0c00217 	ldw	r3,8(fp)
 8041a8c:	91bfff04 	addi	r6,r18,-4
 8041a90:	31400968 	cmpgeui	r5,r6,37
 8041a94:	18800315 	stw	r2,12(r3)
 8041a98:	10c00215 	stw	r3,8(r2)
 8041a9c:	e1000204 	addi	r4,fp,8
 8041aa0:	2800e71e 	bne	r5,zero,8041e40 <_realloc_r+0x4a8>
 8041aa4:	30800530 	cmpltui	r2,r6,20
 8041aa8:	1000e31e 	bne	r2,zero,8041e38 <_realloc_r+0x4a0>
 8041aac:	80c00017 	ldw	r3,0(r16)
 8041ab0:	30800728 	cmpgeui	r2,r6,28
 8041ab4:	e0c00215 	stw	r3,8(fp)
 8041ab8:	80c00117 	ldw	r3,4(r16)
 8041abc:	e0c00315 	stw	r3,12(fp)
 8041ac0:	1000fa1e 	bne	r2,zero,8041eac <_realloc_r+0x514>
 8041ac4:	84000204 	addi	r16,r16,8
 8041ac8:	e0800404 	addi	r2,fp,16
 8041acc:	80c00017 	ldw	r3,0(r16)
 8041ad0:	b825883a 	mov	r18,r23
 8041ad4:	10c00015 	stw	r3,0(r2)
 8041ad8:	80c00117 	ldw	r3,4(r16)
 8041adc:	e02d883a 	mov	r22,fp
 8041ae0:	10c00115 	stw	r3,4(r2)
 8041ae4:	80c00217 	ldw	r3,8(r16)
 8041ae8:	2021883a 	mov	r16,r4
 8041aec:	10c00215 	stw	r3,8(r2)
 8041af0:	e4c00117 	ldw	r19,4(fp)
 8041af4:	9447c83a 	sub	r3,r18,r17
 8041af8:	19000430 	cmpltui	r4,r3,16
 8041afc:	9cc0004c 	andi	r19,r19,1
 8041b00:	b485883a 	add	r2,r22,r18
 8041b04:	20004826 	beq	r4,zero,8041c28 <_realloc_r+0x290>
 8041b08:	94e6b03a 	or	r19,r18,r19
 8041b0c:	b4c00115 	stw	r19,4(r22)
 8041b10:	10c00117 	ldw	r3,4(r2)
 8041b14:	18c00054 	ori	r3,r3,1
 8041b18:	10c00115 	stw	r3,4(r2)
 8041b1c:	a809883a 	mov	r4,r21
 8041b20:	80436a40 	call	80436a4 <__malloc_unlock>
 8041b24:	8029883a 	mov	r20,r16
 8041b28:	a005883a 	mov	r2,r20
 8041b2c:	dfc00a17 	ldw	ra,40(sp)
 8041b30:	df000917 	ldw	fp,36(sp)
 8041b34:	ddc00817 	ldw	r23,32(sp)
 8041b38:	dd800717 	ldw	r22,28(sp)
 8041b3c:	dd400617 	ldw	r21,24(sp)
 8041b40:	dd000517 	ldw	r20,20(sp)
 8041b44:	dcc00417 	ldw	r19,16(sp)
 8041b48:	dc800317 	ldw	r18,12(sp)
 8041b4c:	dc400217 	ldw	r17,8(sp)
 8041b50:	dc000117 	ldw	r16,4(sp)
 8041b54:	dec00b04 	addi	sp,sp,44
 8041b58:	f800283a 	ret
 8041b5c:	04400404 	movi	r17,16
 8041b60:	8d3fa82e 	bgeu	r17,r20,8041a04 <_realloc_r+0x6c>
 8041b64:	00800304 	movi	r2,12
 8041b68:	a8800015 	stw	r2,0(r21)
 8041b6c:	0029883a 	mov	r20,zero
 8041b70:	003fed06 	br	8041b28 <_realloc_r+0x190>
 8041b74:	9cc0004c 	andi	r19,r19,1
 8041b78:	98004e26 	beq	r19,zero,8041cb4 <_realloc_r+0x31c>
 8041b7c:	a00b883a 	mov	r5,r20
 8041b80:	a809883a 	mov	r4,r21
 8041b84:	8040d800 	call	8040d80 <_malloc_r>
 8041b88:	1029883a 	mov	r20,r2
 8041b8c:	1000bd26 	beq	r2,zero,8041e84 <_realloc_r+0x4ec>
 8041b90:	84ffff17 	ldw	r19,-4(r16)
 8041b94:	10fffe04 	addi	r3,r2,-8
 8041b98:	00bfff84 	movi	r2,-2
 8041b9c:	9884703a 	and	r2,r19,r2
 8041ba0:	b085883a 	add	r2,r22,r2
 8041ba4:	10c03e26 	beq	r2,r3,8041ca0 <_realloc_r+0x308>
 8041ba8:	91bfff04 	addi	r6,r18,-4
 8041bac:	30800968 	cmpgeui	r2,r6,37
 8041bb0:	10006e1e 	bne	r2,zero,8041d6c <_realloc_r+0x3d4>
 8041bb4:	30800530 	cmpltui	r2,r6,20
 8041bb8:	10004426 	beq	r2,zero,8041ccc <_realloc_r+0x334>
 8041bbc:	a005883a 	mov	r2,r20
 8041bc0:	8007883a 	mov	r3,r16
 8041bc4:	19000017 	ldw	r4,0(r3)
 8041bc8:	11000015 	stw	r4,0(r2)
 8041bcc:	19000117 	ldw	r4,4(r3)
 8041bd0:	11000115 	stw	r4,4(r2)
 8041bd4:	18c00217 	ldw	r3,8(r3)
 8041bd8:	10c00215 	stw	r3,8(r2)
 8041bdc:	a809883a 	mov	r4,r21
 8041be0:	800b883a 	mov	r5,r16
 8041be4:	80428440 	call	8042844 <_free_r>
 8041be8:	a809883a 	mov	r4,r21
 8041bec:	80436a40 	call	80436a4 <__malloc_unlock>
 8041bf0:	003fcd06 	br	8041b28 <_realloc_r+0x190>
 8041bf4:	300b883a 	mov	r5,r6
 8041bf8:	dfc00a17 	ldw	ra,40(sp)
 8041bfc:	df000917 	ldw	fp,36(sp)
 8041c00:	ddc00817 	ldw	r23,32(sp)
 8041c04:	dd800717 	ldw	r22,28(sp)
 8041c08:	dd400617 	ldw	r21,24(sp)
 8041c0c:	dd000517 	ldw	r20,20(sp)
 8041c10:	dcc00417 	ldw	r19,16(sp)
 8041c14:	dc800317 	ldw	r18,12(sp)
 8041c18:	dc400217 	ldw	r17,8(sp)
 8041c1c:	dc000117 	ldw	r16,4(sp)
 8041c20:	dec00b04 	addi	sp,sp,44
 8041c24:	8040d801 	jmpi	8040d80 <_malloc_r>
 8041c28:	8ce6b03a 	or	r19,r17,r19
 8041c2c:	b4c00115 	stw	r19,4(r22)
 8041c30:	b44b883a 	add	r5,r22,r17
 8041c34:	18c00054 	ori	r3,r3,1
 8041c38:	28c00115 	stw	r3,4(r5)
 8041c3c:	10c00117 	ldw	r3,4(r2)
 8041c40:	29400204 	addi	r5,r5,8
 8041c44:	a809883a 	mov	r4,r21
 8041c48:	18c00054 	ori	r3,r3,1
 8041c4c:	10c00115 	stw	r3,4(r2)
 8041c50:	80428440 	call	8042844 <_free_r>
 8041c54:	003fb106 	br	8041b1c <_realloc_r+0x184>
 8041c58:	00ffff04 	movi	r3,-4
 8041c5c:	10c4703a 	and	r2,r2,r3
 8041c60:	1487883a 	add	r3,r2,r18
 8041c64:	89800404 	addi	r6,r17,16
 8041c68:	19bf7716 	blt	r3,r6,8041a48 <_realloc_r+0xb0>
 8041c6c:	b46d883a 	add	r22,r22,r17
 8041c70:	1c45c83a 	sub	r2,r3,r17
 8041c74:	bd800215 	stw	r22,8(r23)
 8041c78:	10800054 	ori	r2,r2,1
 8041c7c:	b0800115 	stw	r2,4(r22)
 8041c80:	80bfff17 	ldw	r2,-4(r16)
 8041c84:	a809883a 	mov	r4,r21
 8041c88:	8029883a 	mov	r20,r16
 8041c8c:	1080004c 	andi	r2,r2,1
 8041c90:	1444b03a 	or	r2,r2,r17
 8041c94:	80bfff15 	stw	r2,-4(r16)
 8041c98:	80436a40 	call	80436a4 <__malloc_unlock>
 8041c9c:	003fa206 	br	8041b28 <_realloc_r+0x190>
 8041ca0:	a0bfff17 	ldw	r2,-4(r20)
 8041ca4:	00ffff04 	movi	r3,-4
 8041ca8:	10c4703a 	and	r2,r2,r3
 8041cac:	90a5883a 	add	r18,r18,r2
 8041cb0:	003f9006 	br	8041af4 <_realloc_r+0x15c>
 8041cb4:	873ffe17 	ldw	fp,-8(r16)
 8041cb8:	00bfff04 	movi	r2,-4
 8041cbc:	b739c83a 	sub	fp,r22,fp
 8041cc0:	e0c00117 	ldw	r3,4(fp)
 8041cc4:	1886703a 	and	r3,r3,r2
 8041cc8:	003f6b06 	br	8041a78 <_realloc_r+0xe0>
 8041ccc:	80c00017 	ldw	r3,0(r16)
 8041cd0:	30800728 	cmpgeui	r2,r6,28
 8041cd4:	a0c00015 	stw	r3,0(r20)
 8041cd8:	80c00117 	ldw	r3,4(r16)
 8041cdc:	a0c00115 	stw	r3,4(r20)
 8041ce0:	10004c1e 	bne	r2,zero,8041e14 <_realloc_r+0x47c>
 8041ce4:	80c00204 	addi	r3,r16,8
 8041ce8:	a0800204 	addi	r2,r20,8
 8041cec:	003fb506 	br	8041bc4 <_realloc_r+0x22c>
 8041cf0:	20800317 	ldw	r2,12(r4)
 8041cf4:	20c00217 	ldw	r3,8(r4)
 8041cf8:	91bfff04 	addi	r6,r18,-4
 8041cfc:	31400968 	cmpgeui	r5,r6,37
 8041d00:	18800315 	stw	r2,12(r3)
 8041d04:	10c00215 	stw	r3,8(r2)
 8041d08:	e0c00217 	ldw	r3,8(fp)
 8041d0c:	e0800317 	ldw	r2,12(fp)
 8041d10:	e1000204 	addi	r4,fp,8
 8041d14:	18800315 	stw	r2,12(r3)
 8041d18:	10c00215 	stw	r3,8(r2)
 8041d1c:	2800511e 	bne	r5,zero,8041e64 <_realloc_r+0x4cc>
 8041d20:	30800530 	cmpltui	r2,r6,20
 8041d24:	10004d1e 	bne	r2,zero,8041e5c <_realloc_r+0x4c4>
 8041d28:	80c00017 	ldw	r3,0(r16)
 8041d2c:	30800728 	cmpgeui	r2,r6,28
 8041d30:	e0c00215 	stw	r3,8(fp)
 8041d34:	80c00117 	ldw	r3,4(r16)
 8041d38:	e0c00315 	stw	r3,12(fp)
 8041d3c:	1000641e 	bne	r2,zero,8041ed0 <_realloc_r+0x538>
 8041d40:	84000204 	addi	r16,r16,8
 8041d44:	e0800404 	addi	r2,fp,16
 8041d48:	80c00017 	ldw	r3,0(r16)
 8041d4c:	3825883a 	mov	r18,r7
 8041d50:	003f6006 	br	8041ad4 <_realloc_r+0x13c>
 8041d54:	20800317 	ldw	r2,12(r4)
 8041d58:	21000217 	ldw	r4,8(r4)
 8041d5c:	1825883a 	mov	r18,r3
 8041d60:	20800315 	stw	r2,12(r4)
 8041d64:	11000215 	stw	r4,8(r2)
 8041d68:	003f6206 	br	8041af4 <_realloc_r+0x15c>
 8041d6c:	800b883a 	mov	r5,r16
 8041d70:	a009883a 	mov	r4,r20
 8041d74:	80417300 	call	8041730 <memmove>
 8041d78:	003f9806 	br	8041bdc <_realloc_r+0x244>
 8041d7c:	88800404 	addi	r2,r17,16
 8041d80:	38bf3d16 	blt	r7,r2,8041a78 <_realloc_r+0xe0>
 8041d84:	e0800317 	ldw	r2,12(fp)
 8041d88:	e0c00217 	ldw	r3,8(fp)
 8041d8c:	91bfff04 	addi	r6,r18,-4
 8041d90:	31000968 	cmpgeui	r4,r6,37
 8041d94:	18800315 	stw	r2,12(r3)
 8041d98:	10c00215 	stw	r3,8(r2)
 8041d9c:	e5000204 	addi	r20,fp,8
 8041da0:	2000561e 	bne	r4,zero,8041efc <_realloc_r+0x564>
 8041da4:	30800530 	cmpltui	r2,r6,20
 8041da8:	1000521e 	bne	r2,zero,8041ef4 <_realloc_r+0x55c>
 8041dac:	80c00017 	ldw	r3,0(r16)
 8041db0:	30800728 	cmpgeui	r2,r6,28
 8041db4:	e0c00215 	stw	r3,8(fp)
 8041db8:	80c00117 	ldw	r3,4(r16)
 8041dbc:	e0c00315 	stw	r3,12(fp)
 8041dc0:	1000541e 	bne	r2,zero,8041f14 <_realloc_r+0x57c>
 8041dc4:	84000204 	addi	r16,r16,8
 8041dc8:	e0800404 	addi	r2,fp,16
 8041dcc:	80c00017 	ldw	r3,0(r16)
 8041dd0:	10c00015 	stw	r3,0(r2)
 8041dd4:	80c00117 	ldw	r3,4(r16)
 8041dd8:	10c00115 	stw	r3,4(r2)
 8041ddc:	80c00217 	ldw	r3,8(r16)
 8041de0:	10c00215 	stw	r3,8(r2)
 8041de4:	e447883a 	add	r3,fp,r17
 8041de8:	3c45c83a 	sub	r2,r7,r17
 8041dec:	b8c00215 	stw	r3,8(r23)
 8041df0:	10800054 	ori	r2,r2,1
 8041df4:	18800115 	stw	r2,4(r3)
 8041df8:	e0800117 	ldw	r2,4(fp)
 8041dfc:	a809883a 	mov	r4,r21
 8041e00:	1080004c 	andi	r2,r2,1
 8041e04:	1444b03a 	or	r2,r2,r17
 8041e08:	e0800115 	stw	r2,4(fp)
 8041e0c:	80436a40 	call	80436a4 <__malloc_unlock>
 8041e10:	003f4506 	br	8041b28 <_realloc_r+0x190>
 8041e14:	80800217 	ldw	r2,8(r16)
 8041e18:	31800920 	cmpeqi	r6,r6,36
 8041e1c:	a0800215 	stw	r2,8(r20)
 8041e20:	80800317 	ldw	r2,12(r16)
 8041e24:	a0800315 	stw	r2,12(r20)
 8041e28:	3000191e 	bne	r6,zero,8041e90 <_realloc_r+0x4f8>
 8041e2c:	80c00404 	addi	r3,r16,16
 8041e30:	a0800404 	addi	r2,r20,16
 8041e34:	003f6306 	br	8041bc4 <_realloc_r+0x22c>
 8041e38:	2005883a 	mov	r2,r4
 8041e3c:	003f2306 	br	8041acc <_realloc_r+0x134>
 8041e40:	800b883a 	mov	r5,r16
 8041e44:	80417300 	call	8041730 <memmove>
 8041e48:	1021883a 	mov	r16,r2
 8041e4c:	e4c00117 	ldw	r19,4(fp)
 8041e50:	b825883a 	mov	r18,r23
 8041e54:	e02d883a 	mov	r22,fp
 8041e58:	003f2606 	br	8041af4 <_realloc_r+0x15c>
 8041e5c:	2005883a 	mov	r2,r4
 8041e60:	003fb906 	br	8041d48 <_realloc_r+0x3b0>
 8041e64:	800b883a 	mov	r5,r16
 8041e68:	d9c00015 	stw	r7,0(sp)
 8041e6c:	80417300 	call	8041730 <memmove>
 8041e70:	d9c00017 	ldw	r7,0(sp)
 8041e74:	1021883a 	mov	r16,r2
 8041e78:	e02d883a 	mov	r22,fp
 8041e7c:	3825883a 	mov	r18,r7
 8041e80:	003f1c06 	br	8041af4 <_realloc_r+0x15c>
 8041e84:	a809883a 	mov	r4,r21
 8041e88:	80436a40 	call	80436a4 <__malloc_unlock>
 8041e8c:	003f3706 	br	8041b6c <_realloc_r+0x1d4>
 8041e90:	81000417 	ldw	r4,16(r16)
 8041e94:	80c00604 	addi	r3,r16,24
 8041e98:	a0800604 	addi	r2,r20,24
 8041e9c:	a1000415 	stw	r4,16(r20)
 8041ea0:	81000517 	ldw	r4,20(r16)
 8041ea4:	a1000515 	stw	r4,20(r20)
 8041ea8:	003f4606 	br	8041bc4 <_realloc_r+0x22c>
 8041eac:	80800217 	ldw	r2,8(r16)
 8041eb0:	31800920 	cmpeqi	r6,r6,36
 8041eb4:	e0800415 	stw	r2,16(fp)
 8041eb8:	80800317 	ldw	r2,12(r16)
 8041ebc:	e0800515 	stw	r2,20(fp)
 8041ec0:	30001d1e 	bne	r6,zero,8041f38 <_realloc_r+0x5a0>
 8041ec4:	84000404 	addi	r16,r16,16
 8041ec8:	e0800604 	addi	r2,fp,24
 8041ecc:	003eff06 	br	8041acc <_realloc_r+0x134>
 8041ed0:	80800217 	ldw	r2,8(r16)
 8041ed4:	31800920 	cmpeqi	r6,r6,36
 8041ed8:	e0800415 	stw	r2,16(fp)
 8041edc:	80800317 	ldw	r2,12(r16)
 8041ee0:	e0800515 	stw	r2,20(fp)
 8041ee4:	30001b1e 	bne	r6,zero,8041f54 <_realloc_r+0x5bc>
 8041ee8:	84000404 	addi	r16,r16,16
 8041eec:	e0800604 	addi	r2,fp,24
 8041ef0:	003f9506 	br	8041d48 <_realloc_r+0x3b0>
 8041ef4:	a005883a 	mov	r2,r20
 8041ef8:	003fb406 	br	8041dcc <_realloc_r+0x434>
 8041efc:	800b883a 	mov	r5,r16
 8041f00:	a009883a 	mov	r4,r20
 8041f04:	d9c00015 	stw	r7,0(sp)
 8041f08:	80417300 	call	8041730 <memmove>
 8041f0c:	d9c00017 	ldw	r7,0(sp)
 8041f10:	003fb406 	br	8041de4 <_realloc_r+0x44c>
 8041f14:	80800217 	ldw	r2,8(r16)
 8041f18:	31800920 	cmpeqi	r6,r6,36
 8041f1c:	e0800415 	stw	r2,16(fp)
 8041f20:	80800317 	ldw	r2,12(r16)
 8041f24:	e0800515 	stw	r2,20(fp)
 8041f28:	3000111e 	bne	r6,zero,8041f70 <_realloc_r+0x5d8>
 8041f2c:	84000404 	addi	r16,r16,16
 8041f30:	e0800604 	addi	r2,fp,24
 8041f34:	003fa506 	br	8041dcc <_realloc_r+0x434>
 8041f38:	80c00417 	ldw	r3,16(r16)
 8041f3c:	84000604 	addi	r16,r16,24
 8041f40:	e0800804 	addi	r2,fp,32
 8041f44:	e0c00615 	stw	r3,24(fp)
 8041f48:	80ffff17 	ldw	r3,-4(r16)
 8041f4c:	e0c00715 	stw	r3,28(fp)
 8041f50:	003ede06 	br	8041acc <_realloc_r+0x134>
 8041f54:	80c00417 	ldw	r3,16(r16)
 8041f58:	84000604 	addi	r16,r16,24
 8041f5c:	e0800804 	addi	r2,fp,32
 8041f60:	e0c00615 	stw	r3,24(fp)
 8041f64:	80ffff17 	ldw	r3,-4(r16)
 8041f68:	e0c00715 	stw	r3,28(fp)
 8041f6c:	003f7606 	br	8041d48 <_realloc_r+0x3b0>
 8041f70:	80c00417 	ldw	r3,16(r16)
 8041f74:	84000604 	addi	r16,r16,24
 8041f78:	e0800804 	addi	r2,fp,32
 8041f7c:	e0c00615 	stw	r3,24(fp)
 8041f80:	80ffff17 	ldw	r3,-4(r16)
 8041f84:	e0c00715 	stw	r3,28(fp)
 8041f88:	003f9006 	br	8041dcc <_realloc_r+0x434>

08041f8c <_sbrk_r>:
 8041f8c:	defffe04 	addi	sp,sp,-8
 8041f90:	dc000015 	stw	r16,0(sp)
 8041f94:	00820174 	movhi	r2,2053
 8041f98:	2021883a 	mov	r16,r4
 8041f9c:	2809883a 	mov	r4,r5
 8041fa0:	dfc00115 	stw	ra,4(sp)
 8041fa4:	1022fc15 	stw	zero,-29712(r2)
 8041fa8:	804387c0 	call	804387c <sbrk>
 8041fac:	10ffffd8 	cmpnei	r3,r2,-1
 8041fb0:	18000426 	beq	r3,zero,8041fc4 <_sbrk_r+0x38>
 8041fb4:	dfc00117 	ldw	ra,4(sp)
 8041fb8:	dc000017 	ldw	r16,0(sp)
 8041fbc:	dec00204 	addi	sp,sp,8
 8041fc0:	f800283a 	ret
 8041fc4:	00c20174 	movhi	r3,2053
 8041fc8:	18e2fc17 	ldw	r3,-29712(r3)
 8041fcc:	183ff926 	beq	r3,zero,8041fb4 <_sbrk_r+0x28>
 8041fd0:	80c00015 	stw	r3,0(r16)
 8041fd4:	dfc00117 	ldw	ra,4(sp)
 8041fd8:	dc000017 	ldw	r16,0(sp)
 8041fdc:	dec00204 	addi	sp,sp,8
 8041fe0:	f800283a 	ret

08041fe4 <__sread>:
 8041fe4:	defffe04 	addi	sp,sp,-8
 8041fe8:	dc000015 	stw	r16,0(sp)
 8041fec:	2821883a 	mov	r16,r5
 8041ff0:	2940038f 	ldh	r5,14(r5)
 8041ff4:	dfc00115 	stw	ra,4(sp)
 8041ff8:	8042ddc0 	call	8042ddc <_read_r>
 8041ffc:	10000716 	blt	r2,zero,804201c <__sread+0x38>
 8042000:	80c01417 	ldw	r3,80(r16)
 8042004:	1887883a 	add	r3,r3,r2
 8042008:	80c01415 	stw	r3,80(r16)
 804200c:	dfc00117 	ldw	ra,4(sp)
 8042010:	dc000017 	ldw	r16,0(sp)
 8042014:	dec00204 	addi	sp,sp,8
 8042018:	f800283a 	ret
 804201c:	80c0030b 	ldhu	r3,12(r16)
 8042020:	18fbffcc 	andi	r3,r3,61439
 8042024:	80c0030d 	sth	r3,12(r16)
 8042028:	dfc00117 	ldw	ra,4(sp)
 804202c:	dc000017 	ldw	r16,0(sp)
 8042030:	dec00204 	addi	sp,sp,8
 8042034:	f800283a 	ret

08042038 <__seofread>:
 8042038:	0005883a 	mov	r2,zero
 804203c:	f800283a 	ret

08042040 <__swrite>:
 8042040:	2880030b 	ldhu	r2,12(r5)
 8042044:	defffb04 	addi	sp,sp,-20
 8042048:	dcc00315 	stw	r19,12(sp)
 804204c:	dc800215 	stw	r18,8(sp)
 8042050:	dc400115 	stw	r17,4(sp)
 8042054:	dc000015 	stw	r16,0(sp)
 8042058:	dfc00415 	stw	ra,16(sp)
 804205c:	10c0400c 	andi	r3,r2,256
 8042060:	2821883a 	mov	r16,r5
 8042064:	2023883a 	mov	r17,r4
 8042068:	3025883a 	mov	r18,r6
 804206c:	3827883a 	mov	r19,r7
 8042070:	18000d1e 	bne	r3,zero,80420a8 <__swrite+0x68>
 8042074:	8140038f 	ldh	r5,14(r16)
 8042078:	10bbffcc 	andi	r2,r2,61439
 804207c:	980f883a 	mov	r7,r19
 8042080:	900d883a 	mov	r6,r18
 8042084:	8809883a 	mov	r4,r17
 8042088:	8080030d 	sth	r2,12(r16)
 804208c:	dfc00417 	ldw	ra,16(sp)
 8042090:	dcc00317 	ldw	r19,12(sp)
 8042094:	dc800217 	ldw	r18,8(sp)
 8042098:	dc400117 	ldw	r17,4(sp)
 804209c:	dc000017 	ldw	r16,0(sp)
 80420a0:	dec00504 	addi	sp,sp,20
 80420a4:	80421241 	jmpi	8042124 <_write_r>
 80420a8:	2940038f 	ldh	r5,14(r5)
 80420ac:	01c00084 	movi	r7,2
 80420b0:	000d883a 	mov	r6,zero
 80420b4:	8042b4c0 	call	8042b4c <_lseek_r>
 80420b8:	8080030b 	ldhu	r2,12(r16)
 80420bc:	003fed06 	br	8042074 <__swrite+0x34>

080420c0 <__sseek>:
 80420c0:	defffe04 	addi	sp,sp,-8
 80420c4:	dc000015 	stw	r16,0(sp)
 80420c8:	2821883a 	mov	r16,r5
 80420cc:	2940038f 	ldh	r5,14(r5)
 80420d0:	dfc00115 	stw	ra,4(sp)
 80420d4:	8042b4c0 	call	8042b4c <_lseek_r>
 80420d8:	10ffffd8 	cmpnei	r3,r2,-1
 80420dc:	18000826 	beq	r3,zero,8042100 <__sseek+0x40>
 80420e0:	80c0030b 	ldhu	r3,12(r16)
 80420e4:	80801415 	stw	r2,80(r16)
 80420e8:	18c40014 	ori	r3,r3,4096
 80420ec:	80c0030d 	sth	r3,12(r16)
 80420f0:	dfc00117 	ldw	ra,4(sp)
 80420f4:	dc000017 	ldw	r16,0(sp)
 80420f8:	dec00204 	addi	sp,sp,8
 80420fc:	f800283a 	ret
 8042100:	80c0030b 	ldhu	r3,12(r16)
 8042104:	18fbffcc 	andi	r3,r3,61439
 8042108:	80c0030d 	sth	r3,12(r16)
 804210c:	dfc00117 	ldw	ra,4(sp)
 8042110:	dc000017 	ldw	r16,0(sp)
 8042114:	dec00204 	addi	sp,sp,8
 8042118:	f800283a 	ret

0804211c <__sclose>:
 804211c:	2940038f 	ldh	r5,14(r5)
 8042120:	80422d41 	jmpi	80422d4 <_close_r>

08042124 <_write_r>:
 8042124:	2807883a 	mov	r3,r5
 8042128:	defffe04 	addi	sp,sp,-8
 804212c:	dc000015 	stw	r16,0(sp)
 8042130:	300b883a 	mov	r5,r6
 8042134:	00820174 	movhi	r2,2053
 8042138:	380d883a 	mov	r6,r7
 804213c:	2021883a 	mov	r16,r4
 8042140:	1809883a 	mov	r4,r3
 8042144:	dfc00115 	stw	ra,4(sp)
 8042148:	1022fc15 	stw	zero,-29712(r2)
 804214c:	80439700 	call	8043970 <write>
 8042150:	10ffffd8 	cmpnei	r3,r2,-1
 8042154:	18000426 	beq	r3,zero,8042168 <_write_r+0x44>
 8042158:	dfc00117 	ldw	ra,4(sp)
 804215c:	dc000017 	ldw	r16,0(sp)
 8042160:	dec00204 	addi	sp,sp,8
 8042164:	f800283a 	ret
 8042168:	00c20174 	movhi	r3,2053
 804216c:	18e2fc17 	ldw	r3,-29712(r3)
 8042170:	183ff926 	beq	r3,zero,8042158 <_write_r+0x34>
 8042174:	80c00015 	stw	r3,0(r16)
 8042178:	dfc00117 	ldw	ra,4(sp)
 804217c:	dc000017 	ldw	r16,0(sp)
 8042180:	dec00204 	addi	sp,sp,8
 8042184:	f800283a 	ret

08042188 <__swsetup_r>:
 8042188:	00820134 	movhi	r2,2052
 804218c:	109c5117 	ldw	r2,28996(r2)
 8042190:	defffd04 	addi	sp,sp,-12
 8042194:	dc400115 	stw	r17,4(sp)
 8042198:	dc000015 	stw	r16,0(sp)
 804219c:	dfc00215 	stw	ra,8(sp)
 80421a0:	2023883a 	mov	r17,r4
 80421a4:	2821883a 	mov	r16,r5
 80421a8:	10000226 	beq	r2,zero,80421b4 <__swsetup_r+0x2c>
 80421ac:	10c00e17 	ldw	r3,56(r2)
 80421b0:	18001d26 	beq	r3,zero,8042228 <__swsetup_r+0xa0>
 80421b4:	80c0030b 	ldhu	r3,12(r16)
 80421b8:	1880020c 	andi	r2,r3,8
 80421bc:	10001f26 	beq	r2,zero,804223c <__swsetup_r+0xb4>
 80421c0:	80800417 	ldw	r2,16(r16)
 80421c4:	10002626 	beq	r2,zero,8042260 <__swsetup_r+0xd8>
 80421c8:	1900004c 	andi	r4,r3,1
 80421cc:	20000b1e 	bne	r4,zero,80421fc <__swsetup_r+0x74>
 80421d0:	1900008c 	andi	r4,r3,2
 80421d4:	20002b1e 	bne	r4,zero,8042284 <__swsetup_r+0xfc>
 80421d8:	81000517 	ldw	r4,20(r16)
 80421dc:	81000215 	stw	r4,8(r16)
 80421e0:	10000b26 	beq	r2,zero,8042210 <__swsetup_r+0x88>
 80421e4:	0005883a 	mov	r2,zero
 80421e8:	dfc00217 	ldw	ra,8(sp)
 80421ec:	dc400117 	ldw	r17,4(sp)
 80421f0:	dc000017 	ldw	r16,0(sp)
 80421f4:	dec00304 	addi	sp,sp,12
 80421f8:	f800283a 	ret
 80421fc:	81000517 	ldw	r4,20(r16)
 8042200:	80000215 	stw	zero,8(r16)
 8042204:	0109c83a 	sub	r4,zero,r4
 8042208:	81000615 	stw	r4,24(r16)
 804220c:	103ff51e 	bne	r2,zero,80421e4 <__swsetup_r+0x5c>
 8042210:	1900200c 	andi	r4,r3,128
 8042214:	203ff426 	beq	r4,zero,80421e8 <__swsetup_r+0x60>
 8042218:	18c01014 	ori	r3,r3,64
 804221c:	80c0030d 	sth	r3,12(r16)
 8042220:	00bfffc4 	movi	r2,-1
 8042224:	003ff006 	br	80421e8 <__swsetup_r+0x60>
 8042228:	1009883a 	mov	r4,r2
 804222c:	80407500 	call	8040750 <__sinit>
 8042230:	80c0030b 	ldhu	r3,12(r16)
 8042234:	1880020c 	andi	r2,r3,8
 8042238:	103fe11e 	bne	r2,zero,80421c0 <__swsetup_r+0x38>
 804223c:	1880040c 	andi	r2,r3,16
 8042240:	10002026 	beq	r2,zero,80422c4 <__swsetup_r+0x13c>
 8042244:	1880010c 	andi	r2,r3,4
 8042248:	1000101e 	bne	r2,zero,804228c <__swsetup_r+0x104>
 804224c:	80800417 	ldw	r2,16(r16)
 8042250:	19000214 	ori	r4,r3,8
 8042254:	8100030d 	sth	r4,12(r16)
 8042258:	2007883a 	mov	r3,r4
 804225c:	103fda1e 	bne	r2,zero,80421c8 <__swsetup_r+0x40>
 8042260:	1900a00c 	andi	r4,r3,640
 8042264:	21008020 	cmpeqi	r4,r4,512
 8042268:	203fd71e 	bne	r4,zero,80421c8 <__swsetup_r+0x40>
 804226c:	800b883a 	mov	r5,r16
 8042270:	8809883a 	mov	r4,r17
 8042274:	8042bb00 	call	8042bb0 <__smakebuf_r>
 8042278:	80c0030b 	ldhu	r3,12(r16)
 804227c:	80800417 	ldw	r2,16(r16)
 8042280:	003fd106 	br	80421c8 <__swsetup_r+0x40>
 8042284:	0009883a 	mov	r4,zero
 8042288:	003fd406 	br	80421dc <__swsetup_r+0x54>
 804228c:	81400c17 	ldw	r5,48(r16)
 8042290:	28000626 	beq	r5,zero,80422ac <__swsetup_r+0x124>
 8042294:	80801004 	addi	r2,r16,64
 8042298:	28800326 	beq	r5,r2,80422a8 <__swsetup_r+0x120>
 804229c:	8809883a 	mov	r4,r17
 80422a0:	80428440 	call	8042844 <_free_r>
 80422a4:	80c0030b 	ldhu	r3,12(r16)
 80422a8:	80000c15 	stw	zero,48(r16)
 80422ac:	80800417 	ldw	r2,16(r16)
 80422b0:	013ff6c4 	movi	r4,-37
 80422b4:	20c6703a 	and	r3,r4,r3
 80422b8:	80000115 	stw	zero,4(r16)
 80422bc:	80800015 	stw	r2,0(r16)
 80422c0:	003fe306 	br	8042250 <__swsetup_r+0xc8>
 80422c4:	00800244 	movi	r2,9
 80422c8:	88800015 	stw	r2,0(r17)
 80422cc:	18c01014 	ori	r3,r3,64
 80422d0:	003fd206 	br	804221c <__swsetup_r+0x94>

080422d4 <_close_r>:
 80422d4:	defffe04 	addi	sp,sp,-8
 80422d8:	dc000015 	stw	r16,0(sp)
 80422dc:	00820174 	movhi	r2,2053
 80422e0:	2021883a 	mov	r16,r4
 80422e4:	2809883a 	mov	r4,r5
 80422e8:	dfc00115 	stw	ra,4(sp)
 80422ec:	1022fc15 	stw	zero,-29712(r2)
 80422f0:	80431100 	call	8043110 <close>
 80422f4:	10ffffd8 	cmpnei	r3,r2,-1
 80422f8:	18000426 	beq	r3,zero,804230c <_close_r+0x38>
 80422fc:	dfc00117 	ldw	ra,4(sp)
 8042300:	dc000017 	ldw	r16,0(sp)
 8042304:	dec00204 	addi	sp,sp,8
 8042308:	f800283a 	ret
 804230c:	00c20174 	movhi	r3,2053
 8042310:	18e2fc17 	ldw	r3,-29712(r3)
 8042314:	183ff926 	beq	r3,zero,80422fc <_close_r+0x28>
 8042318:	80c00015 	stw	r3,0(r16)
 804231c:	dfc00117 	ldw	ra,4(sp)
 8042320:	dc000017 	ldw	r16,0(sp)
 8042324:	dec00204 	addi	sp,sp,8
 8042328:	f800283a 	ret

0804232c <_fclose_r>:
 804232c:	defffc04 	addi	sp,sp,-16
 8042330:	dfc00315 	stw	ra,12(sp)
 8042334:	dc800215 	stw	r18,8(sp)
 8042338:	dc400115 	stw	r17,4(sp)
 804233c:	dc000015 	stw	r16,0(sp)
 8042340:	28000726 	beq	r5,zero,8042360 <_fclose_r+0x34>
 8042344:	2821883a 	mov	r16,r5
 8042348:	2023883a 	mov	r17,r4
 804234c:	20000226 	beq	r4,zero,8042358 <_fclose_r+0x2c>
 8042350:	20800e17 	ldw	r2,56(r4)
 8042354:	10002726 	beq	r2,zero,80423f4 <_fclose_r+0xc8>
 8042358:	8080030f 	ldh	r2,12(r16)
 804235c:	1000081e 	bne	r2,zero,8042380 <_fclose_r+0x54>
 8042360:	0025883a 	mov	r18,zero
 8042364:	9005883a 	mov	r2,r18
 8042368:	dfc00317 	ldw	ra,12(sp)
 804236c:	dc800217 	ldw	r18,8(sp)
 8042370:	dc400117 	ldw	r17,4(sp)
 8042374:	dc000017 	ldw	r16,0(sp)
 8042378:	dec00404 	addi	sp,sp,16
 804237c:	f800283a 	ret
 8042380:	800b883a 	mov	r5,r16
 8042384:	8809883a 	mov	r4,r17
 8042388:	80424340 	call	8042434 <__sflush_r>
 804238c:	80c00b17 	ldw	r3,44(r16)
 8042390:	1025883a 	mov	r18,r2
 8042394:	18000426 	beq	r3,zero,80423a8 <_fclose_r+0x7c>
 8042398:	81400717 	ldw	r5,28(r16)
 804239c:	8809883a 	mov	r4,r17
 80423a0:	183ee83a 	callr	r3
 80423a4:	10001716 	blt	r2,zero,8042404 <_fclose_r+0xd8>
 80423a8:	8080030b 	ldhu	r2,12(r16)
 80423ac:	1080200c 	andi	r2,r2,128
 80423b0:	1000181e 	bne	r2,zero,8042414 <_fclose_r+0xe8>
 80423b4:	81400c17 	ldw	r5,48(r16)
 80423b8:	28000526 	beq	r5,zero,80423d0 <_fclose_r+0xa4>
 80423bc:	80801004 	addi	r2,r16,64
 80423c0:	28800226 	beq	r5,r2,80423cc <_fclose_r+0xa0>
 80423c4:	8809883a 	mov	r4,r17
 80423c8:	80428440 	call	8042844 <_free_r>
 80423cc:	80000c15 	stw	zero,48(r16)
 80423d0:	81401117 	ldw	r5,68(r16)
 80423d4:	28000326 	beq	r5,zero,80423e4 <_fclose_r+0xb8>
 80423d8:	8809883a 	mov	r4,r17
 80423dc:	80428440 	call	8042844 <_free_r>
 80423e0:	80001115 	stw	zero,68(r16)
 80423e4:	80407600 	call	8040760 <__sfp_lock_acquire>
 80423e8:	8000030d 	sth	zero,12(r16)
 80423ec:	80407640 	call	8040764 <__sfp_lock_release>
 80423f0:	003fdc06 	br	8042364 <_fclose_r+0x38>
 80423f4:	80407500 	call	8040750 <__sinit>
 80423f8:	8080030f 	ldh	r2,12(r16)
 80423fc:	103fd826 	beq	r2,zero,8042360 <_fclose_r+0x34>
 8042400:	003fdf06 	br	8042380 <_fclose_r+0x54>
 8042404:	8080030b 	ldhu	r2,12(r16)
 8042408:	04bfffc4 	movi	r18,-1
 804240c:	1080200c 	andi	r2,r2,128
 8042410:	103fe826 	beq	r2,zero,80423b4 <_fclose_r+0x88>
 8042414:	81400417 	ldw	r5,16(r16)
 8042418:	8809883a 	mov	r4,r17
 804241c:	80428440 	call	8042844 <_free_r>
 8042420:	003fe406 	br	80423b4 <_fclose_r+0x88>

08042424 <fclose>:
 8042424:	00820134 	movhi	r2,2052
 8042428:	200b883a 	mov	r5,r4
 804242c:	111c5117 	ldw	r4,28996(r2)
 8042430:	804232c1 	jmpi	804232c <_fclose_r>

08042434 <__sflush_r>:
 8042434:	2880030b 	ldhu	r2,12(r5)
 8042438:	defffb04 	addi	sp,sp,-20
 804243c:	dcc00315 	stw	r19,12(sp)
 8042440:	dc000015 	stw	r16,0(sp)
 8042444:	dfc00415 	stw	ra,16(sp)
 8042448:	dc800215 	stw	r18,8(sp)
 804244c:	dc400115 	stw	r17,4(sp)
 8042450:	10c0020c 	andi	r3,r2,8
 8042454:	2821883a 	mov	r16,r5
 8042458:	2027883a 	mov	r19,r4
 804245c:	18003c1e 	bne	r3,zero,8042550 <__sflush_r+0x11c>
 8042460:	29000117 	ldw	r4,4(r5)
 8042464:	10c20014 	ori	r3,r2,2048
 8042468:	28c0030d 	sth	r3,12(r5)
 804246c:	0100580e 	bge	zero,r4,80425d0 <__sflush_r+0x19c>
 8042470:	82000a17 	ldw	r8,40(r16)
 8042474:	40003426 	beq	r8,zero,8042548 <__sflush_r+0x114>
 8042478:	9c400017 	ldw	r17,0(r19)
 804247c:	1084000c 	andi	r2,r2,4096
 8042480:	98000015 	stw	zero,0(r19)
 8042484:	81400717 	ldw	r5,28(r16)
 8042488:	1000561e 	bne	r2,zero,80425e4 <__sflush_r+0x1b0>
 804248c:	000d883a 	mov	r6,zero
 8042490:	01c00044 	movi	r7,1
 8042494:	9809883a 	mov	r4,r19
 8042498:	403ee83a 	callr	r8
 804249c:	100d883a 	mov	r6,r2
 80424a0:	10bfffd8 	cmpnei	r2,r2,-1
 80424a4:	10005b26 	beq	r2,zero,8042614 <__sflush_r+0x1e0>
 80424a8:	80c0030b 	ldhu	r3,12(r16)
 80424ac:	82000a17 	ldw	r8,40(r16)
 80424b0:	18c0010c 	andi	r3,r3,4
 80424b4:	18000626 	beq	r3,zero,80424d0 <__sflush_r+0x9c>
 80424b8:	80c00117 	ldw	r3,4(r16)
 80424bc:	80800c17 	ldw	r2,48(r16)
 80424c0:	30cdc83a 	sub	r6,r6,r3
 80424c4:	10000226 	beq	r2,zero,80424d0 <__sflush_r+0x9c>
 80424c8:	80800f17 	ldw	r2,60(r16)
 80424cc:	308dc83a 	sub	r6,r6,r2
 80424d0:	81400717 	ldw	r5,28(r16)
 80424d4:	000f883a 	mov	r7,zero
 80424d8:	9809883a 	mov	r4,r19
 80424dc:	403ee83a 	callr	r8
 80424e0:	10ffffd8 	cmpnei	r3,r2,-1
 80424e4:	1800411e 	bne	r3,zero,80425ec <__sflush_r+0x1b8>
 80424e8:	99400017 	ldw	r5,0(r19)
 80424ec:	28c007b0 	cmpltui	r3,r5,30
 80424f0:	18002c26 	beq	r3,zero,80425a4 <__sflush_r+0x170>
 80424f4:	00f7f034 	movhi	r3,57280
 80424f8:	18ffff84 	addi	r3,r3,-2
 80424fc:	1949d83a 	sra	r4,r3,r5
 8042500:	80c0030b 	ldhu	r3,12(r16)
 8042504:	2100004c 	andi	r4,r4,1
 8042508:	2000271e 	bne	r4,zero,80425a8 <__sflush_r+0x174>
 804250c:	81000417 	ldw	r4,16(r16)
 8042510:	19bdffcc 	andi	r6,r3,63487
 8042514:	8180030d 	sth	r6,12(r16)
 8042518:	80000115 	stw	zero,4(r16)
 804251c:	81000015 	stw	r4,0(r16)
 8042520:	18c4000c 	andi	r3,r3,4096
 8042524:	1800431e 	bne	r3,zero,8042634 <__sflush_r+0x200>
 8042528:	81400c17 	ldw	r5,48(r16)
 804252c:	9c400015 	stw	r17,0(r19)
 8042530:	28000526 	beq	r5,zero,8042548 <__sflush_r+0x114>
 8042534:	80801004 	addi	r2,r16,64
 8042538:	28800226 	beq	r5,r2,8042544 <__sflush_r+0x110>
 804253c:	9809883a 	mov	r4,r19
 8042540:	80428440 	call	8042844 <_free_r>
 8042544:	80000c15 	stw	zero,48(r16)
 8042548:	0005883a 	mov	r2,zero
 804254c:	00001906 	br	80425b4 <__sflush_r+0x180>
 8042550:	2c800417 	ldw	r18,16(r5)
 8042554:	903ffc26 	beq	r18,zero,8042548 <__sflush_r+0x114>
 8042558:	2c400017 	ldw	r17,0(r5)
 804255c:	108000cc 	andi	r2,r2,3
 8042560:	2c800015 	stw	r18,0(r5)
 8042564:	8ca3c83a 	sub	r17,r17,r18
 8042568:	10001c1e 	bne	r2,zero,80425dc <__sflush_r+0x1a8>
 804256c:	28800517 	ldw	r2,20(r5)
 8042570:	80800215 	stw	r2,8(r16)
 8042574:	04400316 	blt	zero,r17,8042584 <__sflush_r+0x150>
 8042578:	003ff306 	br	8042548 <__sflush_r+0x114>
 804257c:	90a5883a 	add	r18,r18,r2
 8042580:	047ff10e 	bge	zero,r17,8042548 <__sflush_r+0x114>
 8042584:	80800917 	ldw	r2,36(r16)
 8042588:	81400717 	ldw	r5,28(r16)
 804258c:	880f883a 	mov	r7,r17
 8042590:	900d883a 	mov	r6,r18
 8042594:	9809883a 	mov	r4,r19
 8042598:	103ee83a 	callr	r2
 804259c:	88a3c83a 	sub	r17,r17,r2
 80425a0:	00bff616 	blt	zero,r2,804257c <__sflush_r+0x148>
 80425a4:	80c0030b 	ldhu	r3,12(r16)
 80425a8:	18c01014 	ori	r3,r3,64
 80425ac:	80c0030d 	sth	r3,12(r16)
 80425b0:	00bfffc4 	movi	r2,-1
 80425b4:	dfc00417 	ldw	ra,16(sp)
 80425b8:	dcc00317 	ldw	r19,12(sp)
 80425bc:	dc800217 	ldw	r18,8(sp)
 80425c0:	dc400117 	ldw	r17,4(sp)
 80425c4:	dc000017 	ldw	r16,0(sp)
 80425c8:	dec00504 	addi	sp,sp,20
 80425cc:	f800283a 	ret
 80425d0:	29000f17 	ldw	r4,60(r5)
 80425d4:	013fa616 	blt	zero,r4,8042470 <__sflush_r+0x3c>
 80425d8:	003fdb06 	br	8042548 <__sflush_r+0x114>
 80425dc:	0005883a 	mov	r2,zero
 80425e0:	003fe306 	br	8042570 <__sflush_r+0x13c>
 80425e4:	81801417 	ldw	r6,80(r16)
 80425e8:	003fb106 	br	80424b0 <__sflush_r+0x7c>
 80425ec:	80c0030b 	ldhu	r3,12(r16)
 80425f0:	81000417 	ldw	r4,16(r16)
 80425f4:	80000115 	stw	zero,4(r16)
 80425f8:	197dffcc 	andi	r5,r3,63487
 80425fc:	8140030d 	sth	r5,12(r16)
 8042600:	81000015 	stw	r4,0(r16)
 8042604:	18c4000c 	andi	r3,r3,4096
 8042608:	183fc726 	beq	r3,zero,8042528 <__sflush_r+0xf4>
 804260c:	80801415 	stw	r2,80(r16)
 8042610:	003fc506 	br	8042528 <__sflush_r+0xf4>
 8042614:	98800017 	ldw	r2,0(r19)
 8042618:	103fa326 	beq	r2,zero,80424a8 <__sflush_r+0x74>
 804261c:	10c00760 	cmpeqi	r3,r2,29
 8042620:	1800021e 	bne	r3,zero,804262c <__sflush_r+0x1f8>
 8042624:	10800598 	cmpnei	r2,r2,22
 8042628:	103fde1e 	bne	r2,zero,80425a4 <__sflush_r+0x170>
 804262c:	9c400015 	stw	r17,0(r19)
 8042630:	003fc506 	br	8042548 <__sflush_r+0x114>
 8042634:	283fbc1e 	bne	r5,zero,8042528 <__sflush_r+0xf4>
 8042638:	003ff406 	br	804260c <__sflush_r+0x1d8>

0804263c <_fflush_r>:
 804263c:	defffd04 	addi	sp,sp,-12
 8042640:	dc000115 	stw	r16,4(sp)
 8042644:	dfc00215 	stw	ra,8(sp)
 8042648:	2021883a 	mov	r16,r4
 804264c:	20000226 	beq	r4,zero,8042658 <_fflush_r+0x1c>
 8042650:	20800e17 	ldw	r2,56(r4)
 8042654:	10000726 	beq	r2,zero,8042674 <_fflush_r+0x38>
 8042658:	2880030f 	ldh	r2,12(r5)
 804265c:	10000a1e 	bne	r2,zero,8042688 <_fflush_r+0x4c>
 8042660:	0005883a 	mov	r2,zero
 8042664:	dfc00217 	ldw	ra,8(sp)
 8042668:	dc000117 	ldw	r16,4(sp)
 804266c:	dec00304 	addi	sp,sp,12
 8042670:	f800283a 	ret
 8042674:	d9400015 	stw	r5,0(sp)
 8042678:	80407500 	call	8040750 <__sinit>
 804267c:	d9400017 	ldw	r5,0(sp)
 8042680:	2880030f 	ldh	r2,12(r5)
 8042684:	103ff626 	beq	r2,zero,8042660 <_fflush_r+0x24>
 8042688:	8009883a 	mov	r4,r16
 804268c:	dfc00217 	ldw	ra,8(sp)
 8042690:	dc000117 	ldw	r16,4(sp)
 8042694:	dec00304 	addi	sp,sp,12
 8042698:	80424341 	jmpi	8042434 <__sflush_r>

0804269c <fflush>:
 804269c:	20001726 	beq	r4,zero,80426fc <fflush+0x60>
 80426a0:	00820134 	movhi	r2,2052
 80426a4:	200b883a 	mov	r5,r4
 80426a8:	111c5117 	ldw	r4,28996(r2)
 80426ac:	20000226 	beq	r4,zero,80426b8 <fflush+0x1c>
 80426b0:	20800e17 	ldw	r2,56(r4)
 80426b4:	10000526 	beq	r2,zero,80426cc <fflush+0x30>
 80426b8:	2880030f 	ldh	r2,12(r5)
 80426bc:	1000021e 	bne	r2,zero,80426c8 <fflush+0x2c>
 80426c0:	0005883a 	mov	r2,zero
 80426c4:	f800283a 	ret
 80426c8:	80424341 	jmpi	8042434 <__sflush_r>
 80426cc:	defffd04 	addi	sp,sp,-12
 80426d0:	d9400115 	stw	r5,4(sp)
 80426d4:	d9000015 	stw	r4,0(sp)
 80426d8:	dfc00215 	stw	ra,8(sp)
 80426dc:	80407500 	call	8040750 <__sinit>
 80426e0:	d9400117 	ldw	r5,4(sp)
 80426e4:	d9000017 	ldw	r4,0(sp)
 80426e8:	2880030f 	ldh	r2,12(r5)
 80426ec:	10000826 	beq	r2,zero,8042710 <fflush+0x74>
 80426f0:	dfc00217 	ldw	ra,8(sp)
 80426f4:	dec00304 	addi	sp,sp,12
 80426f8:	80424341 	jmpi	8042434 <__sflush_r>
 80426fc:	00820134 	movhi	r2,2052
 8042700:	111c5017 	ldw	r4,28992(r2)
 8042704:	01420134 	movhi	r5,2052
 8042708:	29498f04 	addi	r5,r5,9788
 804270c:	8040cd81 	jmpi	8040cd8 <_fwalk_reent>
 8042710:	0005883a 	mov	r2,zero
 8042714:	dfc00217 	ldw	ra,8(sp)
 8042718:	dec00304 	addi	sp,sp,12
 804271c:	f800283a 	ret

08042720 <_malloc_trim_r>:
 8042720:	defffa04 	addi	sp,sp,-24
 8042724:	dcc00315 	stw	r19,12(sp)
 8042728:	04c20134 	movhi	r19,2052
 804272c:	dd000415 	stw	r20,16(sp)
 8042730:	dc800215 	stw	r18,8(sp)
 8042734:	dc400115 	stw	r17,4(sp)
 8042738:	dc000015 	stw	r16,0(sp)
 804273c:	2829883a 	mov	r20,r5
 8042740:	dfc00515 	stw	ra,20(sp)
 8042744:	9cd6cc04 	addi	r19,r19,23344
 8042748:	2025883a 	mov	r18,r4
 804274c:	80436800 	call	8043680 <__malloc_lock>
 8042750:	98800217 	ldw	r2,8(r19)
 8042754:	14400117 	ldw	r17,4(r2)
 8042758:	00bfff04 	movi	r2,-4
 804275c:	88a2703a 	and	r17,r17,r2
 8042760:	8c03fbc4 	addi	r16,r17,4079
 8042764:	8521c83a 	sub	r16,r16,r20
 8042768:	8020d33a 	srli	r16,r16,12
 804276c:	843fffc4 	addi	r16,r16,-1
 8042770:	8020933a 	slli	r16,r16,12
 8042774:	80840008 	cmpgei	r2,r16,4096
 8042778:	10000626 	beq	r2,zero,8042794 <_malloc_trim_r+0x74>
 804277c:	000b883a 	mov	r5,zero
 8042780:	9009883a 	mov	r4,r18
 8042784:	8041f8c0 	call	8041f8c <_sbrk_r>
 8042788:	98c00217 	ldw	r3,8(r19)
 804278c:	1c47883a 	add	r3,r3,r17
 8042790:	10c00b26 	beq	r2,r3,80427c0 <_malloc_trim_r+0xa0>
 8042794:	9009883a 	mov	r4,r18
 8042798:	80436a40 	call	80436a4 <__malloc_unlock>
 804279c:	0005883a 	mov	r2,zero
 80427a0:	dfc00517 	ldw	ra,20(sp)
 80427a4:	dd000417 	ldw	r20,16(sp)
 80427a8:	dcc00317 	ldw	r19,12(sp)
 80427ac:	dc800217 	ldw	r18,8(sp)
 80427b0:	dc400117 	ldw	r17,4(sp)
 80427b4:	dc000017 	ldw	r16,0(sp)
 80427b8:	dec00604 	addi	sp,sp,24
 80427bc:	f800283a 	ret
 80427c0:	040bc83a 	sub	r5,zero,r16
 80427c4:	9009883a 	mov	r4,r18
 80427c8:	8041f8c0 	call	8041f8c <_sbrk_r>
 80427cc:	10bfffd8 	cmpnei	r2,r2,-1
 80427d0:	10000d26 	beq	r2,zero,8042808 <_malloc_trim_r+0xe8>
 80427d4:	00820174 	movhi	r2,2053
 80427d8:	10a30517 	ldw	r2,-29676(r2)
 80427dc:	98c00217 	ldw	r3,8(r19)
 80427e0:	8c23c83a 	sub	r17,r17,r16
 80427e4:	8c400054 	ori	r17,r17,1
 80427e8:	1405c83a 	sub	r2,r2,r16
 80427ec:	1c400115 	stw	r17,4(r3)
 80427f0:	9009883a 	mov	r4,r18
 80427f4:	00c20174 	movhi	r3,2053
 80427f8:	18a30515 	stw	r2,-29676(r3)
 80427fc:	80436a40 	call	80436a4 <__malloc_unlock>
 8042800:	00800044 	movi	r2,1
 8042804:	003fe606 	br	80427a0 <_malloc_trim_r+0x80>
 8042808:	000b883a 	mov	r5,zero
 804280c:	9009883a 	mov	r4,r18
 8042810:	8041f8c0 	call	8041f8c <_sbrk_r>
 8042814:	99000217 	ldw	r4,8(r19)
 8042818:	1107c83a 	sub	r3,r2,r4
 804281c:	19400410 	cmplti	r5,r3,16
 8042820:	283fdc1e 	bne	r5,zero,8042794 <_malloc_trim_r+0x74>
 8042824:	01420134 	movhi	r5,2052
 8042828:	295c5217 	ldw	r5,29000(r5)
 804282c:	18c00054 	ori	r3,r3,1
 8042830:	20c00115 	stw	r3,4(r4)
 8042834:	1145c83a 	sub	r2,r2,r5
 8042838:	01420174 	movhi	r5,2053
 804283c:	28a30515 	stw	r2,-29676(r5)
 8042840:	003fd406 	br	8042794 <_malloc_trim_r+0x74>

08042844 <_free_r>:
 8042844:	28005f26 	beq	r5,zero,80429c4 <_free_r+0x180>
 8042848:	defffd04 	addi	sp,sp,-12
 804284c:	dc400115 	stw	r17,4(sp)
 8042850:	dc000015 	stw	r16,0(sp)
 8042854:	2023883a 	mov	r17,r4
 8042858:	2821883a 	mov	r16,r5
 804285c:	dfc00215 	stw	ra,8(sp)
 8042860:	80436800 	call	8043680 <__malloc_lock>
 8042864:	81ffff17 	ldw	r7,-4(r16)
 8042868:	00bfff84 	movi	r2,-2
 804286c:	80fffe04 	addi	r3,r16,-8
 8042870:	3884703a 	and	r2,r7,r2
 8042874:	01820134 	movhi	r6,2052
 8042878:	1889883a 	add	r4,r3,r2
 804287c:	3196cc04 	addi	r6,r6,23344
 8042880:	21400117 	ldw	r5,4(r4)
 8042884:	32000217 	ldw	r8,8(r6)
 8042888:	027fff04 	movi	r9,-4
 804288c:	2a4a703a 	and	r5,r5,r9
 8042890:	41006526 	beq	r8,r4,8042a28 <_free_r+0x1e4>
 8042894:	21400115 	stw	r5,4(r4)
 8042898:	39c0004c 	andi	r7,r7,1
 804289c:	2151883a 	add	r8,r4,r5
 80428a0:	3800281e 	bne	r7,zero,8042944 <_free_r+0x100>
 80428a4:	82bffe17 	ldw	r10,-8(r16)
 80428a8:	42000117 	ldw	r8,4(r8)
 80428ac:	01c20134 	movhi	r7,2052
 80428b0:	1a87c83a 	sub	r3,r3,r10
 80428b4:	1a400217 	ldw	r9,8(r3)
 80428b8:	39d6ce04 	addi	r7,r7,23352
 80428bc:	1285883a 	add	r2,r2,r10
 80428c0:	4200004c 	andi	r8,r8,1
 80428c4:	49c04d26 	beq	r9,r7,80429fc <_free_r+0x1b8>
 80428c8:	1a800317 	ldw	r10,12(r3)
 80428cc:	4a800315 	stw	r10,12(r9)
 80428d0:	52400215 	stw	r9,8(r10)
 80428d4:	40006926 	beq	r8,zero,8042a7c <_free_r+0x238>
 80428d8:	11400054 	ori	r5,r2,1
 80428dc:	19400115 	stw	r5,4(r3)
 80428e0:	20800015 	stw	r2,0(r4)
 80428e4:	11008028 	cmpgeui	r4,r2,512
 80428e8:	20001e1e 	bne	r4,zero,8042964 <_free_r+0x120>
 80428ec:	1008d0fa 	srli	r4,r2,3
 80428f0:	100ad17a 	srli	r5,r2,5
 80428f4:	31c00117 	ldw	r7,4(r6)
 80428f8:	20800044 	addi	r2,r4,1
 80428fc:	100490fa 	slli	r2,r2,3
 8042900:	01000044 	movi	r4,1
 8042904:	2148983a 	sll	r4,r4,r5
 8042908:	3085883a 	add	r2,r6,r2
 804290c:	11400017 	ldw	r5,0(r2)
 8042910:	21c8b03a 	or	r4,r4,r7
 8042914:	11fffe04 	addi	r7,r2,-8
 8042918:	19c00315 	stw	r7,12(r3)
 804291c:	19400215 	stw	r5,8(r3)
 8042920:	31000115 	stw	r4,4(r6)
 8042924:	10c00015 	stw	r3,0(r2)
 8042928:	28c00315 	stw	r3,12(r5)
 804292c:	8809883a 	mov	r4,r17
 8042930:	dfc00217 	ldw	ra,8(sp)
 8042934:	dc400117 	ldw	r17,4(sp)
 8042938:	dc000017 	ldw	r16,0(sp)
 804293c:	dec00304 	addi	sp,sp,12
 8042940:	80436a41 	jmpi	80436a4 <__malloc_unlock>
 8042944:	41c00117 	ldw	r7,4(r8)
 8042948:	39c0004c 	andi	r7,r7,1
 804294c:	38001e26 	beq	r7,zero,80429c8 <_free_r+0x184>
 8042950:	11400054 	ori	r5,r2,1
 8042954:	817fff15 	stw	r5,-4(r16)
 8042958:	20800015 	stw	r2,0(r4)
 804295c:	11008028 	cmpgeui	r4,r2,512
 8042960:	203fe226 	beq	r4,zero,80428ec <_free_r+0xa8>
 8042964:	1008d27a 	srli	r4,r2,9
 8042968:	21400168 	cmpgeui	r5,r4,5
 804296c:	2800451e 	bne	r5,zero,8042a84 <_free_r+0x240>
 8042970:	1008d1ba 	srli	r4,r2,6
 8042974:	21c00e44 	addi	r7,r4,57
 8042978:	380e90fa 	slli	r7,r7,3
 804297c:	21000e04 	addi	r4,r4,56
 8042980:	31cf883a 	add	r7,r6,r7
 8042984:	39400017 	ldw	r5,0(r7)
 8042988:	39fffe04 	addi	r7,r7,-8
 804298c:	39405326 	beq	r7,r5,8042adc <_free_r+0x298>
 8042990:	01bfff04 	movi	r6,-4
 8042994:	00000206 	br	80429a0 <_free_r+0x15c>
 8042998:	29400217 	ldw	r5,8(r5)
 804299c:	39400326 	beq	r7,r5,80429ac <_free_r+0x168>
 80429a0:	29000117 	ldw	r4,4(r5)
 80429a4:	2188703a 	and	r4,r4,r6
 80429a8:	113ffb36 	bltu	r2,r4,8042998 <_free_r+0x154>
 80429ac:	29c00317 	ldw	r7,12(r5)
 80429b0:	19c00315 	stw	r7,12(r3)
 80429b4:	19400215 	stw	r5,8(r3)
 80429b8:	38c00215 	stw	r3,8(r7)
 80429bc:	28c00315 	stw	r3,12(r5)
 80429c0:	003fda06 	br	804292c <_free_r+0xe8>
 80429c4:	f800283a 	ret
 80429c8:	01c20134 	movhi	r7,2052
 80429cc:	1145883a 	add	r2,r2,r5
 80429d0:	39d6ce04 	addi	r7,r7,23352
 80429d4:	21400217 	ldw	r5,8(r4)
 80429d8:	29c03726 	beq	r5,r7,8042ab8 <_free_r+0x274>
 80429dc:	22000317 	ldw	r8,12(r4)
 80429e0:	11c00054 	ori	r7,r2,1
 80429e4:	1889883a 	add	r4,r3,r2
 80429e8:	2a000315 	stw	r8,12(r5)
 80429ec:	41400215 	stw	r5,8(r8)
 80429f0:	19c00115 	stw	r7,4(r3)
 80429f4:	20800015 	stw	r2,0(r4)
 80429f8:	003fba06 	br	80428e4 <_free_r+0xa0>
 80429fc:	40004f1e 	bne	r8,zero,8042b3c <_free_r+0x2f8>
 8042a00:	21800217 	ldw	r6,8(r4)
 8042a04:	21000317 	ldw	r4,12(r4)
 8042a08:	288b883a 	add	r5,r5,r2
 8042a0c:	28800054 	ori	r2,r5,1
 8042a10:	31000315 	stw	r4,12(r6)
 8042a14:	21800215 	stw	r6,8(r4)
 8042a18:	18800115 	stw	r2,4(r3)
 8042a1c:	1947883a 	add	r3,r3,r5
 8042a20:	19400015 	stw	r5,0(r3)
 8042a24:	003fc106 	br	804292c <_free_r+0xe8>
 8042a28:	39c0004c 	andi	r7,r7,1
 8042a2c:	114b883a 	add	r5,r2,r5
 8042a30:	3800071e 	bne	r7,zero,8042a50 <_free_r+0x20c>
 8042a34:	81fffe17 	ldw	r7,-8(r16)
 8042a38:	19c7c83a 	sub	r3,r3,r7
 8042a3c:	18800317 	ldw	r2,12(r3)
 8042a40:	19000217 	ldw	r4,8(r3)
 8042a44:	29cb883a 	add	r5,r5,r7
 8042a48:	20800315 	stw	r2,12(r4)
 8042a4c:	11000215 	stw	r4,8(r2)
 8042a50:	00820134 	movhi	r2,2052
 8042a54:	29000054 	ori	r4,r5,1
 8042a58:	109c5317 	ldw	r2,29004(r2)
 8042a5c:	19000115 	stw	r4,4(r3)
 8042a60:	30c00215 	stw	r3,8(r6)
 8042a64:	28bfb136 	bltu	r5,r2,804292c <_free_r+0xe8>
 8042a68:	00820174 	movhi	r2,2053
 8042a6c:	1162fb17 	ldw	r5,-29716(r2)
 8042a70:	8809883a 	mov	r4,r17
 8042a74:	80427200 	call	8042720 <_malloc_trim_r>
 8042a78:	003fac06 	br	804292c <_free_r+0xe8>
 8042a7c:	1145883a 	add	r2,r2,r5
 8042a80:	003fd406 	br	80429d4 <_free_r+0x190>
 8042a84:	21400568 	cmpgeui	r5,r4,21
 8042a88:	28000726 	beq	r5,zero,8042aa8 <_free_r+0x264>
 8042a8c:	21401568 	cmpgeui	r5,r4,85
 8042a90:	2800191e 	bne	r5,zero,8042af8 <_free_r+0x2b4>
 8042a94:	1008d33a 	srli	r4,r2,12
 8042a98:	21c01bc4 	addi	r7,r4,111
 8042a9c:	380e90fa 	slli	r7,r7,3
 8042aa0:	21001b84 	addi	r4,r4,110
 8042aa4:	003fb606 	br	8042980 <_free_r+0x13c>
 8042aa8:	21c01704 	addi	r7,r4,92
 8042aac:	380e90fa 	slli	r7,r7,3
 8042ab0:	210016c4 	addi	r4,r4,91
 8042ab4:	003fb206 	br	8042980 <_free_r+0x13c>
 8042ab8:	30c00515 	stw	r3,20(r6)
 8042abc:	30c00415 	stw	r3,16(r6)
 8042ac0:	11000054 	ori	r4,r2,1
 8042ac4:	19c00315 	stw	r7,12(r3)
 8042ac8:	19c00215 	stw	r7,8(r3)
 8042acc:	19000115 	stw	r4,4(r3)
 8042ad0:	1887883a 	add	r3,r3,r2
 8042ad4:	18800015 	stw	r2,0(r3)
 8042ad8:	003f9406 	br	804292c <_free_r+0xe8>
 8042adc:	2009d0ba 	srai	r4,r4,2
 8042ae0:	00800044 	movi	r2,1
 8042ae4:	32000117 	ldw	r8,4(r6)
 8042ae8:	1104983a 	sll	r2,r2,r4
 8042aec:	1204b03a 	or	r2,r2,r8
 8042af0:	30800115 	stw	r2,4(r6)
 8042af4:	003fae06 	br	80429b0 <_free_r+0x16c>
 8042af8:	21405568 	cmpgeui	r5,r4,341
 8042afc:	2800051e 	bne	r5,zero,8042b14 <_free_r+0x2d0>
 8042b00:	1008d3fa 	srli	r4,r2,15
 8042b04:	21c01e04 	addi	r7,r4,120
 8042b08:	380e90fa 	slli	r7,r7,3
 8042b0c:	21001dc4 	addi	r4,r4,119
 8042b10:	003f9b06 	br	8042980 <_free_r+0x13c>
 8042b14:	21015568 	cmpgeui	r4,r4,1365
 8042b18:	2000051e 	bne	r4,zero,8042b30 <_free_r+0x2ec>
 8042b1c:	1008d4ba 	srli	r4,r2,18
 8042b20:	21c01f44 	addi	r7,r4,125
 8042b24:	380e90fa 	slli	r7,r7,3
 8042b28:	21001f04 	addi	r4,r4,124
 8042b2c:	003f9406 	br	8042980 <_free_r+0x13c>
 8042b30:	01c0fe04 	movi	r7,1016
 8042b34:	01001f84 	movi	r4,126
 8042b38:	003f9106 	br	8042980 <_free_r+0x13c>
 8042b3c:	11400054 	ori	r5,r2,1
 8042b40:	19400115 	stw	r5,4(r3)
 8042b44:	20800015 	stw	r2,0(r4)
 8042b48:	003f7806 	br	804292c <_free_r+0xe8>

08042b4c <_lseek_r>:
 8042b4c:	2807883a 	mov	r3,r5
 8042b50:	defffe04 	addi	sp,sp,-8
 8042b54:	dc000015 	stw	r16,0(sp)
 8042b58:	300b883a 	mov	r5,r6
 8042b5c:	00820174 	movhi	r2,2053
 8042b60:	380d883a 	mov	r6,r7
 8042b64:	2021883a 	mov	r16,r4
 8042b68:	1809883a 	mov	r4,r3
 8042b6c:	dfc00115 	stw	ra,4(sp)
 8042b70:	1022fc15 	stw	zero,-29712(r2)
 8042b74:	80435240 	call	8043524 <lseek>
 8042b78:	10ffffd8 	cmpnei	r3,r2,-1
 8042b7c:	18000426 	beq	r3,zero,8042b90 <_lseek_r+0x44>
 8042b80:	dfc00117 	ldw	ra,4(sp)
 8042b84:	dc000017 	ldw	r16,0(sp)
 8042b88:	dec00204 	addi	sp,sp,8
 8042b8c:	f800283a 	ret
 8042b90:	00c20174 	movhi	r3,2053
 8042b94:	18e2fc17 	ldw	r3,-29712(r3)
 8042b98:	183ff926 	beq	r3,zero,8042b80 <_lseek_r+0x34>
 8042b9c:	80c00015 	stw	r3,0(r16)
 8042ba0:	dfc00117 	ldw	ra,4(sp)
 8042ba4:	dc000017 	ldw	r16,0(sp)
 8042ba8:	dec00204 	addi	sp,sp,8
 8042bac:	f800283a 	ret

08042bb0 <__smakebuf_r>:
 8042bb0:	2880030b 	ldhu	r2,12(r5)
 8042bb4:	deffe804 	addi	sp,sp,-96
 8042bb8:	dc001215 	stw	r16,72(sp)
 8042bbc:	dfc01715 	stw	ra,92(sp)
 8042bc0:	dd001615 	stw	r20,88(sp)
 8042bc4:	dcc01515 	stw	r19,84(sp)
 8042bc8:	dc801415 	stw	r18,80(sp)
 8042bcc:	dc401315 	stw	r17,76(sp)
 8042bd0:	10c0008c 	andi	r3,r2,2
 8042bd4:	2821883a 	mov	r16,r5
 8042bd8:	18000d26 	beq	r3,zero,8042c10 <__smakebuf_r+0x60>
 8042bdc:	288010c4 	addi	r2,r5,67
 8042be0:	28800015 	stw	r2,0(r5)
 8042be4:	28800415 	stw	r2,16(r5)
 8042be8:	00800044 	movi	r2,1
 8042bec:	28800515 	stw	r2,20(r5)
 8042bf0:	dfc01717 	ldw	ra,92(sp)
 8042bf4:	dd001617 	ldw	r20,88(sp)
 8042bf8:	dcc01517 	ldw	r19,84(sp)
 8042bfc:	dc801417 	ldw	r18,80(sp)
 8042c00:	dc401317 	ldw	r17,76(sp)
 8042c04:	dc001217 	ldw	r16,72(sp)
 8042c08:	dec01804 	addi	sp,sp,96
 8042c0c:	f800283a 	ret
 8042c10:	2940038f 	ldh	r5,14(r5)
 8042c14:	2023883a 	mov	r17,r4
 8042c18:	28002816 	blt	r5,zero,8042cbc <__smakebuf_r+0x10c>
 8042c1c:	d80d883a 	mov	r6,sp
 8042c20:	8042e400 	call	8042e40 <_fstat_r>
 8042c24:	10002416 	blt	r2,zero,8042cb8 <__smakebuf_r+0x108>
 8042c28:	d8800117 	ldw	r2,4(sp)
 8042c2c:	10bc000c 	andi	r2,r2,61440
 8042c30:	10880018 	cmpnei	r2,r2,8192
 8042c34:	1000421e 	bne	r2,zero,8042d40 <__smakebuf_r+0x190>
 8042c38:	8140038f 	ldh	r5,14(r16)
 8042c3c:	8809883a 	mov	r4,r17
 8042c40:	8042ea00 	call	8042ea0 <_isatty_r>
 8042c44:	10000826 	beq	r2,zero,8042c68 <__smakebuf_r+0xb8>
 8042c48:	8080030b 	ldhu	r2,12(r16)
 8042c4c:	80c010c4 	addi	r3,r16,67
 8042c50:	80c00015 	stw	r3,0(r16)
 8042c54:	10800054 	ori	r2,r2,1
 8042c58:	8080030d 	sth	r2,12(r16)
 8042c5c:	00800044 	movi	r2,1
 8042c60:	80c00415 	stw	r3,16(r16)
 8042c64:	80800515 	stw	r2,20(r16)
 8042c68:	04c00044 	movi	r19,1
 8042c6c:	05010004 	movi	r20,1024
 8042c70:	04820004 	movi	r18,2048
 8042c74:	a00b883a 	mov	r5,r20
 8042c78:	8809883a 	mov	r4,r17
 8042c7c:	8040d800 	call	8040d80 <_malloc_r>
 8042c80:	10001726 	beq	r2,zero,8042ce0 <__smakebuf_r+0x130>
 8042c84:	80c0030b 	ldhu	r3,12(r16)
 8042c88:	01020134 	movhi	r4,2052
 8042c8c:	21010504 	addi	r4,r4,1044
 8042c90:	89000f15 	stw	r4,60(r17)
 8042c94:	18c02014 	ori	r3,r3,128
 8042c98:	80c0030d 	sth	r3,12(r16)
 8042c9c:	80800015 	stw	r2,0(r16)
 8042ca0:	80800415 	stw	r2,16(r16)
 8042ca4:	85000515 	stw	r20,20(r16)
 8042ca8:	98001d1e 	bne	r19,zero,8042d20 <__smakebuf_r+0x170>
 8042cac:	90e4b03a 	or	r18,r18,r3
 8042cb0:	8480030d 	sth	r18,12(r16)
 8042cb4:	003fce06 	br	8042bf0 <__smakebuf_r+0x40>
 8042cb8:	8080030b 	ldhu	r2,12(r16)
 8042cbc:	1080200c 	andi	r2,r2,128
 8042cc0:	0027883a 	mov	r19,zero
 8042cc4:	10001326 	beq	r2,zero,8042d14 <__smakebuf_r+0x164>
 8042cc8:	05001004 	movi	r20,64
 8042ccc:	a00b883a 	mov	r5,r20
 8042cd0:	8809883a 	mov	r4,r17
 8042cd4:	0025883a 	mov	r18,zero
 8042cd8:	8040d800 	call	8040d80 <_malloc_r>
 8042cdc:	103fe91e 	bne	r2,zero,8042c84 <__smakebuf_r+0xd4>
 8042ce0:	8080030b 	ldhu	r2,12(r16)
 8042ce4:	10c0800c 	andi	r3,r2,512
 8042ce8:	183fc11e 	bne	r3,zero,8042bf0 <__smakebuf_r+0x40>
 8042cec:	00ffff04 	movi	r3,-4
 8042cf0:	10c4703a 	and	r2,r2,r3
 8042cf4:	10800094 	ori	r2,r2,2
 8042cf8:	80c010c4 	addi	r3,r16,67
 8042cfc:	8080030d 	sth	r2,12(r16)
 8042d00:	00800044 	movi	r2,1
 8042d04:	80c00015 	stw	r3,0(r16)
 8042d08:	80c00415 	stw	r3,16(r16)
 8042d0c:	80800515 	stw	r2,20(r16)
 8042d10:	003fb706 	br	8042bf0 <__smakebuf_r+0x40>
 8042d14:	05010004 	movi	r20,1024
 8042d18:	0025883a 	mov	r18,zero
 8042d1c:	003fd506 	br	8042c74 <__smakebuf_r+0xc4>
 8042d20:	8140038f 	ldh	r5,14(r16)
 8042d24:	8809883a 	mov	r4,r17
 8042d28:	8042ea00 	call	8042ea0 <_isatty_r>
 8042d2c:	80c0030b 	ldhu	r3,12(r16)
 8042d30:	103fde26 	beq	r2,zero,8042cac <__smakebuf_r+0xfc>
 8042d34:	18ffff0c 	andi	r3,r3,65532
 8042d38:	18c00054 	ori	r3,r3,1
 8042d3c:	003fdb06 	br	8042cac <__smakebuf_r+0xfc>
 8042d40:	0027883a 	mov	r19,zero
 8042d44:	05010004 	movi	r20,1024
 8042d48:	04820004 	movi	r18,2048
 8042d4c:	003fc906 	br	8042c74 <__smakebuf_r+0xc4>

08042d50 <__swhatbuf_r>:
 8042d50:	deffea04 	addi	sp,sp,-88
 8042d54:	dc001215 	stw	r16,72(sp)
 8042d58:	2821883a 	mov	r16,r5
 8042d5c:	2940038f 	ldh	r5,14(r5)
 8042d60:	dc801415 	stw	r18,80(sp)
 8042d64:	dc401315 	stw	r17,76(sp)
 8042d68:	dfc01515 	stw	ra,84(sp)
 8042d6c:	3023883a 	mov	r17,r6
 8042d70:	3825883a 	mov	r18,r7
 8042d74:	28001016 	blt	r5,zero,8042db8 <__swhatbuf_r+0x68>
 8042d78:	d80d883a 	mov	r6,sp
 8042d7c:	8042e400 	call	8042e40 <_fstat_r>
 8042d80:	10000d16 	blt	r2,zero,8042db8 <__swhatbuf_r+0x68>
 8042d84:	d8c00117 	ldw	r3,4(sp)
 8042d88:	01010004 	movi	r4,1024
 8042d8c:	00820004 	movi	r2,2048
 8042d90:	18fc000c 	andi	r3,r3,61440
 8042d94:	18c80020 	cmpeqi	r3,r3,8192
 8042d98:	90c00015 	stw	r3,0(r18)
 8042d9c:	89000015 	stw	r4,0(r17)
 8042da0:	dfc01517 	ldw	ra,84(sp)
 8042da4:	dc801417 	ldw	r18,80(sp)
 8042da8:	dc401317 	ldw	r17,76(sp)
 8042dac:	dc001217 	ldw	r16,72(sp)
 8042db0:	dec01604 	addi	sp,sp,88
 8042db4:	f800283a 	ret
 8042db8:	8080030b 	ldhu	r2,12(r16)
 8042dbc:	0007883a 	mov	r3,zero
 8042dc0:	1080200c 	andi	r2,r2,128
 8042dc4:	10000326 	beq	r2,zero,8042dd4 <__swhatbuf_r+0x84>
 8042dc8:	01001004 	movi	r4,64
 8042dcc:	0005883a 	mov	r2,zero
 8042dd0:	003ff106 	br	8042d98 <__swhatbuf_r+0x48>
 8042dd4:	01010004 	movi	r4,1024
 8042dd8:	003fef06 	br	8042d98 <__swhatbuf_r+0x48>

08042ddc <_read_r>:
 8042ddc:	2807883a 	mov	r3,r5
 8042de0:	defffe04 	addi	sp,sp,-8
 8042de4:	dc000015 	stw	r16,0(sp)
 8042de8:	300b883a 	mov	r5,r6
 8042dec:	00820174 	movhi	r2,2053
 8042df0:	380d883a 	mov	r6,r7
 8042df4:	2021883a 	mov	r16,r4
 8042df8:	1809883a 	mov	r4,r3
 8042dfc:	dfc00115 	stw	ra,4(sp)
 8042e00:	1022fc15 	stw	zero,-29712(r2)
 8042e04:	80437040 	call	8043704 <read>
 8042e08:	10ffffd8 	cmpnei	r3,r2,-1
 8042e0c:	18000426 	beq	r3,zero,8042e20 <_read_r+0x44>
 8042e10:	dfc00117 	ldw	ra,4(sp)
 8042e14:	dc000017 	ldw	r16,0(sp)
 8042e18:	dec00204 	addi	sp,sp,8
 8042e1c:	f800283a 	ret
 8042e20:	00c20174 	movhi	r3,2053
 8042e24:	18e2fc17 	ldw	r3,-29712(r3)
 8042e28:	183ff926 	beq	r3,zero,8042e10 <_read_r+0x34>
 8042e2c:	80c00015 	stw	r3,0(r16)
 8042e30:	dfc00117 	ldw	ra,4(sp)
 8042e34:	dc000017 	ldw	r16,0(sp)
 8042e38:	dec00204 	addi	sp,sp,8
 8042e3c:	f800283a 	ret

08042e40 <_fstat_r>:
 8042e40:	2807883a 	mov	r3,r5
 8042e44:	defffe04 	addi	sp,sp,-8
 8042e48:	dc000015 	stw	r16,0(sp)
 8042e4c:	00820174 	movhi	r2,2053
 8042e50:	300b883a 	mov	r5,r6
 8042e54:	2021883a 	mov	r16,r4
 8042e58:	1809883a 	mov	r4,r3
 8042e5c:	dfc00115 	stw	ra,4(sp)
 8042e60:	1022fc15 	stw	zero,-29712(r2)
 8042e64:	80432540 	call	8043254 <fstat>
 8042e68:	10ffffd8 	cmpnei	r3,r2,-1
 8042e6c:	18000426 	beq	r3,zero,8042e80 <_fstat_r+0x40>
 8042e70:	dfc00117 	ldw	ra,4(sp)
 8042e74:	dc000017 	ldw	r16,0(sp)
 8042e78:	dec00204 	addi	sp,sp,8
 8042e7c:	f800283a 	ret
 8042e80:	00c20174 	movhi	r3,2053
 8042e84:	18e2fc17 	ldw	r3,-29712(r3)
 8042e88:	183ff926 	beq	r3,zero,8042e70 <_fstat_r+0x30>
 8042e8c:	80c00015 	stw	r3,0(r16)
 8042e90:	dfc00117 	ldw	ra,4(sp)
 8042e94:	dc000017 	ldw	r16,0(sp)
 8042e98:	dec00204 	addi	sp,sp,8
 8042e9c:	f800283a 	ret

08042ea0 <_isatty_r>:
 8042ea0:	defffe04 	addi	sp,sp,-8
 8042ea4:	dc000015 	stw	r16,0(sp)
 8042ea8:	00820174 	movhi	r2,2053
 8042eac:	2021883a 	mov	r16,r4
 8042eb0:	2809883a 	mov	r4,r5
 8042eb4:	dfc00115 	stw	ra,4(sp)
 8042eb8:	1022fc15 	stw	zero,-29712(r2)
 8042ebc:	804334c0 	call	804334c <isatty>
 8042ec0:	10ffffd8 	cmpnei	r3,r2,-1
 8042ec4:	18000426 	beq	r3,zero,8042ed8 <_isatty_r+0x38>
 8042ec8:	dfc00117 	ldw	ra,4(sp)
 8042ecc:	dc000017 	ldw	r16,0(sp)
 8042ed0:	dec00204 	addi	sp,sp,8
 8042ed4:	f800283a 	ret
 8042ed8:	00c20174 	movhi	r3,2053
 8042edc:	18e2fc17 	ldw	r3,-29712(r3)
 8042ee0:	183ff926 	beq	r3,zero,8042ec8 <_isatty_r+0x28>
 8042ee4:	80c00015 	stw	r3,0(r16)
 8042ee8:	dfc00117 	ldw	ra,4(sp)
 8042eec:	dc000017 	ldw	r16,0(sp)
 8042ef0:	dec00204 	addi	sp,sp,8
 8042ef4:	f800283a 	ret

08042ef8 <__divsi3>:
 8042ef8:	20001a16 	blt	r4,zero,8042f64 <__divsi3+0x6c>
 8042efc:	000f883a 	mov	r7,zero
 8042f00:	2800020e 	bge	r5,zero,8042f0c <__divsi3+0x14>
 8042f04:	014bc83a 	sub	r5,zero,r5
 8042f08:	39c0005c 	xori	r7,r7,1
 8042f0c:	200d883a 	mov	r6,r4
 8042f10:	00c00044 	movi	r3,1
 8042f14:	2900092e 	bgeu	r5,r4,8042f3c <__divsi3+0x44>
 8042f18:	00800804 	movi	r2,32
 8042f1c:	00c00044 	movi	r3,1
 8042f20:	00000106 	br	8042f28 <__divsi3+0x30>
 8042f24:	10001226 	beq	r2,zero,8042f70 <__divsi3+0x78>
 8042f28:	294b883a 	add	r5,r5,r5
 8042f2c:	10bfffc4 	addi	r2,r2,-1
 8042f30:	18c7883a 	add	r3,r3,r3
 8042f34:	293ffb36 	bltu	r5,r4,8042f24 <__divsi3+0x2c>
 8042f38:	18000d26 	beq	r3,zero,8042f70 <__divsi3+0x78>
 8042f3c:	0005883a 	mov	r2,zero
 8042f40:	31400236 	bltu	r6,r5,8042f4c <__divsi3+0x54>
 8042f44:	314dc83a 	sub	r6,r6,r5
 8042f48:	10c4b03a 	or	r2,r2,r3
 8042f4c:	1806d07a 	srli	r3,r3,1
 8042f50:	280ad07a 	srli	r5,r5,1
 8042f54:	183ffa1e 	bne	r3,zero,8042f40 <__divsi3+0x48>
 8042f58:	38000126 	beq	r7,zero,8042f60 <__divsi3+0x68>
 8042f5c:	0085c83a 	sub	r2,zero,r2
 8042f60:	f800283a 	ret
 8042f64:	0109c83a 	sub	r4,zero,r4
 8042f68:	01c00044 	movi	r7,1
 8042f6c:	003fe406 	br	8042f00 <__divsi3+0x8>
 8042f70:	0005883a 	mov	r2,zero
 8042f74:	003ff806 	br	8042f58 <__divsi3+0x60>

08042f78 <__modsi3>:
 8042f78:	20001716 	blt	r4,zero,8042fd8 <__modsi3+0x60>
 8042f7c:	000f883a 	mov	r7,zero
 8042f80:	2005883a 	mov	r2,r4
 8042f84:	2800010e 	bge	r5,zero,8042f8c <__modsi3+0x14>
 8042f88:	014bc83a 	sub	r5,zero,r5
 8042f8c:	00c00044 	movi	r3,1
 8042f90:	2900092e 	bgeu	r5,r4,8042fb8 <__modsi3+0x40>
 8042f94:	01800804 	movi	r6,32
 8042f98:	00c00044 	movi	r3,1
 8042f9c:	00000106 	br	8042fa4 <__modsi3+0x2c>
 8042fa0:	30001026 	beq	r6,zero,8042fe4 <__modsi3+0x6c>
 8042fa4:	294b883a 	add	r5,r5,r5
 8042fa8:	31bfffc4 	addi	r6,r6,-1
 8042fac:	18c7883a 	add	r3,r3,r3
 8042fb0:	293ffb36 	bltu	r5,r4,8042fa0 <__modsi3+0x28>
 8042fb4:	18000b26 	beq	r3,zero,8042fe4 <__modsi3+0x6c>
 8042fb8:	1806d07a 	srli	r3,r3,1
 8042fbc:	11400136 	bltu	r2,r5,8042fc4 <__modsi3+0x4c>
 8042fc0:	1145c83a 	sub	r2,r2,r5
 8042fc4:	280ad07a 	srli	r5,r5,1
 8042fc8:	183ffb1e 	bne	r3,zero,8042fb8 <__modsi3+0x40>
 8042fcc:	38000126 	beq	r7,zero,8042fd4 <__modsi3+0x5c>
 8042fd0:	0085c83a 	sub	r2,zero,r2
 8042fd4:	f800283a 	ret
 8042fd8:	0109c83a 	sub	r4,zero,r4
 8042fdc:	01c00044 	movi	r7,1
 8042fe0:	003fe706 	br	8042f80 <__modsi3+0x8>
 8042fe4:	2005883a 	mov	r2,r4
 8042fe8:	003ff806 	br	8042fcc <__modsi3+0x54>

08042fec <__udivsi3>:
 8042fec:	200d883a 	mov	r6,r4
 8042ff0:	2900152e 	bgeu	r5,r4,8043048 <__udivsi3+0x5c>
 8042ff4:	28001416 	blt	r5,zero,8043048 <__udivsi3+0x5c>
 8042ff8:	00800804 	movi	r2,32
 8042ffc:	00c00044 	movi	r3,1
 8043000:	00000206 	br	804300c <__udivsi3+0x20>
 8043004:	10000e26 	beq	r2,zero,8043040 <__udivsi3+0x54>
 8043008:	28000416 	blt	r5,zero,804301c <__udivsi3+0x30>
 804300c:	294b883a 	add	r5,r5,r5
 8043010:	10bfffc4 	addi	r2,r2,-1
 8043014:	18c7883a 	add	r3,r3,r3
 8043018:	293ffa36 	bltu	r5,r4,8043004 <__udivsi3+0x18>
 804301c:	18000826 	beq	r3,zero,8043040 <__udivsi3+0x54>
 8043020:	0005883a 	mov	r2,zero
 8043024:	31400236 	bltu	r6,r5,8043030 <__udivsi3+0x44>
 8043028:	314dc83a 	sub	r6,r6,r5
 804302c:	10c4b03a 	or	r2,r2,r3
 8043030:	1806d07a 	srli	r3,r3,1
 8043034:	280ad07a 	srli	r5,r5,1
 8043038:	183ffa1e 	bne	r3,zero,8043024 <__udivsi3+0x38>
 804303c:	f800283a 	ret
 8043040:	0005883a 	mov	r2,zero
 8043044:	f800283a 	ret
 8043048:	00c00044 	movi	r3,1
 804304c:	003ff406 	br	8043020 <__udivsi3+0x34>

08043050 <__umodsi3>:
 8043050:	2005883a 	mov	r2,r4
 8043054:	2900132e 	bgeu	r5,r4,80430a4 <__umodsi3+0x54>
 8043058:	28001216 	blt	r5,zero,80430a4 <__umodsi3+0x54>
 804305c:	01800804 	movi	r6,32
 8043060:	00c00044 	movi	r3,1
 8043064:	00000206 	br	8043070 <__umodsi3+0x20>
 8043068:	30000c26 	beq	r6,zero,804309c <__umodsi3+0x4c>
 804306c:	28000416 	blt	r5,zero,8043080 <__umodsi3+0x30>
 8043070:	294b883a 	add	r5,r5,r5
 8043074:	31bfffc4 	addi	r6,r6,-1
 8043078:	18c7883a 	add	r3,r3,r3
 804307c:	293ffa36 	bltu	r5,r4,8043068 <__umodsi3+0x18>
 8043080:	18000626 	beq	r3,zero,804309c <__umodsi3+0x4c>
 8043084:	1806d07a 	srli	r3,r3,1
 8043088:	11400136 	bltu	r2,r5,8043090 <__umodsi3+0x40>
 804308c:	1145c83a 	sub	r2,r2,r5
 8043090:	280ad07a 	srli	r5,r5,1
 8043094:	183ffb1e 	bne	r3,zero,8043084 <__umodsi3+0x34>
 8043098:	f800283a 	ret
 804309c:	2005883a 	mov	r2,r4
 80430a0:	f800283a 	ret
 80430a4:	00c00044 	movi	r3,1
 80430a8:	003ff606 	br	8043084 <__umodsi3+0x34>

080430ac <__mulsi3>:
 80430ac:	0005883a 	mov	r2,zero
 80430b0:	20000726 	beq	r4,zero,80430d0 <__mulsi3+0x24>
 80430b4:	20c0004c 	andi	r3,r4,1
 80430b8:	2008d07a 	srli	r4,r4,1
 80430bc:	18000126 	beq	r3,zero,80430c4 <__mulsi3+0x18>
 80430c0:	1145883a 	add	r2,r2,r5
 80430c4:	294b883a 	add	r5,r5,r5
 80430c8:	203ffa1e 	bne	r4,zero,80430b4 <__mulsi3+0x8>
 80430cc:	f800283a 	ret
 80430d0:	f800283a 	ret

080430d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80430d4:	defffe04 	addi	sp,sp,-8
 80430d8:	dfc00115 	stw	ra,4(sp)
 80430dc:	df000015 	stw	fp,0(sp)
 80430e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80430e4:	d0a00917 	ldw	r2,-32732(gp)
 80430e8:	10000326 	beq	r2,zero,80430f8 <alt_get_errno+0x24>
 80430ec:	d0a00917 	ldw	r2,-32732(gp)
 80430f0:	103ee83a 	callr	r2
 80430f4:	00000106 	br	80430fc <alt_get_errno+0x28>
 80430f8:	d0a6ac04 	addi	r2,gp,-25936
}
 80430fc:	e037883a 	mov	sp,fp
 8043100:	dfc00117 	ldw	ra,4(sp)
 8043104:	df000017 	ldw	fp,0(sp)
 8043108:	dec00204 	addi	sp,sp,8
 804310c:	f800283a 	ret

08043110 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8043110:	defffb04 	addi	sp,sp,-20
 8043114:	dfc00415 	stw	ra,16(sp)
 8043118:	df000315 	stw	fp,12(sp)
 804311c:	df000304 	addi	fp,sp,12
 8043120:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8043124:	e0bffd17 	ldw	r2,-12(fp)
 8043128:	10000916 	blt	r2,zero,8043150 <close+0x40>
 804312c:	e0fffd17 	ldw	r3,-12(fp)
 8043130:	1805883a 	mov	r2,r3
 8043134:	1085883a 	add	r2,r2,r2
 8043138:	10c5883a 	add	r2,r2,r3
 804313c:	100490ba 	slli	r2,r2,2
 8043140:	00c20134 	movhi	r3,2052
 8043144:	18d7d804 	addi	r3,r3,24416
 8043148:	10c5883a 	add	r2,r2,r3
 804314c:	00000106 	br	8043154 <close+0x44>
 8043150:	0005883a 	mov	r2,zero
 8043154:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 8043158:	e0bfff17 	ldw	r2,-4(fp)
 804315c:	10001926 	beq	r2,zero,80431c4 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8043160:	e0bfff17 	ldw	r2,-4(fp)
 8043164:	10800017 	ldw	r2,0(r2)
 8043168:	10800417 	ldw	r2,16(r2)
 804316c:	10000626 	beq	r2,zero,8043188 <close+0x78>
 8043170:	e0bfff17 	ldw	r2,-4(fp)
 8043174:	10800017 	ldw	r2,0(r2)
 8043178:	10800417 	ldw	r2,16(r2)
 804317c:	e13fff17 	ldw	r4,-4(fp)
 8043180:	103ee83a 	callr	r2
 8043184:	00000106 	br	804318c <close+0x7c>
 8043188:	0005883a 	mov	r2,zero
 804318c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8043190:	e13ffd17 	ldw	r4,-12(fp)
 8043194:	804380c0 	call	804380c <alt_release_fd>
    if (rval < 0)
 8043198:	e0bffe17 	ldw	r2,-8(fp)
 804319c:	1000070e 	bge	r2,zero,80431bc <close+0xac>
    {
      ALT_ERRNO = -rval;
 80431a0:	80430d40 	call	80430d4 <alt_get_errno>
 80431a4:	1007883a 	mov	r3,r2
 80431a8:	e0bffe17 	ldw	r2,-8(fp)
 80431ac:	0085c83a 	sub	r2,zero,r2
 80431b0:	18800015 	stw	r2,0(r3)
      return -1;
 80431b4:	00bfffc4 	movi	r2,-1
 80431b8:	00000706 	br	80431d8 <close+0xc8>
    }
    return 0;
 80431bc:	0005883a 	mov	r2,zero
 80431c0:	00000506 	br	80431d8 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80431c4:	80430d40 	call	80430d4 <alt_get_errno>
 80431c8:	1007883a 	mov	r3,r2
 80431cc:	00801444 	movi	r2,81
 80431d0:	18800015 	stw	r2,0(r3)
    return -1;
 80431d4:	00bfffc4 	movi	r2,-1
  }
}
 80431d8:	e037883a 	mov	sp,fp
 80431dc:	dfc00117 	ldw	ra,4(sp)
 80431e0:	df000017 	ldw	fp,0(sp)
 80431e4:	dec00204 	addi	sp,sp,8
 80431e8:	f800283a 	ret

080431ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80431ec:	defffc04 	addi	sp,sp,-16
 80431f0:	df000315 	stw	fp,12(sp)
 80431f4:	df000304 	addi	fp,sp,12
 80431f8:	e13fff15 	stw	r4,-4(fp)
 80431fc:	e17ffe15 	stw	r5,-8(fp)
 8043200:	e1bffd15 	stw	r6,-12(fp)
  return len;
 8043204:	e0bffd17 	ldw	r2,-12(fp)
}
 8043208:	e037883a 	mov	sp,fp
 804320c:	df000017 	ldw	fp,0(sp)
 8043210:	dec00104 	addi	sp,sp,4
 8043214:	f800283a 	ret

08043218 <alt_get_errno>:
{
 8043218:	defffe04 	addi	sp,sp,-8
 804321c:	dfc00115 	stw	ra,4(sp)
 8043220:	df000015 	stw	fp,0(sp)
 8043224:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8043228:	d0a00917 	ldw	r2,-32732(gp)
 804322c:	10000326 	beq	r2,zero,804323c <alt_get_errno+0x24>
 8043230:	d0a00917 	ldw	r2,-32732(gp)
 8043234:	103ee83a 	callr	r2
 8043238:	00000106 	br	8043240 <alt_get_errno+0x28>
 804323c:	d0a6ac04 	addi	r2,gp,-25936
}
 8043240:	e037883a 	mov	sp,fp
 8043244:	dfc00117 	ldw	ra,4(sp)
 8043248:	df000017 	ldw	fp,0(sp)
 804324c:	dec00204 	addi	sp,sp,8
 8043250:	f800283a 	ret

08043254 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8043254:	defffb04 	addi	sp,sp,-20
 8043258:	dfc00415 	stw	ra,16(sp)
 804325c:	df000315 	stw	fp,12(sp)
 8043260:	df000304 	addi	fp,sp,12
 8043264:	e13ffe15 	stw	r4,-8(fp)
 8043268:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 804326c:	e0bffe17 	ldw	r2,-8(fp)
 8043270:	10000916 	blt	r2,zero,8043298 <fstat+0x44>
 8043274:	e0fffe17 	ldw	r3,-8(fp)
 8043278:	1805883a 	mov	r2,r3
 804327c:	1085883a 	add	r2,r2,r2
 8043280:	10c5883a 	add	r2,r2,r3
 8043284:	100490ba 	slli	r2,r2,2
 8043288:	00c20134 	movhi	r3,2052
 804328c:	18d7d804 	addi	r3,r3,24416
 8043290:	10c5883a 	add	r2,r2,r3
 8043294:	00000106 	br	804329c <fstat+0x48>
 8043298:	0005883a 	mov	r2,zero
 804329c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 80432a0:	e0bfff17 	ldw	r2,-4(fp)
 80432a4:	10001026 	beq	r2,zero,80432e8 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80432a8:	e0bfff17 	ldw	r2,-4(fp)
 80432ac:	10800017 	ldw	r2,0(r2)
 80432b0:	10800817 	ldw	r2,32(r2)
 80432b4:	10000726 	beq	r2,zero,80432d4 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 80432b8:	e0bfff17 	ldw	r2,-4(fp)
 80432bc:	10800017 	ldw	r2,0(r2)
 80432c0:	10800817 	ldw	r2,32(r2)
 80432c4:	e17ffd17 	ldw	r5,-12(fp)
 80432c8:	e13fff17 	ldw	r4,-4(fp)
 80432cc:	103ee83a 	callr	r2
 80432d0:	00000a06 	br	80432fc <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80432d4:	e0bffd17 	ldw	r2,-12(fp)
 80432d8:	00c80004 	movi	r3,8192
 80432dc:	10c00115 	stw	r3,4(r2)
      return 0;
 80432e0:	0005883a 	mov	r2,zero
 80432e4:	00000506 	br	80432fc <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80432e8:	80432180 	call	8043218 <alt_get_errno>
 80432ec:	1007883a 	mov	r3,r2
 80432f0:	00801444 	movi	r2,81
 80432f4:	18800015 	stw	r2,0(r3)
    return -1;
 80432f8:	00bfffc4 	movi	r2,-1
  }
}
 80432fc:	e037883a 	mov	sp,fp
 8043300:	dfc00117 	ldw	ra,4(sp)
 8043304:	df000017 	ldw	fp,0(sp)
 8043308:	dec00204 	addi	sp,sp,8
 804330c:	f800283a 	ret

08043310 <alt_get_errno>:
{
 8043310:	defffe04 	addi	sp,sp,-8
 8043314:	dfc00115 	stw	ra,4(sp)
 8043318:	df000015 	stw	fp,0(sp)
 804331c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8043320:	d0a00917 	ldw	r2,-32732(gp)
 8043324:	10000326 	beq	r2,zero,8043334 <alt_get_errno+0x24>
 8043328:	d0a00917 	ldw	r2,-32732(gp)
 804332c:	103ee83a 	callr	r2
 8043330:	00000106 	br	8043338 <alt_get_errno+0x28>
 8043334:	d0a6ac04 	addi	r2,gp,-25936
}
 8043338:	e037883a 	mov	sp,fp
 804333c:	dfc00117 	ldw	ra,4(sp)
 8043340:	df000017 	ldw	fp,0(sp)
 8043344:	dec00204 	addi	sp,sp,8
 8043348:	f800283a 	ret

0804334c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 804334c:	deffea04 	addi	sp,sp,-88
 8043350:	dfc01515 	stw	ra,84(sp)
 8043354:	df001415 	stw	fp,80(sp)
 8043358:	df001404 	addi	fp,sp,80
 804335c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8043360:	e0bfec17 	ldw	r2,-80(fp)
 8043364:	10000916 	blt	r2,zero,804338c <isatty+0x40>
 8043368:	e0ffec17 	ldw	r3,-80(fp)
 804336c:	1805883a 	mov	r2,r3
 8043370:	1085883a 	add	r2,r2,r2
 8043374:	10c5883a 	add	r2,r2,r3
 8043378:	100490ba 	slli	r2,r2,2
 804337c:	00c20134 	movhi	r3,2052
 8043380:	18d7d804 	addi	r3,r3,24416
 8043384:	10c5883a 	add	r2,r2,r3
 8043388:	00000106 	br	8043390 <isatty+0x44>
 804338c:	0005883a 	mov	r2,zero
 8043390:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8043394:	e0bfff17 	ldw	r2,-4(fp)
 8043398:	10000e26 	beq	r2,zero,80433d4 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 804339c:	e0bfff17 	ldw	r2,-4(fp)
 80433a0:	10800017 	ldw	r2,0(r2)
 80433a4:	10800817 	ldw	r2,32(r2)
 80433a8:	1000021e 	bne	r2,zero,80433b4 <isatty+0x68>
    {
      return 1;
 80433ac:	00800044 	movi	r2,1
 80433b0:	00000d06 	br	80433e8 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80433b4:	e0bfed04 	addi	r2,fp,-76
 80433b8:	100b883a 	mov	r5,r2
 80433bc:	e13fec17 	ldw	r4,-80(fp)
 80433c0:	80432540 	call	8043254 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80433c4:	e0bfee17 	ldw	r2,-72(fp)
 80433c8:	10880020 	cmpeqi	r2,r2,8192
 80433cc:	10803fcc 	andi	r2,r2,255
 80433d0:	00000506 	br	80433e8 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80433d4:	80433100 	call	8043310 <alt_get_errno>
 80433d8:	1007883a 	mov	r3,r2
 80433dc:	00801444 	movi	r2,81
 80433e0:	18800015 	stw	r2,0(r3)
    return 0;
 80433e4:	0005883a 	mov	r2,zero
  }
}
 80433e8:	e037883a 	mov	sp,fp
 80433ec:	dfc00117 	ldw	ra,4(sp)
 80433f0:	df000017 	ldw	fp,0(sp)
 80433f4:	dec00204 	addi	sp,sp,8
 80433f8:	f800283a 	ret

080433fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80433fc:	defffc04 	addi	sp,sp,-16
 8043400:	df000315 	stw	fp,12(sp)
 8043404:	df000304 	addi	fp,sp,12
 8043408:	e13fff15 	stw	r4,-4(fp)
 804340c:	e17ffe15 	stw	r5,-8(fp)
 8043410:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 8043414:	e0fffe17 	ldw	r3,-8(fp)
 8043418:	e0bfff17 	ldw	r2,-4(fp)
 804341c:	18800c26 	beq	r3,r2,8043450 <alt_load_section+0x54>
  {
    while( to != end )
 8043420:	00000806 	br	8043444 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8043424:	e0ffff17 	ldw	r3,-4(fp)
 8043428:	18800104 	addi	r2,r3,4
 804342c:	e0bfff15 	stw	r2,-4(fp)
 8043430:	e0bffe17 	ldw	r2,-8(fp)
 8043434:	11000104 	addi	r4,r2,4
 8043438:	e13ffe15 	stw	r4,-8(fp)
 804343c:	18c00017 	ldw	r3,0(r3)
 8043440:	10c00015 	stw	r3,0(r2)
    while( to != end )
 8043444:	e0fffe17 	ldw	r3,-8(fp)
 8043448:	e0bffd17 	ldw	r2,-12(fp)
 804344c:	18bff51e 	bne	r3,r2,8043424 <alt_load_section+0x28>
    }
  }
}
 8043450:	0001883a 	nop
 8043454:	e037883a 	mov	sp,fp
 8043458:	df000017 	ldw	fp,0(sp)
 804345c:	dec00104 	addi	sp,sp,4
 8043460:	f800283a 	ret

08043464 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8043464:	defffe04 	addi	sp,sp,-8
 8043468:	dfc00115 	stw	ra,4(sp)
 804346c:	df000015 	stw	fp,0(sp)
 8043470:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8043474:	01820134 	movhi	r6,2052
 8043478:	319c5e04 	addi	r6,r6,29048
 804347c:	01420134 	movhi	r5,2052
 8043480:	2955c304 	addi	r5,r5,22284
 8043484:	01020134 	movhi	r4,2052
 8043488:	211c5e04 	addi	r4,r4,29048
 804348c:	80433fc0 	call	80433fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8043490:	01820134 	movhi	r6,2052
 8043494:	31808904 	addi	r6,r6,548
 8043498:	01420134 	movhi	r5,2052
 804349c:	29400804 	addi	r5,r5,32
 80434a0:	01020134 	movhi	r4,2052
 80434a4:	21000804 	addi	r4,r4,32
 80434a8:	80433fc0 	call	80433fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80434ac:	01820134 	movhi	r6,2052
 80434b0:	3195c304 	addi	r6,r6,22284
 80434b4:	01420134 	movhi	r5,2052
 80434b8:	2955b004 	addi	r5,r5,22208
 80434bc:	01020134 	movhi	r4,2052
 80434c0:	2115b004 	addi	r4,r4,22208
 80434c4:	80433fc0 	call	80433fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80434c8:	80447100 	call	8044710 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80434cc:	80448dc0 	call	80448dc <alt_icache_flush_all>
}
 80434d0:	0001883a 	nop
 80434d4:	e037883a 	mov	sp,fp
 80434d8:	dfc00117 	ldw	ra,4(sp)
 80434dc:	df000017 	ldw	fp,0(sp)
 80434e0:	dec00204 	addi	sp,sp,8
 80434e4:	f800283a 	ret

080434e8 <alt_get_errno>:
{
 80434e8:	defffe04 	addi	sp,sp,-8
 80434ec:	dfc00115 	stw	ra,4(sp)
 80434f0:	df000015 	stw	fp,0(sp)
 80434f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80434f8:	d0a00917 	ldw	r2,-32732(gp)
 80434fc:	10000326 	beq	r2,zero,804350c <alt_get_errno+0x24>
 8043500:	d0a00917 	ldw	r2,-32732(gp)
 8043504:	103ee83a 	callr	r2
 8043508:	00000106 	br	8043510 <alt_get_errno+0x28>
 804350c:	d0a6ac04 	addi	r2,gp,-25936
}
 8043510:	e037883a 	mov	sp,fp
 8043514:	dfc00117 	ldw	ra,4(sp)
 8043518:	df000017 	ldw	fp,0(sp)
 804351c:	dec00204 	addi	sp,sp,8
 8043520:	f800283a 	ret

08043524 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8043524:	defff904 	addi	sp,sp,-28
 8043528:	dfc00615 	stw	ra,24(sp)
 804352c:	df000515 	stw	fp,20(sp)
 8043530:	df000504 	addi	fp,sp,20
 8043534:	e13ffd15 	stw	r4,-12(fp)
 8043538:	e17ffc15 	stw	r5,-16(fp)
 804353c:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8043540:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8043544:	e0bffd17 	ldw	r2,-12(fp)
 8043548:	10000916 	blt	r2,zero,8043570 <lseek+0x4c>
 804354c:	e0fffd17 	ldw	r3,-12(fp)
 8043550:	1805883a 	mov	r2,r3
 8043554:	1085883a 	add	r2,r2,r2
 8043558:	10c5883a 	add	r2,r2,r3
 804355c:	100490ba 	slli	r2,r2,2
 8043560:	00c20134 	movhi	r3,2052
 8043564:	18d7d804 	addi	r3,r3,24416
 8043568:	10c5883a 	add	r2,r2,r3
 804356c:	00000106 	br	8043574 <lseek+0x50>
 8043570:	0005883a 	mov	r2,zero
 8043574:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 8043578:	e0bffe17 	ldw	r2,-8(fp)
 804357c:	10001026 	beq	r2,zero,80435c0 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8043580:	e0bffe17 	ldw	r2,-8(fp)
 8043584:	10800017 	ldw	r2,0(r2)
 8043588:	10800717 	ldw	r2,28(r2)
 804358c:	10000926 	beq	r2,zero,80435b4 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8043590:	e0bffe17 	ldw	r2,-8(fp)
 8043594:	10800017 	ldw	r2,0(r2)
 8043598:	10800717 	ldw	r2,28(r2)
 804359c:	e1bffb17 	ldw	r6,-20(fp)
 80435a0:	e17ffc17 	ldw	r5,-16(fp)
 80435a4:	e13ffe17 	ldw	r4,-8(fp)
 80435a8:	103ee83a 	callr	r2
 80435ac:	e0bfff15 	stw	r2,-4(fp)
 80435b0:	00000506 	br	80435c8 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 80435b4:	00bfde84 	movi	r2,-134
 80435b8:	e0bfff15 	stw	r2,-4(fp)
 80435bc:	00000206 	br	80435c8 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 80435c0:	00bfebc4 	movi	r2,-81
 80435c4:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 80435c8:	e0bfff17 	ldw	r2,-4(fp)
 80435cc:	1000070e 	bge	r2,zero,80435ec <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 80435d0:	80434e80 	call	80434e8 <alt_get_errno>
 80435d4:	1007883a 	mov	r3,r2
 80435d8:	e0bfff17 	ldw	r2,-4(fp)
 80435dc:	0085c83a 	sub	r2,zero,r2
 80435e0:	18800015 	stw	r2,0(r3)
    rc = -1;
 80435e4:	00bfffc4 	movi	r2,-1
 80435e8:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 80435ec:	e0bfff17 	ldw	r2,-4(fp)
}
 80435f0:	e037883a 	mov	sp,fp
 80435f4:	dfc00117 	ldw	ra,4(sp)
 80435f8:	df000017 	ldw	fp,0(sp)
 80435fc:	dec00204 	addi	sp,sp,8
 8043600:	f800283a 	ret

08043604 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8043604:	defffd04 	addi	sp,sp,-12
 8043608:	dfc00215 	stw	ra,8(sp)
 804360c:	df000115 	stw	fp,4(sp)
 8043610:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8043614:	0009883a 	mov	r4,zero
 8043618:	8043aa80 	call	8043aa8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 804361c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8043620:	8043ae40 	call	8043ae4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8043624:	01820134 	movhi	r6,2052
 8043628:	3195b904 	addi	r6,r6,22244
 804362c:	01420134 	movhi	r5,2052
 8043630:	2955b904 	addi	r5,r5,22244
 8043634:	01020134 	movhi	r4,2052
 8043638:	2115b904 	addi	r4,r4,22244
 804363c:	8044c680 	call	8044c68 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8043640:	80448140 	call	8044814 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8043644:	01020134 	movhi	r4,2052
 8043648:	21121e04 	addi	r4,r4,18552
 804364c:	80454140 	call	8045414 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8043650:	d0a6ad17 	ldw	r2,-25932(gp)
 8043654:	d0e6ae17 	ldw	r3,-25928(gp)
 8043658:	d126af17 	ldw	r4,-25924(gp)
 804365c:	200d883a 	mov	r6,r4
 8043660:	180b883a 	mov	r5,r3
 8043664:	1009883a 	mov	r4,r2
 8043668:	80402600 	call	8040260 <main>
 804366c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8043670:	01000044 	movi	r4,1
 8043674:	80431100 	call	8043110 <close>
  exit (result);
 8043678:	e13fff17 	ldw	r4,-4(fp)
 804367c:	80454280 	call	8045428 <exit>

08043680 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8043680:	defffe04 	addi	sp,sp,-8
 8043684:	df000115 	stw	fp,4(sp)
 8043688:	df000104 	addi	fp,sp,4
 804368c:	e13fff15 	stw	r4,-4(fp)
}
 8043690:	0001883a 	nop
 8043694:	e037883a 	mov	sp,fp
 8043698:	df000017 	ldw	fp,0(sp)
 804369c:	dec00104 	addi	sp,sp,4
 80436a0:	f800283a 	ret

080436a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80436a4:	defffe04 	addi	sp,sp,-8
 80436a8:	df000115 	stw	fp,4(sp)
 80436ac:	df000104 	addi	fp,sp,4
 80436b0:	e13fff15 	stw	r4,-4(fp)
}
 80436b4:	0001883a 	nop
 80436b8:	e037883a 	mov	sp,fp
 80436bc:	df000017 	ldw	fp,0(sp)
 80436c0:	dec00104 	addi	sp,sp,4
 80436c4:	f800283a 	ret

080436c8 <alt_get_errno>:
{
 80436c8:	defffe04 	addi	sp,sp,-8
 80436cc:	dfc00115 	stw	ra,4(sp)
 80436d0:	df000015 	stw	fp,0(sp)
 80436d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80436d8:	d0a00917 	ldw	r2,-32732(gp)
 80436dc:	10000326 	beq	r2,zero,80436ec <alt_get_errno+0x24>
 80436e0:	d0a00917 	ldw	r2,-32732(gp)
 80436e4:	103ee83a 	callr	r2
 80436e8:	00000106 	br	80436f0 <alt_get_errno+0x28>
 80436ec:	d0a6ac04 	addi	r2,gp,-25936
}
 80436f0:	e037883a 	mov	sp,fp
 80436f4:	dfc00117 	ldw	ra,4(sp)
 80436f8:	df000017 	ldw	fp,0(sp)
 80436fc:	dec00204 	addi	sp,sp,8
 8043700:	f800283a 	ret

08043704 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8043704:	defff904 	addi	sp,sp,-28
 8043708:	dfc00615 	stw	ra,24(sp)
 804370c:	df000515 	stw	fp,20(sp)
 8043710:	df000504 	addi	fp,sp,20
 8043714:	e13ffd15 	stw	r4,-12(fp)
 8043718:	e17ffc15 	stw	r5,-16(fp)
 804371c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8043720:	e0bffd17 	ldw	r2,-12(fp)
 8043724:	10000916 	blt	r2,zero,804374c <read+0x48>
 8043728:	e0fffd17 	ldw	r3,-12(fp)
 804372c:	1805883a 	mov	r2,r3
 8043730:	1085883a 	add	r2,r2,r2
 8043734:	10c5883a 	add	r2,r2,r3
 8043738:	100490ba 	slli	r2,r2,2
 804373c:	00c20134 	movhi	r3,2052
 8043740:	18d7d804 	addi	r3,r3,24416
 8043744:	10c5883a 	add	r2,r2,r3
 8043748:	00000106 	br	8043750 <read+0x4c>
 804374c:	0005883a 	mov	r2,zero
 8043750:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8043754:	e0bfff17 	ldw	r2,-4(fp)
 8043758:	10002226 	beq	r2,zero,80437e4 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 804375c:	e0bfff17 	ldw	r2,-4(fp)
 8043760:	10800217 	ldw	r2,8(r2)
 8043764:	108000cc 	andi	r2,r2,3
 8043768:	10800060 	cmpeqi	r2,r2,1
 804376c:	1000181e 	bne	r2,zero,80437d0 <read+0xcc>
        (fd->dev->read))
 8043770:	e0bfff17 	ldw	r2,-4(fp)
 8043774:	10800017 	ldw	r2,0(r2)
 8043778:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 804377c:	10001426 	beq	r2,zero,80437d0 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8043780:	e0bfff17 	ldw	r2,-4(fp)
 8043784:	10800017 	ldw	r2,0(r2)
 8043788:	10800517 	ldw	r2,20(r2)
 804378c:	e0fffb17 	ldw	r3,-20(fp)
 8043790:	180d883a 	mov	r6,r3
 8043794:	e17ffc17 	ldw	r5,-16(fp)
 8043798:	e13fff17 	ldw	r4,-4(fp)
 804379c:	103ee83a 	callr	r2
 80437a0:	e0bffe15 	stw	r2,-8(fp)
 80437a4:	e0bffe17 	ldw	r2,-8(fp)
 80437a8:	1000070e 	bge	r2,zero,80437c8 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 80437ac:	80436c80 	call	80436c8 <alt_get_errno>
 80437b0:	1007883a 	mov	r3,r2
 80437b4:	e0bffe17 	ldw	r2,-8(fp)
 80437b8:	0085c83a 	sub	r2,zero,r2
 80437bc:	18800015 	stw	r2,0(r3)
          return -1;
 80437c0:	00bfffc4 	movi	r2,-1
 80437c4:	00000c06 	br	80437f8 <read+0xf4>
        }
        return rval;
 80437c8:	e0bffe17 	ldw	r2,-8(fp)
 80437cc:	00000a06 	br	80437f8 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 80437d0:	80436c80 	call	80436c8 <alt_get_errno>
 80437d4:	1007883a 	mov	r3,r2
 80437d8:	00800344 	movi	r2,13
 80437dc:	18800015 	stw	r2,0(r3)
 80437e0:	00000406 	br	80437f4 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80437e4:	80436c80 	call	80436c8 <alt_get_errno>
 80437e8:	1007883a 	mov	r3,r2
 80437ec:	00801444 	movi	r2,81
 80437f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80437f4:	00bfffc4 	movi	r2,-1
}
 80437f8:	e037883a 	mov	sp,fp
 80437fc:	dfc00117 	ldw	ra,4(sp)
 8043800:	df000017 	ldw	fp,0(sp)
 8043804:	dec00204 	addi	sp,sp,8
 8043808:	f800283a 	ret

0804380c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 804380c:	defffe04 	addi	sp,sp,-8
 8043810:	df000115 	stw	fp,4(sp)
 8043814:	df000104 	addi	fp,sp,4
 8043818:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 804381c:	e0bfff17 	ldw	r2,-4(fp)
 8043820:	108000d0 	cmplti	r2,r2,3
 8043824:	1000101e 	bne	r2,zero,8043868 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 8043828:	e0ffff17 	ldw	r3,-4(fp)
 804382c:	1805883a 	mov	r2,r3
 8043830:	1085883a 	add	r2,r2,r2
 8043834:	10c5883a 	add	r2,r2,r3
 8043838:	100490ba 	slli	r2,r2,2
 804383c:	00c20134 	movhi	r3,2052
 8043840:	10c7883a 	add	r3,r2,r3
 8043844:	1817da15 	stw	zero,24424(r3)
    alt_fd_list[fd].dev      = 0;
 8043848:	e0ffff17 	ldw	r3,-4(fp)
 804384c:	1805883a 	mov	r2,r3
 8043850:	1085883a 	add	r2,r2,r2
 8043854:	10c5883a 	add	r2,r2,r3
 8043858:	100490ba 	slli	r2,r2,2
 804385c:	00c20134 	movhi	r3,2052
 8043860:	10c7883a 	add	r3,r2,r3
 8043864:	1817d815 	stw	zero,24416(r3)
  }
}
 8043868:	0001883a 	nop
 804386c:	e037883a 	mov	sp,fp
 8043870:	df000017 	ldw	fp,0(sp)
 8043874:	dec00104 	addi	sp,sp,4
 8043878:	f800283a 	ret

0804387c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 804387c:	defff904 	addi	sp,sp,-28
 8043880:	df000615 	stw	fp,24(sp)
 8043884:	df000604 	addi	fp,sp,24
 8043888:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 804388c:	0005303a 	rdctl	r2,status
 8043890:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8043894:	e0fffd17 	ldw	r3,-12(fp)
 8043898:	00bfff84 	movi	r2,-2
 804389c:	1884703a 	and	r2,r3,r2
 80438a0:	1001703a 	wrctl	status,r2
  return context;
 80438a4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 80438a8:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 80438ac:	d0a00a17 	ldw	r2,-32728(gp)
 80438b0:	10c000c4 	addi	r3,r2,3
 80438b4:	00bfff04 	movi	r2,-4
 80438b8:	1884703a 	and	r2,r3,r2
 80438bc:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 80438c0:	d0e00a17 	ldw	r3,-32728(gp)
 80438c4:	e0bffa17 	ldw	r2,-24(fp)
 80438c8:	1887883a 	add	r3,r3,r2
 80438cc:	008201f4 	movhi	r2,2055
 80438d0:	10a51304 	addi	r2,r2,-27572
 80438d4:	10c0072e 	bgeu	r2,r3,80438f4 <sbrk+0x78>
 80438d8:	e0bfff17 	ldw	r2,-4(fp)
 80438dc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80438e0:	e0bffc17 	ldw	r2,-16(fp)
 80438e4:	1001703a 	wrctl	status,r2
}
 80438e8:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80438ec:	00bfffc4 	movi	r2,-1
 80438f0:	00000c06 	br	8043924 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 80438f4:	d0a00a17 	ldw	r2,-32728(gp)
 80438f8:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 80438fc:	d0e00a17 	ldw	r3,-32728(gp)
 8043900:	e0bffa17 	ldw	r2,-24(fp)
 8043904:	1885883a 	add	r2,r3,r2
 8043908:	d0a00a15 	stw	r2,-32728(gp)
 804390c:	e0bfff17 	ldw	r2,-4(fp)
 8043910:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8043914:	e0bffb17 	ldw	r2,-20(fp)
 8043918:	1001703a 	wrctl	status,r2
}
 804391c:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8043920:	e0bffe17 	ldw	r2,-8(fp)
} 
 8043924:	e037883a 	mov	sp,fp
 8043928:	df000017 	ldw	fp,0(sp)
 804392c:	dec00104 	addi	sp,sp,4
 8043930:	f800283a 	ret

08043934 <alt_get_errno>:
{
 8043934:	defffe04 	addi	sp,sp,-8
 8043938:	dfc00115 	stw	ra,4(sp)
 804393c:	df000015 	stw	fp,0(sp)
 8043940:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8043944:	d0a00917 	ldw	r2,-32732(gp)
 8043948:	10000326 	beq	r2,zero,8043958 <alt_get_errno+0x24>
 804394c:	d0a00917 	ldw	r2,-32732(gp)
 8043950:	103ee83a 	callr	r2
 8043954:	00000106 	br	804395c <alt_get_errno+0x28>
 8043958:	d0a6ac04 	addi	r2,gp,-25936
}
 804395c:	e037883a 	mov	sp,fp
 8043960:	dfc00117 	ldw	ra,4(sp)
 8043964:	df000017 	ldw	fp,0(sp)
 8043968:	dec00204 	addi	sp,sp,8
 804396c:	f800283a 	ret

08043970 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8043970:	defff904 	addi	sp,sp,-28
 8043974:	dfc00615 	stw	ra,24(sp)
 8043978:	df000515 	stw	fp,20(sp)
 804397c:	df000504 	addi	fp,sp,20
 8043980:	e13ffd15 	stw	r4,-12(fp)
 8043984:	e17ffc15 	stw	r5,-16(fp)
 8043988:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 804398c:	e0bffd17 	ldw	r2,-12(fp)
 8043990:	10000916 	blt	r2,zero,80439b8 <write+0x48>
 8043994:	e0fffd17 	ldw	r3,-12(fp)
 8043998:	1805883a 	mov	r2,r3
 804399c:	1085883a 	add	r2,r2,r2
 80439a0:	10c5883a 	add	r2,r2,r3
 80439a4:	100490ba 	slli	r2,r2,2
 80439a8:	00c20134 	movhi	r3,2052
 80439ac:	18d7d804 	addi	r3,r3,24416
 80439b0:	10c5883a 	add	r2,r2,r3
 80439b4:	00000106 	br	80439bc <write+0x4c>
 80439b8:	0005883a 	mov	r2,zero
 80439bc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 80439c0:	e0bfff17 	ldw	r2,-4(fp)
 80439c4:	10002126 	beq	r2,zero,8043a4c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 80439c8:	e0bfff17 	ldw	r2,-4(fp)
 80439cc:	10800217 	ldw	r2,8(r2)
 80439d0:	108000cc 	andi	r2,r2,3
 80439d4:	10001826 	beq	r2,zero,8043a38 <write+0xc8>
 80439d8:	e0bfff17 	ldw	r2,-4(fp)
 80439dc:	10800017 	ldw	r2,0(r2)
 80439e0:	10800617 	ldw	r2,24(r2)
 80439e4:	10001426 	beq	r2,zero,8043a38 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80439e8:	e0bfff17 	ldw	r2,-4(fp)
 80439ec:	10800017 	ldw	r2,0(r2)
 80439f0:	10800617 	ldw	r2,24(r2)
 80439f4:	e0fffb17 	ldw	r3,-20(fp)
 80439f8:	180d883a 	mov	r6,r3
 80439fc:	e17ffc17 	ldw	r5,-16(fp)
 8043a00:	e13fff17 	ldw	r4,-4(fp)
 8043a04:	103ee83a 	callr	r2
 8043a08:	e0bffe15 	stw	r2,-8(fp)
 8043a0c:	e0bffe17 	ldw	r2,-8(fp)
 8043a10:	1000070e 	bge	r2,zero,8043a30 <write+0xc0>
      {
        ALT_ERRNO = -rval;
 8043a14:	80439340 	call	8043934 <alt_get_errno>
 8043a18:	1007883a 	mov	r3,r2
 8043a1c:	e0bffe17 	ldw	r2,-8(fp)
 8043a20:	0085c83a 	sub	r2,zero,r2
 8043a24:	18800015 	stw	r2,0(r3)
        return -1;
 8043a28:	00bfffc4 	movi	r2,-1
 8043a2c:	00000c06 	br	8043a60 <write+0xf0>
      }
      return rval;
 8043a30:	e0bffe17 	ldw	r2,-8(fp)
 8043a34:	00000a06 	br	8043a60 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8043a38:	80439340 	call	8043934 <alt_get_errno>
 8043a3c:	1007883a 	mov	r3,r2
 8043a40:	00800344 	movi	r2,13
 8043a44:	18800015 	stw	r2,0(r3)
 8043a48:	00000406 	br	8043a5c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8043a4c:	80439340 	call	8043934 <alt_get_errno>
 8043a50:	1007883a 	mov	r3,r2
 8043a54:	00801444 	movi	r2,81
 8043a58:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8043a5c:	00bfffc4 	movi	r2,-1
}
 8043a60:	e037883a 	mov	sp,fp
 8043a64:	dfc00117 	ldw	ra,4(sp)
 8043a68:	df000017 	ldw	fp,0(sp)
 8043a6c:	dec00204 	addi	sp,sp,8
 8043a70:	f800283a 	ret

08043a74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8043a74:	defffd04 	addi	sp,sp,-12
 8043a78:	dfc00215 	stw	ra,8(sp)
 8043a7c:	df000115 	stw	fp,4(sp)
 8043a80:	df000104 	addi	fp,sp,4
 8043a84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8043a88:	d1600604 	addi	r5,gp,-32744
 8043a8c:	e13fff17 	ldw	r4,-4(fp)
 8043a90:	804476c0 	call	804476c <alt_dev_llist_insert>
}
 8043a94:	e037883a 	mov	sp,fp
 8043a98:	dfc00117 	ldw	ra,4(sp)
 8043a9c:	df000017 	ldw	fp,0(sp)
 8043aa0:	dec00204 	addi	sp,sp,8
 8043aa4:	f800283a 	ret

08043aa8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8043aa8:	defffd04 	addi	sp,sp,-12
 8043aac:	dfc00215 	stw	ra,8(sp)
 8043ab0:	df000115 	stw	fp,4(sp)
 8043ab4:	df000104 	addi	fp,sp,4
 8043ab8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8043abc:	804512c0 	call	804512c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8043ac0:	00800044 	movi	r2,1
 8043ac4:	1001703a 	wrctl	status,r2
}
 8043ac8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 8043acc:	0001883a 	nop
 8043ad0:	e037883a 	mov	sp,fp
 8043ad4:	dfc00117 	ldw	ra,4(sp)
 8043ad8:	df000017 	ldw	fp,0(sp)
 8043adc:	dec00204 	addi	sp,sp,8
 8043ae0:	f800283a 	ret

08043ae4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8043ae4:	defffe04 	addi	sp,sp,-8
 8043ae8:	dfc00115 	stw	ra,4(sp)
 8043aec:	df000015 	stw	fp,0(sp)
 8043af0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8043af4:	000d883a 	mov	r6,zero
 8043af8:	000b883a 	mov	r5,zero
 8043afc:	01020134 	movhi	r4,2052
 8043b00:	21184204 	addi	r4,r4,24840
 8043b04:	8043c900 	call	8043c90 <altera_avalon_jtag_uart_init>
 8043b08:	01020134 	movhi	r4,2052
 8043b0c:	21183804 	addi	r4,r4,24800
 8043b10:	8043a740 	call	8043a74 <alt_dev_reg>
}
 8043b14:	0001883a 	nop
 8043b18:	e037883a 	mov	sp,fp
 8043b1c:	dfc00117 	ldw	ra,4(sp)
 8043b20:	df000017 	ldw	fp,0(sp)
 8043b24:	dec00204 	addi	sp,sp,8
 8043b28:	f800283a 	ret

08043b2c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8043b2c:	defffa04 	addi	sp,sp,-24
 8043b30:	dfc00515 	stw	ra,20(sp)
 8043b34:	df000415 	stw	fp,16(sp)
 8043b38:	df000404 	addi	fp,sp,16
 8043b3c:	e13ffe15 	stw	r4,-8(fp)
 8043b40:	e17ffd15 	stw	r5,-12(fp)
 8043b44:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8043b48:	e0bffe17 	ldw	r2,-8(fp)
 8043b4c:	10800017 	ldw	r2,0(r2)
 8043b50:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8043b54:	e0bfff17 	ldw	r2,-4(fp)
 8043b58:	10c00a04 	addi	r3,r2,40
 8043b5c:	e0bffe17 	ldw	r2,-8(fp)
 8043b60:	10800217 	ldw	r2,8(r2)
 8043b64:	100f883a 	mov	r7,r2
 8043b68:	e1bffc17 	ldw	r6,-16(fp)
 8043b6c:	e17ffd17 	ldw	r5,-12(fp)
 8043b70:	1809883a 	mov	r4,r3
 8043b74:	80441680 	call	8044168 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8043b78:	e037883a 	mov	sp,fp
 8043b7c:	dfc00117 	ldw	ra,4(sp)
 8043b80:	df000017 	ldw	fp,0(sp)
 8043b84:	dec00204 	addi	sp,sp,8
 8043b88:	f800283a 	ret

08043b8c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8043b8c:	defffa04 	addi	sp,sp,-24
 8043b90:	dfc00515 	stw	ra,20(sp)
 8043b94:	df000415 	stw	fp,16(sp)
 8043b98:	df000404 	addi	fp,sp,16
 8043b9c:	e13ffe15 	stw	r4,-8(fp)
 8043ba0:	e17ffd15 	stw	r5,-12(fp)
 8043ba4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8043ba8:	e0bffe17 	ldw	r2,-8(fp)
 8043bac:	10800017 	ldw	r2,0(r2)
 8043bb0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8043bb4:	e0bfff17 	ldw	r2,-4(fp)
 8043bb8:	10c00a04 	addi	r3,r2,40
 8043bbc:	e0bffe17 	ldw	r2,-8(fp)
 8043bc0:	10800217 	ldw	r2,8(r2)
 8043bc4:	100f883a 	mov	r7,r2
 8043bc8:	e1bffc17 	ldw	r6,-16(fp)
 8043bcc:	e17ffd17 	ldw	r5,-12(fp)
 8043bd0:	1809883a 	mov	r4,r3
 8043bd4:	80443880 	call	8044388 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8043bd8:	e037883a 	mov	sp,fp
 8043bdc:	dfc00117 	ldw	ra,4(sp)
 8043be0:	df000017 	ldw	fp,0(sp)
 8043be4:	dec00204 	addi	sp,sp,8
 8043be8:	f800283a 	ret

08043bec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8043bec:	defffc04 	addi	sp,sp,-16
 8043bf0:	dfc00315 	stw	ra,12(sp)
 8043bf4:	df000215 	stw	fp,8(sp)
 8043bf8:	df000204 	addi	fp,sp,8
 8043bfc:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8043c00:	e0bffe17 	ldw	r2,-8(fp)
 8043c04:	10800017 	ldw	r2,0(r2)
 8043c08:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8043c0c:	e0bfff17 	ldw	r2,-4(fp)
 8043c10:	10c00a04 	addi	r3,r2,40
 8043c14:	e0bffe17 	ldw	r2,-8(fp)
 8043c18:	10800217 	ldw	r2,8(r2)
 8043c1c:	100b883a 	mov	r5,r2
 8043c20:	1809883a 	mov	r4,r3
 8043c24:	804400c0 	call	804400c <altera_avalon_jtag_uart_close>
}
 8043c28:	e037883a 	mov	sp,fp
 8043c2c:	dfc00117 	ldw	ra,4(sp)
 8043c30:	df000017 	ldw	fp,0(sp)
 8043c34:	dec00204 	addi	sp,sp,8
 8043c38:	f800283a 	ret

08043c3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8043c3c:	defffa04 	addi	sp,sp,-24
 8043c40:	dfc00515 	stw	ra,20(sp)
 8043c44:	df000415 	stw	fp,16(sp)
 8043c48:	df000404 	addi	fp,sp,16
 8043c4c:	e13ffe15 	stw	r4,-8(fp)
 8043c50:	e17ffd15 	stw	r5,-12(fp)
 8043c54:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8043c58:	e0bffe17 	ldw	r2,-8(fp)
 8043c5c:	10800017 	ldw	r2,0(r2)
 8043c60:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8043c64:	e0bfff17 	ldw	r2,-4(fp)
 8043c68:	10800a04 	addi	r2,r2,40
 8043c6c:	e1bffc17 	ldw	r6,-16(fp)
 8043c70:	e17ffd17 	ldw	r5,-12(fp)
 8043c74:	1009883a 	mov	r4,r2
 8043c78:	80440740 	call	8044074 <altera_avalon_jtag_uart_ioctl>
}
 8043c7c:	e037883a 	mov	sp,fp
 8043c80:	dfc00117 	ldw	ra,4(sp)
 8043c84:	df000017 	ldw	fp,0(sp)
 8043c88:	dec00204 	addi	sp,sp,8
 8043c8c:	f800283a 	ret

08043c90 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8043c90:	defffa04 	addi	sp,sp,-24
 8043c94:	dfc00515 	stw	ra,20(sp)
 8043c98:	df000415 	stw	fp,16(sp)
 8043c9c:	df000404 	addi	fp,sp,16
 8043ca0:	e13fff15 	stw	r4,-4(fp)
 8043ca4:	e17ffe15 	stw	r5,-8(fp)
 8043ca8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8043cac:	e0bfff17 	ldw	r2,-4(fp)
 8043cb0:	00c00044 	movi	r3,1
 8043cb4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8043cb8:	e0bfff17 	ldw	r2,-4(fp)
 8043cbc:	10800017 	ldw	r2,0(r2)
 8043cc0:	10800104 	addi	r2,r2,4
 8043cc4:	1007883a 	mov	r3,r2
 8043cc8:	e0bfff17 	ldw	r2,-4(fp)
 8043ccc:	10800817 	ldw	r2,32(r2)
 8043cd0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8043cd4:	e0bffe17 	ldw	r2,-8(fp)
 8043cd8:	e0fffd17 	ldw	r3,-12(fp)
 8043cdc:	d8000015 	stw	zero,0(sp)
 8043ce0:	e1ffff17 	ldw	r7,-4(fp)
 8043ce4:	01820134 	movhi	r6,2052
 8043ce8:	318f5404 	addi	r6,r6,15696
 8043cec:	180b883a 	mov	r5,r3
 8043cf0:	1009883a 	mov	r4,r2
 8043cf4:	80448fc0 	call	80448fc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8043cf8:	e0bfff17 	ldw	r2,-4(fp)
 8043cfc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8043d00:	e0bfff17 	ldw	r2,-4(fp)
 8043d04:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8043d08:	d0e6b117 	ldw	r3,-25916(gp)
 8043d0c:	e1ffff17 	ldw	r7,-4(fp)
 8043d10:	01820134 	movhi	r6,2052
 8043d14:	318fd904 	addi	r6,r6,16228
 8043d18:	180b883a 	mov	r5,r3
 8043d1c:	1009883a 	mov	r4,r2
 8043d20:	80445b00 	call	80445b0 <alt_alarm_start>
 8043d24:	1000040e 	bge	r2,zero,8043d38 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8043d28:	e0ffff17 	ldw	r3,-4(fp)
 8043d2c:	00a00034 	movhi	r2,32768
 8043d30:	10bfffc4 	addi	r2,r2,-1
 8043d34:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8043d38:	0001883a 	nop
 8043d3c:	e037883a 	mov	sp,fp
 8043d40:	dfc00117 	ldw	ra,4(sp)
 8043d44:	df000017 	ldw	fp,0(sp)
 8043d48:	dec00204 	addi	sp,sp,8
 8043d4c:	f800283a 	ret

08043d50 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8043d50:	defff704 	addi	sp,sp,-36
 8043d54:	df000815 	stw	fp,32(sp)
 8043d58:	df000804 	addi	fp,sp,32
 8043d5c:	e13ff815 	stw	r4,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8043d60:	e0bff817 	ldw	r2,-32(fp)
 8043d64:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
 8043d68:	e0bffc17 	ldw	r2,-16(fp)
 8043d6c:	10800017 	ldw	r2,0(r2)
 8043d70:	e0bffb15 	stw	r2,-20(fp)
  unsigned int postflag=0;
 8043d74:	e03fff15 	stw	zero,-4(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8043d78:	e0bffb17 	ldw	r2,-20(fp)
 8043d7c:	10800104 	addi	r2,r2,4
 8043d80:	10800037 	ldwio	r2,0(r2)
 8043d84:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8043d88:	e0bffa17 	ldw	r2,-24(fp)
 8043d8c:	1080c00c 	andi	r2,r2,768
 8043d90:	10006e26 	beq	r2,zero,8043f4c <altera_avalon_jtag_uart_irq+0x1fc>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8043d94:	e0bffa17 	ldw	r2,-24(fp)
 8043d98:	1080400c 	andi	r2,r2,256
 8043d9c:	10003526 	beq	r2,zero,8043e74 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8043da0:	00800074 	movhi	r2,1
 8043da4:	e0bffe15 	stw	r2,-8(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8043da8:	e0bffc17 	ldw	r2,-16(fp)
 8043dac:	10800a17 	ldw	r2,40(r2)
 8043db0:	10800044 	addi	r2,r2,1
 8043db4:	1081ffcc 	andi	r2,r2,2047
 8043db8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 8043dbc:	e0bffc17 	ldw	r2,-16(fp)
 8043dc0:	10800b17 	ldw	r2,44(r2)
 8043dc4:	e0fff917 	ldw	r3,-28(fp)
 8043dc8:	18801526 	beq	r3,r2,8043e20 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8043dcc:	e0bffb17 	ldw	r2,-20(fp)
 8043dd0:	10800037 	ldwio	r2,0(r2)
 8043dd4:	e0bffe15 	stw	r2,-8(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8043dd8:	e0bffe17 	ldw	r2,-8(fp)
 8043ddc:	10a0000c 	andi	r2,r2,32768
 8043de0:	10001126 	beq	r2,zero,8043e28 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8043de4:	e0bffc17 	ldw	r2,-16(fp)
 8043de8:	10800a17 	ldw	r2,40(r2)
 8043dec:	e0fffe17 	ldw	r3,-8(fp)
 8043df0:	1809883a 	mov	r4,r3
 8043df4:	e0fffc17 	ldw	r3,-16(fp)
 8043df8:	1885883a 	add	r2,r3,r2
 8043dfc:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8043e00:	e0bffc17 	ldw	r2,-16(fp)
 8043e04:	10800a17 	ldw	r2,40(r2)
 8043e08:	10800044 	addi	r2,r2,1
 8043e0c:	10c1ffcc 	andi	r3,r2,2047
 8043e10:	e0bffc17 	ldw	r2,-16(fp)
 8043e14:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8043e18:	0001883a 	nop
      {
 8043e1c:	003fe206 	br	8043da8 <altera_avalon_jtag_uart_irq+0x58>
          break;
 8043e20:	0001883a 	nop
 8043e24:	00000106 	br	8043e2c <altera_avalon_jtag_uart_irq+0xdc>
          break;
 8043e28:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8043e2c:	e0bffe17 	ldw	r2,-8(fp)
 8043e30:	00ffffd4 	movui	r3,65535
 8043e34:	18800f2e 	bgeu	r3,r2,8043e74 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8043e38:	e0bffc17 	ldw	r2,-16(fp)
 8043e3c:	10c00817 	ldw	r3,32(r2)
 8043e40:	00bfff84 	movi	r2,-2
 8043e44:	1886703a 	and	r3,r3,r2
 8043e48:	e0bffc17 	ldw	r2,-16(fp)
 8043e4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8043e50:	e0bffb17 	ldw	r2,-20(fp)
 8043e54:	10800104 	addi	r2,r2,4
 8043e58:	1007883a 	mov	r3,r2
 8043e5c:	e0bffc17 	ldw	r2,-16(fp)
 8043e60:	10800817 	ldw	r2,32(r2)
 8043e64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8043e68:	e0bffb17 	ldw	r2,-20(fp)
 8043e6c:	10800104 	addi	r2,r2,4
 8043e70:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8043e74:	e0bffa17 	ldw	r2,-24(fp)
 8043e78:	1080800c 	andi	r2,r2,512
 8043e7c:	103fbe26 	beq	r2,zero,8043d78 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8043e80:	e0bffa17 	ldw	r2,-24(fp)
 8043e84:	1004d43a 	srli	r2,r2,16
 8043e88:	e0bffd15 	stw	r2,-12(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8043e8c:	00001506 	br	8043ee4 <altera_avalon_jtag_uart_irq+0x194>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8043e90:	e0bffb17 	ldw	r2,-20(fp)
 8043e94:	e0fffc17 	ldw	r3,-16(fp)
 8043e98:	18c00d17 	ldw	r3,52(r3)
 8043e9c:	e13ffc17 	ldw	r4,-16(fp)
 8043ea0:	20c7883a 	add	r3,r4,r3
 8043ea4:	18c20e03 	ldbu	r3,2104(r3)
 8043ea8:	18c03fcc 	andi	r3,r3,255
 8043eac:	18c0201c 	xori	r3,r3,128
 8043eb0:	18ffe004 	addi	r3,r3,-128
 8043eb4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8043eb8:	e0bffc17 	ldw	r2,-16(fp)
 8043ebc:	10800d17 	ldw	r2,52(r2)
 8043ec0:	10800044 	addi	r2,r2,1
 8043ec4:	10c1ffcc 	andi	r3,r2,2047
 8043ec8:	e0bffc17 	ldw	r2,-16(fp)
 8043ecc:	10c00d15 	stw	r3,52(r2)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
 8043ed0:	00800044 	movi	r2,1
 8043ed4:	e0bfff15 	stw	r2,-4(fp)

        space--;
 8043ed8:	e0bffd17 	ldw	r2,-12(fp)
 8043edc:	10bfffc4 	addi	r2,r2,-1
 8043ee0:	e0bffd15 	stw	r2,-12(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 8043ee4:	e0bffd17 	ldw	r2,-12(fp)
 8043ee8:	10000526 	beq	r2,zero,8043f00 <altera_avalon_jtag_uart_irq+0x1b0>
 8043eec:	e0bffc17 	ldw	r2,-16(fp)
 8043ef0:	10c00d17 	ldw	r3,52(r2)
 8043ef4:	e0bffc17 	ldw	r2,-16(fp)
 8043ef8:	10800c17 	ldw	r2,48(r2)
 8043efc:	18bfe41e 	bne	r3,r2,8043e90 <altera_avalon_jtag_uart_irq+0x140>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
 8043f00:	e0bffd17 	ldw	r2,-12(fp)
 8043f04:	103f9c26 	beq	r2,zero,8043d78 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8043f08:	e0bffc17 	ldw	r2,-16(fp)
 8043f0c:	10c00817 	ldw	r3,32(r2)
 8043f10:	00bfff44 	movi	r2,-3
 8043f14:	1886703a 	and	r3,r3,r2
 8043f18:	e0bffc17 	ldw	r2,-16(fp)
 8043f1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8043f20:	e0bffc17 	ldw	r2,-16(fp)
 8043f24:	10800017 	ldw	r2,0(r2)
 8043f28:	10800104 	addi	r2,r2,4
 8043f2c:	1007883a 	mov	r3,r2
 8043f30:	e0bffc17 	ldw	r2,-16(fp)
 8043f34:	10800817 	ldw	r2,32(r2)
 8043f38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8043f3c:	e0bffb17 	ldw	r2,-20(fp)
 8043f40:	10800104 	addi	r2,r2,4
 8043f44:	10800037 	ldwio	r2,0(r2)
  {
 8043f48:	003f8b06 	br	8043d78 <altera_avalon_jtag_uart_irq+0x28>
      break;
 8043f4c:	0001883a 	nop
      }
    }
  }
}
 8043f50:	0001883a 	nop
 8043f54:	e037883a 	mov	sp,fp
 8043f58:	df000017 	ldw	fp,0(sp)
 8043f5c:	dec00104 	addi	sp,sp,4
 8043f60:	f800283a 	ret

08043f64 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8043f64:	defffc04 	addi	sp,sp,-16
 8043f68:	df000315 	stw	fp,12(sp)
 8043f6c:	df000304 	addi	fp,sp,12
 8043f70:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8043f74:	e0bffd17 	ldw	r2,-12(fp)
 8043f78:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8043f7c:	e0bfff17 	ldw	r2,-4(fp)
 8043f80:	10800017 	ldw	r2,0(r2)
 8043f84:	10800104 	addi	r2,r2,4
 8043f88:	10800037 	ldwio	r2,0(r2)
 8043f8c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8043f90:	e0bffe17 	ldw	r2,-8(fp)
 8043f94:	1081000c 	andi	r2,r2,1024
 8043f98:	10000b26 	beq	r2,zero,8043fc8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8043f9c:	e0bfff17 	ldw	r2,-4(fp)
 8043fa0:	10800017 	ldw	r2,0(r2)
 8043fa4:	10800104 	addi	r2,r2,4
 8043fa8:	1007883a 	mov	r3,r2
 8043fac:	e0bfff17 	ldw	r2,-4(fp)
 8043fb0:	10800817 	ldw	r2,32(r2)
 8043fb4:	10810014 	ori	r2,r2,1024
 8043fb8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8043fbc:	e0bfff17 	ldw	r2,-4(fp)
 8043fc0:	10000915 	stw	zero,36(r2)
 8043fc4:	00000c06 	br	8043ff8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8043fc8:	e0bfff17 	ldw	r2,-4(fp)
 8043fcc:	10c00917 	ldw	r3,36(r2)
 8043fd0:	00a00034 	movhi	r2,32768
 8043fd4:	10bfff04 	addi	r2,r2,-4
 8043fd8:	10c00736 	bltu	r2,r3,8043ff8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 8043fdc:	e0bfff17 	ldw	r2,-4(fp)
 8043fe0:	10800917 	ldw	r2,36(r2)
 8043fe4:	10c00044 	addi	r3,r2,1
 8043fe8:	e0bfff17 	ldw	r2,-4(fp)
 8043fec:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 8043ff0:	e0bfff17 	ldw	r2,-4(fp)
 8043ff4:	10800917 	ldw	r2,36(r2)
 8043ff8:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8043ffc:	e037883a 	mov	sp,fp
 8044000:	df000017 	ldw	fp,0(sp)
 8044004:	dec00104 	addi	sp,sp,4
 8044008:	f800283a 	ret

0804400c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 804400c:	defffd04 	addi	sp,sp,-12
 8044010:	df000215 	stw	fp,8(sp)
 8044014:	df000204 	addi	fp,sp,8
 8044018:	e13fff15 	stw	r4,-4(fp)
 804401c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8044020:	00000506 	br	8044038 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8044024:	e0bffe17 	ldw	r2,-8(fp)
 8044028:	1090000c 	andi	r2,r2,16384
 804402c:	10000226 	beq	r2,zero,8044038 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8044030:	00bffd44 	movi	r2,-11
 8044034:	00000b06 	br	8044064 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8044038:	e0bfff17 	ldw	r2,-4(fp)
 804403c:	10c00d17 	ldw	r3,52(r2)
 8044040:	e0bfff17 	ldw	r2,-4(fp)
 8044044:	10800c17 	ldw	r2,48(r2)
 8044048:	18800526 	beq	r3,r2,8044060 <altera_avalon_jtag_uart_close+0x54>
 804404c:	e0bfff17 	ldw	r2,-4(fp)
 8044050:	10c00917 	ldw	r3,36(r2)
 8044054:	e0bfff17 	ldw	r2,-4(fp)
 8044058:	10800117 	ldw	r2,4(r2)
 804405c:	18bff136 	bltu	r3,r2,8044024 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 8044060:	0005883a 	mov	r2,zero
}
 8044064:	e037883a 	mov	sp,fp
 8044068:	df000017 	ldw	fp,0(sp)
 804406c:	dec00104 	addi	sp,sp,4
 8044070:	f800283a 	ret

08044074 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8044074:	defffa04 	addi	sp,sp,-24
 8044078:	df000515 	stw	fp,20(sp)
 804407c:	df000504 	addi	fp,sp,20
 8044080:	e13ffd15 	stw	r4,-12(fp)
 8044084:	e17ffc15 	stw	r5,-16(fp)
 8044088:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 804408c:	00bff9c4 	movi	r2,-25
 8044090:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 8044094:	e0bffc17 	ldw	r2,-16(fp)
 8044098:	109a8060 	cmpeqi	r2,r2,27137
 804409c:	1000041e 	bne	r2,zero,80440b0 <altera_avalon_jtag_uart_ioctl+0x3c>
 80440a0:	e0bffc17 	ldw	r2,-16(fp)
 80440a4:	109a80a0 	cmpeqi	r2,r2,27138
 80440a8:	1000181e 	bne	r2,zero,804410c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 80440ac:	00002906 	br	8044154 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 80440b0:	e0bffd17 	ldw	r2,-12(fp)
 80440b4:	10c00117 	ldw	r3,4(r2)
 80440b8:	00a00034 	movhi	r2,32768
 80440bc:	10bfffc4 	addi	r2,r2,-1
 80440c0:	18802126 	beq	r3,r2,8044148 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 80440c4:	e0bffb17 	ldw	r2,-20(fp)
 80440c8:	10800017 	ldw	r2,0(r2)
 80440cc:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80440d0:	e0bffe17 	ldw	r2,-8(fp)
 80440d4:	10800090 	cmplti	r2,r2,2
 80440d8:	1000061e 	bne	r2,zero,80440f4 <altera_avalon_jtag_uart_ioctl+0x80>
 80440dc:	e0fffe17 	ldw	r3,-8(fp)
 80440e0:	00a00034 	movhi	r2,32768
 80440e4:	10bfffc4 	addi	r2,r2,-1
 80440e8:	18800226 	beq	r3,r2,80440f4 <altera_avalon_jtag_uart_ioctl+0x80>
 80440ec:	e0bffe17 	ldw	r2,-8(fp)
 80440f0:	00000206 	br	80440fc <altera_avalon_jtag_uart_ioctl+0x88>
 80440f4:	00a00034 	movhi	r2,32768
 80440f8:	10bfff84 	addi	r2,r2,-2
 80440fc:	e0fffd17 	ldw	r3,-12(fp)
 8044100:	18800115 	stw	r2,4(r3)
      rc = 0;
 8044104:	e03fff15 	stw	zero,-4(fp)
    break;
 8044108:	00000f06 	br	8044148 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 804410c:	e0bffd17 	ldw	r2,-12(fp)
 8044110:	10c00117 	ldw	r3,4(r2)
 8044114:	00a00034 	movhi	r2,32768
 8044118:	10bfffc4 	addi	r2,r2,-1
 804411c:	18800c26 	beq	r3,r2,8044150 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8044120:	e0bffd17 	ldw	r2,-12(fp)
 8044124:	10c00917 	ldw	r3,36(r2)
 8044128:	e0bffd17 	ldw	r2,-12(fp)
 804412c:	10800117 	ldw	r2,4(r2)
 8044130:	1885803a 	cmpltu	r2,r3,r2
 8044134:	10c03fcc 	andi	r3,r2,255
 8044138:	e0bffb17 	ldw	r2,-20(fp)
 804413c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8044140:	e03fff15 	stw	zero,-4(fp)
    break;
 8044144:	00000206 	br	8044150 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 8044148:	0001883a 	nop
 804414c:	00000106 	br	8044154 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 8044150:	0001883a 	nop
  }

  return rc;
 8044154:	e0bfff17 	ldw	r2,-4(fp)
}
 8044158:	e037883a 	mov	sp,fp
 804415c:	df000017 	ldw	fp,0(sp)
 8044160:	dec00104 	addi	sp,sp,4
 8044164:	f800283a 	ret

08044168 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8044168:	defff304 	addi	sp,sp,-52
 804416c:	dfc00c15 	stw	ra,48(sp)
 8044170:	df000b15 	stw	fp,44(sp)
 8044174:	df000b04 	addi	fp,sp,44
 8044178:	e13ff815 	stw	r4,-32(fp)
 804417c:	e17ff715 	stw	r5,-36(fp)
 8044180:	e1bff615 	stw	r6,-40(fp)
 8044184:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 8044188:	e0bff717 	ldw	r2,-36(fp)
 804418c:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8044190:	00004706 	br	80442b0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8044194:	e0bff817 	ldw	r2,-32(fp)
 8044198:	10800a17 	ldw	r2,40(r2)
 804419c:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 80441a0:	e0bff817 	ldw	r2,-32(fp)
 80441a4:	10800b17 	ldw	r2,44(r2)
 80441a8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 80441ac:	e0fffd17 	ldw	r3,-12(fp)
 80441b0:	e0bffc17 	ldw	r2,-16(fp)
 80441b4:	18800536 	bltu	r3,r2,80441cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80441b8:	e0fffd17 	ldw	r3,-12(fp)
 80441bc:	e0bffc17 	ldw	r2,-16(fp)
 80441c0:	1885c83a 	sub	r2,r3,r2
 80441c4:	e0bffe15 	stw	r2,-8(fp)
 80441c8:	00000406 	br	80441dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80441cc:	00c20004 	movi	r3,2048
 80441d0:	e0bffc17 	ldw	r2,-16(fp)
 80441d4:	1885c83a 	sub	r2,r3,r2
 80441d8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 80441dc:	e0bffe17 	ldw	r2,-8(fp)
 80441e0:	10001e26 	beq	r2,zero,804425c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80441e4:	e0fff617 	ldw	r3,-40(fp)
 80441e8:	e0bffe17 	ldw	r2,-8(fp)
 80441ec:	1880022e 	bgeu	r3,r2,80441f8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80441f0:	e0bff617 	ldw	r2,-40(fp)
 80441f4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80441f8:	e0bff817 	ldw	r2,-32(fp)
 80441fc:	10c00e04 	addi	r3,r2,56
 8044200:	e0bffc17 	ldw	r2,-16(fp)
 8044204:	1885883a 	add	r2,r3,r2
 8044208:	e1bffe17 	ldw	r6,-8(fp)
 804420c:	100b883a 	mov	r5,r2
 8044210:	e13fff17 	ldw	r4,-4(fp)
 8044214:	80416300 	call	8041630 <memcpy>
      ptr   += n;
 8044218:	e0ffff17 	ldw	r3,-4(fp)
 804421c:	e0bffe17 	ldw	r2,-8(fp)
 8044220:	1885883a 	add	r2,r3,r2
 8044224:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 8044228:	e0fff617 	ldw	r3,-40(fp)
 804422c:	e0bffe17 	ldw	r2,-8(fp)
 8044230:	1885c83a 	sub	r2,r3,r2
 8044234:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8044238:	e0fffc17 	ldw	r3,-16(fp)
 804423c:	e0bffe17 	ldw	r2,-8(fp)
 8044240:	1885883a 	add	r2,r3,r2
 8044244:	10c1ffcc 	andi	r3,r2,2047
 8044248:	e0bff817 	ldw	r2,-32(fp)
 804424c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8044250:	e0bff617 	ldw	r2,-40(fp)
 8044254:	00bfcf16 	blt	zero,r2,8044194 <altera_avalon_jtag_uart_read+0x2c>
 8044258:	00000106 	br	8044260 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 804425c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 8044260:	e0ffff17 	ldw	r3,-4(fp)
 8044264:	e0bff717 	ldw	r2,-36(fp)
 8044268:	1880141e 	bne	r3,r2,80442bc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 804426c:	e0bff517 	ldw	r2,-44(fp)
 8044270:	1090000c 	andi	r2,r2,16384
 8044274:	1000131e 	bne	r2,zero,80442c4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8044278:	0001883a 	nop
 804427c:	e0bff817 	ldw	r2,-32(fp)
 8044280:	10800a17 	ldw	r2,40(r2)
 8044284:	e0fffd17 	ldw	r3,-12(fp)
 8044288:	1880051e 	bne	r3,r2,80442a0 <altera_avalon_jtag_uart_read+0x138>
 804428c:	e0bff817 	ldw	r2,-32(fp)
 8044290:	10c00917 	ldw	r3,36(r2)
 8044294:	e0bff817 	ldw	r2,-32(fp)
 8044298:	10800117 	ldw	r2,4(r2)
 804429c:	18bff736 	bltu	r3,r2,804427c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80442a0:	e0bff817 	ldw	r2,-32(fp)
 80442a4:	10800a17 	ldw	r2,40(r2)
 80442a8:	e0fffd17 	ldw	r3,-12(fp)
 80442ac:	18800726 	beq	r3,r2,80442cc <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 80442b0:	e0bff617 	ldw	r2,-40(fp)
 80442b4:	00bfb716 	blt	zero,r2,8044194 <altera_avalon_jtag_uart_read+0x2c>
 80442b8:	00000506 	br	80442d0 <altera_avalon_jtag_uart_read+0x168>
      break;
 80442bc:	0001883a 	nop
 80442c0:	00000306 	br	80442d0 <altera_avalon_jtag_uart_read+0x168>
      break;
 80442c4:	0001883a 	nop
 80442c8:	00000106 	br	80442d0 <altera_avalon_jtag_uart_read+0x168>
      break;
 80442cc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80442d0:	e0ffff17 	ldw	r3,-4(fp)
 80442d4:	e0bff717 	ldw	r2,-36(fp)
 80442d8:	18801926 	beq	r3,r2,8044340 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 80442dc:	0005303a 	rdctl	r2,status
 80442e0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80442e4:	e0fff917 	ldw	r3,-28(fp)
 80442e8:	00bfff84 	movi	r2,-2
 80442ec:	1884703a 	and	r2,r3,r2
 80442f0:	1001703a 	wrctl	status,r2
  return context;
 80442f4:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80442f8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80442fc:	e0bff817 	ldw	r2,-32(fp)
 8044300:	10800817 	ldw	r2,32(r2)
 8044304:	10c00054 	ori	r3,r2,1
 8044308:	e0bff817 	ldw	r2,-32(fp)
 804430c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8044310:	e0bff817 	ldw	r2,-32(fp)
 8044314:	10800017 	ldw	r2,0(r2)
 8044318:	10800104 	addi	r2,r2,4
 804431c:	1007883a 	mov	r3,r2
 8044320:	e0bff817 	ldw	r2,-32(fp)
 8044324:	10800817 	ldw	r2,32(r2)
 8044328:	18800035 	stwio	r2,0(r3)
 804432c:	e0bffb17 	ldw	r2,-20(fp)
 8044330:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8044334:	e0bffa17 	ldw	r2,-24(fp)
 8044338:	1001703a 	wrctl	status,r2
}
 804433c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8044340:	e0ffff17 	ldw	r3,-4(fp)
 8044344:	e0bff717 	ldw	r2,-36(fp)
 8044348:	18800426 	beq	r3,r2,804435c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 804434c:	e0ffff17 	ldw	r3,-4(fp)
 8044350:	e0bff717 	ldw	r2,-36(fp)
 8044354:	1885c83a 	sub	r2,r3,r2
 8044358:	00000606 	br	8044374 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 804435c:	e0bff517 	ldw	r2,-44(fp)
 8044360:	1090000c 	andi	r2,r2,16384
 8044364:	10000226 	beq	r2,zero,8044370 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 8044368:	00bffd44 	movi	r2,-11
 804436c:	00000106 	br	8044374 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8044370:	00bffec4 	movi	r2,-5
}
 8044374:	e037883a 	mov	sp,fp
 8044378:	dfc00117 	ldw	ra,4(sp)
 804437c:	df000017 	ldw	fp,0(sp)
 8044380:	dec00204 	addi	sp,sp,8
 8044384:	f800283a 	ret

08044388 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8044388:	defff304 	addi	sp,sp,-52
 804438c:	dfc00c15 	stw	ra,48(sp)
 8044390:	df000b15 	stw	fp,44(sp)
 8044394:	df000b04 	addi	fp,sp,44
 8044398:	e13ff815 	stw	r4,-32(fp)
 804439c:	e17ff715 	stw	r5,-36(fp)
 80443a0:	e1bff615 	stw	r6,-40(fp)
 80443a4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80443a8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80443ac:	e0bff717 	ldw	r2,-36(fp)
 80443b0:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80443b4:	00003706 	br	8044494 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80443b8:	e0bff817 	ldw	r2,-32(fp)
 80443bc:	10800c17 	ldw	r2,48(r2)
 80443c0:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 80443c4:	e0bff817 	ldw	r2,-32(fp)
 80443c8:	10800d17 	ldw	r2,52(r2)
 80443cc:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 80443d0:	e0fffc17 	ldw	r3,-16(fp)
 80443d4:	e0bfff17 	ldw	r2,-4(fp)
 80443d8:	1880062e 	bgeu	r3,r2,80443f4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80443dc:	e0ffff17 	ldw	r3,-4(fp)
 80443e0:	e0bffc17 	ldw	r2,-16(fp)
 80443e4:	1885c83a 	sub	r2,r3,r2
 80443e8:	10bfffc4 	addi	r2,r2,-1
 80443ec:	e0bffe15 	stw	r2,-8(fp)
 80443f0:	00000b06 	br	8044420 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80443f4:	e0bfff17 	ldw	r2,-4(fp)
 80443f8:	10000526 	beq	r2,zero,8044410 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80443fc:	00c20004 	movi	r3,2048
 8044400:	e0bffc17 	ldw	r2,-16(fp)
 8044404:	1885c83a 	sub	r2,r3,r2
 8044408:	e0bffe15 	stw	r2,-8(fp)
 804440c:	00000406 	br	8044420 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8044410:	00c1ffc4 	movi	r3,2047
 8044414:	e0bffc17 	ldw	r2,-16(fp)
 8044418:	1885c83a 	sub	r2,r3,r2
 804441c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8044420:	e0bffe17 	ldw	r2,-8(fp)
 8044424:	10001e26 	beq	r2,zero,80444a0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8044428:	e0fff617 	ldw	r3,-40(fp)
 804442c:	e0bffe17 	ldw	r2,-8(fp)
 8044430:	1880022e 	bgeu	r3,r2,804443c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8044434:	e0bff617 	ldw	r2,-40(fp)
 8044438:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 804443c:	e0bff817 	ldw	r2,-32(fp)
 8044440:	10c20e04 	addi	r3,r2,2104
 8044444:	e0bffc17 	ldw	r2,-16(fp)
 8044448:	1885883a 	add	r2,r3,r2
 804444c:	e1bffe17 	ldw	r6,-8(fp)
 8044450:	e17ff717 	ldw	r5,-36(fp)
 8044454:	1009883a 	mov	r4,r2
 8044458:	80416300 	call	8041630 <memcpy>
      ptr   += n;
 804445c:	e0fff717 	ldw	r3,-36(fp)
 8044460:	e0bffe17 	ldw	r2,-8(fp)
 8044464:	1885883a 	add	r2,r3,r2
 8044468:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 804446c:	e0fff617 	ldw	r3,-40(fp)
 8044470:	e0bffe17 	ldw	r2,-8(fp)
 8044474:	1885c83a 	sub	r2,r3,r2
 8044478:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 804447c:	e0fffc17 	ldw	r3,-16(fp)
 8044480:	e0bffe17 	ldw	r2,-8(fp)
 8044484:	1885883a 	add	r2,r3,r2
 8044488:	10c1ffcc 	andi	r3,r2,2047
 804448c:	e0bff817 	ldw	r2,-32(fp)
 8044490:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 8044494:	e0bff617 	ldw	r2,-40(fp)
 8044498:	00bfc716 	blt	zero,r2,80443b8 <altera_avalon_jtag_uart_write+0x30>
 804449c:	00000106 	br	80444a4 <altera_avalon_jtag_uart_write+0x11c>
        break;
 80444a0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 80444a4:	0005303a 	rdctl	r2,status
 80444a8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80444ac:	e0fff917 	ldw	r3,-28(fp)
 80444b0:	00bfff84 	movi	r2,-2
 80444b4:	1884703a 	and	r2,r3,r2
 80444b8:	1001703a 	wrctl	status,r2
  return context;
 80444bc:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80444c0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80444c4:	e0bff817 	ldw	r2,-32(fp)
 80444c8:	10800817 	ldw	r2,32(r2)
 80444cc:	10c00094 	ori	r3,r2,2
 80444d0:	e0bff817 	ldw	r2,-32(fp)
 80444d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80444d8:	e0bff817 	ldw	r2,-32(fp)
 80444dc:	10800017 	ldw	r2,0(r2)
 80444e0:	10800104 	addi	r2,r2,4
 80444e4:	1007883a 	mov	r3,r2
 80444e8:	e0bff817 	ldw	r2,-32(fp)
 80444ec:	10800817 	ldw	r2,32(r2)
 80444f0:	18800035 	stwio	r2,0(r3)
 80444f4:	e0bffb17 	ldw	r2,-20(fp)
 80444f8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80444fc:	e0bffa17 	ldw	r2,-24(fp)
 8044500:	1001703a 	wrctl	status,r2
}
 8044504:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8044508:	e0bff617 	ldw	r2,-40(fp)
 804450c:	0080100e 	bge	zero,r2,8044550 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8044510:	e0bff517 	ldw	r2,-44(fp)
 8044514:	1090000c 	andi	r2,r2,16384
 8044518:	1000101e 	bne	r2,zero,804455c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 804451c:	0001883a 	nop
 8044520:	e0bff817 	ldw	r2,-32(fp)
 8044524:	10800d17 	ldw	r2,52(r2)
 8044528:	e0ffff17 	ldw	r3,-4(fp)
 804452c:	1880051e 	bne	r3,r2,8044544 <altera_avalon_jtag_uart_write+0x1bc>
 8044530:	e0bff817 	ldw	r2,-32(fp)
 8044534:	10c00917 	ldw	r3,36(r2)
 8044538:	e0bff817 	ldw	r2,-32(fp)
 804453c:	10800117 	ldw	r2,4(r2)
 8044540:	18bff736 	bltu	r3,r2,8044520 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8044544:	e0bff817 	ldw	r2,-32(fp)
 8044548:	10800917 	ldw	r2,36(r2)
 804454c:	1000051e 	bne	r2,zero,8044564 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 8044550:	e0bff617 	ldw	r2,-40(fp)
 8044554:	00bfcf16 	blt	zero,r2,8044494 <altera_avalon_jtag_uart_write+0x10c>
 8044558:	00000306 	br	8044568 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 804455c:	0001883a 	nop
 8044560:	00000106 	br	8044568 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 8044564:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8044568:	e0fff717 	ldw	r3,-36(fp)
 804456c:	e0bffd17 	ldw	r2,-12(fp)
 8044570:	18800426 	beq	r3,r2,8044584 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 8044574:	e0fff717 	ldw	r3,-36(fp)
 8044578:	e0bffd17 	ldw	r2,-12(fp)
 804457c:	1885c83a 	sub	r2,r3,r2
 8044580:	00000606 	br	804459c <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 8044584:	e0bff517 	ldw	r2,-44(fp)
 8044588:	1090000c 	andi	r2,r2,16384
 804458c:	10000226 	beq	r2,zero,8044598 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 8044590:	00bffd44 	movi	r2,-11
 8044594:	00000106 	br	804459c <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8044598:	00bffec4 	movi	r2,-5
}
 804459c:	e037883a 	mov	sp,fp
 80445a0:	dfc00117 	ldw	ra,4(sp)
 80445a4:	df000017 	ldw	fp,0(sp)
 80445a8:	dec00204 	addi	sp,sp,8
 80445ac:	f800283a 	ret

080445b0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80445b0:	defff404 	addi	sp,sp,-48
 80445b4:	df000b15 	stw	fp,44(sp)
 80445b8:	df000b04 	addi	fp,sp,44
 80445bc:	e13ff815 	stw	r4,-32(fp)
 80445c0:	e17ff715 	stw	r5,-36(fp)
 80445c4:	e1bff615 	stw	r6,-40(fp)
 80445c8:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
 80445cc:	e03ffe15 	stw	zero,-8(fp)
 80445d0:	e03fff15 	stw	zero,-4(fp)
 80445d4:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
 80445d8:	10004826 	beq	r2,zero,80446fc <alt_alarm_start+0x14c>
  {
    if (alarm)
 80445dc:	e0bff817 	ldw	r2,-32(fp)
 80445e0:	10004426 	beq	r2,zero,80446f4 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
 80445e4:	e0bff817 	ldw	r2,-32(fp)
 80445e8:	e0fff617 	ldw	r3,-40(fp)
 80445ec:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
 80445f0:	e0bff817 	ldw	r2,-32(fp)
 80445f4:	e0fff517 	ldw	r3,-44(fp)
 80445f8:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 80445fc:	0005303a 	rdctl	r2,status
 8044600:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8044604:	e0fff917 	ldw	r3,-28(fp)
 8044608:	00bfff84 	movi	r2,-2
 804460c:	1884703a 	and	r2,r3,r2
 8044610:	1001703a 	wrctl	status,r2
  return context;
 8044614:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8044618:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 804461c:	d0a6b217 	ldw	r2,-25912(gp)
 8044620:	d0e6b317 	ldw	r3,-25908(gp)
      
      current_nticks = alt_nticks();
 8044624:	e0bffe15 	stw	r2,-8(fp)
 8044628:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
 804462c:	e0bff717 	ldw	r2,-36(fp)
 8044630:	1011883a 	mov	r8,r2
 8044634:	0013883a 	mov	r9,zero
 8044638:	e13ffe17 	ldw	r4,-8(fp)
 804463c:	e17fff17 	ldw	r5,-4(fp)
 8044640:	4105883a 	add	r2,r8,r4
 8044644:	120d803a 	cmpltu	r6,r2,r8
 8044648:	4947883a 	add	r3,r9,r5
 804464c:	30c9883a 	add	r4,r6,r3
 8044650:	2007883a 	mov	r3,r4
 8044654:	1009883a 	mov	r4,r2
 8044658:	180b883a 	mov	r5,r3
 804465c:	01800044 	movi	r6,1
 8044660:	000f883a 	mov	r7,zero
 8044664:	2185883a 	add	r2,r4,r6
 8044668:	1111803a 	cmpltu	r8,r2,r4
 804466c:	29c7883a 	add	r3,r5,r7
 8044670:	40c9883a 	add	r4,r8,r3
 8044674:	2007883a 	mov	r3,r4
 8044678:	1009883a 	mov	r4,r2
 804467c:	180b883a 	mov	r5,r3
 8044680:	e0bff817 	ldw	r2,-32(fp)
 8044684:	11000215 	stw	r4,8(r2)
 8044688:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 804468c:	e0bff817 	ldw	r2,-32(fp)
 8044690:	d0e00c04 	addi	r3,gp,-32720
 8044694:	e0fffb15 	stw	r3,-20(fp)
 8044698:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 804469c:	e0bffa17 	ldw	r2,-24(fp)
 80446a0:	e0fffb17 	ldw	r3,-20(fp)
 80446a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80446a8:	e0bffb17 	ldw	r2,-20(fp)
 80446ac:	10c00017 	ldw	r3,0(r2)
 80446b0:	e0bffa17 	ldw	r2,-24(fp)
 80446b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80446b8:	e0bffb17 	ldw	r2,-20(fp)
 80446bc:	10800017 	ldw	r2,0(r2)
 80446c0:	e0fffa17 	ldw	r3,-24(fp)
 80446c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80446c8:	e0bffb17 	ldw	r2,-20(fp)
 80446cc:	e0fffa17 	ldw	r3,-24(fp)
 80446d0:	10c00015 	stw	r3,0(r2)
}
 80446d4:	0001883a 	nop
 80446d8:	e0bffd17 	ldw	r2,-12(fp)
 80446dc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80446e0:	e0bffc17 	ldw	r2,-16(fp)
 80446e4:	1001703a 	wrctl	status,r2
}
 80446e8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 80446ec:	0005883a 	mov	r2,zero
 80446f0:	00000306 	br	8044700 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
 80446f4:	00bffa84 	movi	r2,-22
 80446f8:	00000106 	br	8044700 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
 80446fc:	00bfde84 	movi	r2,-134
  }
}
 8044700:	e037883a 	mov	sp,fp
 8044704:	df000017 	ldw	fp,0(sp)
 8044708:	dec00104 	addi	sp,sp,4
 804470c:	f800283a 	ret

08044710 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8044710:	deffff04 	addi	sp,sp,-4
 8044714:	df000015 	stw	fp,0(sp)
 8044718:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 804471c:	0001883a 	nop
 8044720:	e037883a 	mov	sp,fp
 8044724:	df000017 	ldw	fp,0(sp)
 8044728:	dec00104 	addi	sp,sp,4
 804472c:	f800283a 	ret

08044730 <alt_get_errno>:
{
 8044730:	defffe04 	addi	sp,sp,-8
 8044734:	dfc00115 	stw	ra,4(sp)
 8044738:	df000015 	stw	fp,0(sp)
 804473c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8044740:	d0a00917 	ldw	r2,-32732(gp)
 8044744:	10000326 	beq	r2,zero,8044754 <alt_get_errno+0x24>
 8044748:	d0a00917 	ldw	r2,-32732(gp)
 804474c:	103ee83a 	callr	r2
 8044750:	00000106 	br	8044758 <alt_get_errno+0x28>
 8044754:	d0a6ac04 	addi	r2,gp,-25936
}
 8044758:	e037883a 	mov	sp,fp
 804475c:	dfc00117 	ldw	ra,4(sp)
 8044760:	df000017 	ldw	fp,0(sp)
 8044764:	dec00204 	addi	sp,sp,8
 8044768:	f800283a 	ret

0804476c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 804476c:	defffa04 	addi	sp,sp,-24
 8044770:	dfc00515 	stw	ra,20(sp)
 8044774:	df000415 	stw	fp,16(sp)
 8044778:	df000404 	addi	fp,sp,16
 804477c:	e13ffd15 	stw	r4,-12(fp)
 8044780:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8044784:	e0bffd17 	ldw	r2,-12(fp)
 8044788:	10000326 	beq	r2,zero,8044798 <alt_dev_llist_insert+0x2c>
 804478c:	e0bffd17 	ldw	r2,-12(fp)
 8044790:	10800217 	ldw	r2,8(r2)
 8044794:	1000061e 	bne	r2,zero,80447b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8044798:	80447300 	call	8044730 <alt_get_errno>
 804479c:	1007883a 	mov	r3,r2
 80447a0:	00800584 	movi	r2,22
 80447a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80447a8:	00bffa84 	movi	r2,-22
 80447ac:	00001406 	br	8044800 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80447b0:	e0bffd17 	ldw	r2,-12(fp)
 80447b4:	e0fffc17 	ldw	r3,-16(fp)
 80447b8:	e0ffff15 	stw	r3,-4(fp)
 80447bc:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 80447c0:	e0bffe17 	ldw	r2,-8(fp)
 80447c4:	e0ffff17 	ldw	r3,-4(fp)
 80447c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80447cc:	e0bfff17 	ldw	r2,-4(fp)
 80447d0:	10c00017 	ldw	r3,0(r2)
 80447d4:	e0bffe17 	ldw	r2,-8(fp)
 80447d8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 80447dc:	e0bfff17 	ldw	r2,-4(fp)
 80447e0:	10800017 	ldw	r2,0(r2)
 80447e4:	e0fffe17 	ldw	r3,-8(fp)
 80447e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80447ec:	e0bfff17 	ldw	r2,-4(fp)
 80447f0:	e0fffe17 	ldw	r3,-8(fp)
 80447f4:	10c00015 	stw	r3,0(r2)
}
 80447f8:	0001883a 	nop

  return 0;  
 80447fc:	0005883a 	mov	r2,zero
}
 8044800:	e037883a 	mov	sp,fp
 8044804:	dfc00117 	ldw	ra,4(sp)
 8044808:	df000017 	ldw	fp,0(sp)
 804480c:	dec00204 	addi	sp,sp,8
 8044810:	f800283a 	ret

08044814 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8044814:	defffd04 	addi	sp,sp,-12
 8044818:	dfc00215 	stw	ra,8(sp)
 804481c:	df000115 	stw	fp,4(sp)
 8044820:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8044824:	00820134 	movhi	r2,2052
 8044828:	1095af04 	addi	r2,r2,22204
 804482c:	e0bfff15 	stw	r2,-4(fp)
 8044830:	00000606 	br	804484c <_do_ctors+0x38>
        (*ctor) (); 
 8044834:	e0bfff17 	ldw	r2,-4(fp)
 8044838:	10800017 	ldw	r2,0(r2)
 804483c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8044840:	e0bfff17 	ldw	r2,-4(fp)
 8044844:	10bfff04 	addi	r2,r2,-4
 8044848:	e0bfff15 	stw	r2,-4(fp)
 804484c:	e0ffff17 	ldw	r3,-4(fp)
 8044850:	00820134 	movhi	r2,2052
 8044854:	1095b004 	addi	r2,r2,22208
 8044858:	18bff62e 	bgeu	r3,r2,8044834 <_do_ctors+0x20>
}
 804485c:	0001883a 	nop
 8044860:	0001883a 	nop
 8044864:	e037883a 	mov	sp,fp
 8044868:	dfc00117 	ldw	ra,4(sp)
 804486c:	df000017 	ldw	fp,0(sp)
 8044870:	dec00204 	addi	sp,sp,8
 8044874:	f800283a 	ret

08044878 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8044878:	defffd04 	addi	sp,sp,-12
 804487c:	dfc00215 	stw	ra,8(sp)
 8044880:	df000115 	stw	fp,4(sp)
 8044884:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8044888:	00820134 	movhi	r2,2052
 804488c:	1095af04 	addi	r2,r2,22204
 8044890:	e0bfff15 	stw	r2,-4(fp)
 8044894:	00000606 	br	80448b0 <_do_dtors+0x38>
        (*dtor) (); 
 8044898:	e0bfff17 	ldw	r2,-4(fp)
 804489c:	10800017 	ldw	r2,0(r2)
 80448a0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80448a4:	e0bfff17 	ldw	r2,-4(fp)
 80448a8:	10bfff04 	addi	r2,r2,-4
 80448ac:	e0bfff15 	stw	r2,-4(fp)
 80448b0:	e0ffff17 	ldw	r3,-4(fp)
 80448b4:	00820134 	movhi	r2,2052
 80448b8:	1095b004 	addi	r2,r2,22208
 80448bc:	18bff62e 	bgeu	r3,r2,8044898 <_do_dtors+0x20>
}
 80448c0:	0001883a 	nop
 80448c4:	0001883a 	nop
 80448c8:	e037883a 	mov	sp,fp
 80448cc:	dfc00117 	ldw	ra,4(sp)
 80448d0:	df000017 	ldw	fp,0(sp)
 80448d4:	dec00204 	addi	sp,sp,8
 80448d8:	f800283a 	ret

080448dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80448dc:	deffff04 	addi	sp,sp,-4
 80448e0:	df000015 	stw	fp,0(sp)
 80448e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80448e8:	0001883a 	nop
 80448ec:	e037883a 	mov	sp,fp
 80448f0:	df000017 	ldw	fp,0(sp)
 80448f4:	dec00104 	addi	sp,sp,4
 80448f8:	f800283a 	ret

080448fc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80448fc:	defff904 	addi	sp,sp,-28
 8044900:	dfc00615 	stw	ra,24(sp)
 8044904:	df000515 	stw	fp,20(sp)
 8044908:	df000504 	addi	fp,sp,20
 804490c:	e13fff15 	stw	r4,-4(fp)
 8044910:	e17ffe15 	stw	r5,-8(fp)
 8044914:	e1bffd15 	stw	r6,-12(fp)
 8044918:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 804491c:	e0800217 	ldw	r2,8(fp)
 8044920:	d8800015 	stw	r2,0(sp)
 8044924:	e1fffc17 	ldw	r7,-16(fp)
 8044928:	e1bffd17 	ldw	r6,-12(fp)
 804492c:	e17ffe17 	ldw	r5,-8(fp)
 8044930:	e13fff17 	ldw	r4,-4(fp)
 8044934:	8044aac0 	call	8044aac <alt_iic_isr_register>
}  
 8044938:	e037883a 	mov	sp,fp
 804493c:	dfc00117 	ldw	ra,4(sp)
 8044940:	df000017 	ldw	fp,0(sp)
 8044944:	dec00204 	addi	sp,sp,8
 8044948:	f800283a 	ret

0804494c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 804494c:	defff904 	addi	sp,sp,-28
 8044950:	df000615 	stw	fp,24(sp)
 8044954:	df000604 	addi	fp,sp,24
 8044958:	e13ffb15 	stw	r4,-20(fp)
 804495c:	e17ffa15 	stw	r5,-24(fp)
 8044960:	e0bffa17 	ldw	r2,-24(fp)
 8044964:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8044968:	0005303a 	rdctl	r2,status
 804496c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8044970:	e0fffe17 	ldw	r3,-8(fp)
 8044974:	00bfff84 	movi	r2,-2
 8044978:	1884703a 	and	r2,r3,r2
 804497c:	1001703a 	wrctl	status,r2
  return context;
 8044980:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8044984:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8044988:	00c00044 	movi	r3,1
 804498c:	e0bfff17 	ldw	r2,-4(fp)
 8044990:	1884983a 	sll	r2,r3,r2
 8044994:	1007883a 	mov	r3,r2
 8044998:	d0a6b017 	ldw	r2,-25920(gp)
 804499c:	1884b03a 	or	r2,r3,r2
 80449a0:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80449a4:	d0a6b017 	ldw	r2,-25920(gp)
 80449a8:	100170fa 	wrctl	ienable,r2
 80449ac:	e0bffd17 	ldw	r2,-12(fp)
 80449b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80449b4:	e0bffc17 	ldw	r2,-16(fp)
 80449b8:	1001703a 	wrctl	status,r2
}
 80449bc:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 80449c0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 80449c4:	e037883a 	mov	sp,fp
 80449c8:	df000017 	ldw	fp,0(sp)
 80449cc:	dec00104 	addi	sp,sp,4
 80449d0:	f800283a 	ret

080449d4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80449d4:	defff904 	addi	sp,sp,-28
 80449d8:	df000615 	stw	fp,24(sp)
 80449dc:	df000604 	addi	fp,sp,24
 80449e0:	e13ffb15 	stw	r4,-20(fp)
 80449e4:	e17ffa15 	stw	r5,-24(fp)
 80449e8:	e0bffa17 	ldw	r2,-24(fp)
 80449ec:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 80449f0:	0005303a 	rdctl	r2,status
 80449f4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80449f8:	e0fffe17 	ldw	r3,-8(fp)
 80449fc:	00bfff84 	movi	r2,-2
 8044a00:	1884703a 	and	r2,r3,r2
 8044a04:	1001703a 	wrctl	status,r2
  return context;
 8044a08:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 8044a0c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 8044a10:	00c00044 	movi	r3,1
 8044a14:	e0bfff17 	ldw	r2,-4(fp)
 8044a18:	1884983a 	sll	r2,r3,r2
 8044a1c:	0084303a 	nor	r2,zero,r2
 8044a20:	1007883a 	mov	r3,r2
 8044a24:	d0a6b017 	ldw	r2,-25920(gp)
 8044a28:	1884703a 	and	r2,r3,r2
 8044a2c:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8044a30:	d0a6b017 	ldw	r2,-25920(gp)
 8044a34:	100170fa 	wrctl	ienable,r2
 8044a38:	e0bffd17 	ldw	r2,-12(fp)
 8044a3c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8044a40:	e0bffc17 	ldw	r2,-16(fp)
 8044a44:	1001703a 	wrctl	status,r2
}
 8044a48:	0001883a 	nop
  return 0;
 8044a4c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8044a50:	e037883a 	mov	sp,fp
 8044a54:	df000017 	ldw	fp,0(sp)
 8044a58:	dec00104 	addi	sp,sp,4
 8044a5c:	f800283a 	ret

08044a60 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8044a60:	defffc04 	addi	sp,sp,-16
 8044a64:	df000315 	stw	fp,12(sp)
 8044a68:	df000304 	addi	fp,sp,12
 8044a6c:	e13ffe15 	stw	r4,-8(fp)
 8044a70:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8044a74:	000530fa 	rdctl	r2,ienable
 8044a78:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8044a7c:	00c00044 	movi	r3,1
 8044a80:	e0bffd17 	ldw	r2,-12(fp)
 8044a84:	1884983a 	sll	r2,r3,r2
 8044a88:	1007883a 	mov	r3,r2
 8044a8c:	e0bfff17 	ldw	r2,-4(fp)
 8044a90:	1884703a 	and	r2,r3,r2
 8044a94:	1004c03a 	cmpne	r2,r2,zero
 8044a98:	10803fcc 	andi	r2,r2,255
}
 8044a9c:	e037883a 	mov	sp,fp
 8044aa0:	df000017 	ldw	fp,0(sp)
 8044aa4:	dec00104 	addi	sp,sp,4
 8044aa8:	f800283a 	ret

08044aac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8044aac:	defff504 	addi	sp,sp,-44
 8044ab0:	dfc00a15 	stw	ra,40(sp)
 8044ab4:	df000915 	stw	fp,36(sp)
 8044ab8:	df000904 	addi	fp,sp,36
 8044abc:	e13ffa15 	stw	r4,-24(fp)
 8044ac0:	e17ff915 	stw	r5,-28(fp)
 8044ac4:	e1bff815 	stw	r6,-32(fp)
 8044ac8:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 8044acc:	00bffa84 	movi	r2,-22
 8044ad0:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8044ad4:	e0bff917 	ldw	r2,-28(fp)
 8044ad8:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8044adc:	e0bffe17 	ldw	r2,-8(fp)
 8044ae0:	10800808 	cmpgei	r2,r2,32
 8044ae4:	1000251e 	bne	r2,zero,8044b7c <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 8044ae8:	0005303a 	rdctl	r2,status
 8044aec:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8044af0:	e0fffc17 	ldw	r3,-16(fp)
 8044af4:	00bfff84 	movi	r2,-2
 8044af8:	1884703a 	and	r2,r3,r2
 8044afc:	1001703a 	wrctl	status,r2
  return context;
 8044b00:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8044b04:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 8044b08:	e0bffe17 	ldw	r2,-8(fp)
 8044b0c:	100890fa 	slli	r4,r2,3
 8044b10:	e0fff817 	ldw	r3,-32(fp)
 8044b14:	00820174 	movhi	r2,2053
 8044b18:	2085883a 	add	r2,r4,r2
 8044b1c:	10e30f15 	stw	r3,-29636(r2)
    alt_irq[id].context = isr_context;
 8044b20:	e0bffe17 	ldw	r2,-8(fp)
 8044b24:	100890fa 	slli	r4,r2,3
 8044b28:	e0fff717 	ldw	r3,-36(fp)
 8044b2c:	00820174 	movhi	r2,2053
 8044b30:	2085883a 	add	r2,r4,r2
 8044b34:	10e31015 	stw	r3,-29632(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8044b38:	e0bff817 	ldw	r2,-32(fp)
 8044b3c:	10000526 	beq	r2,zero,8044b54 <alt_iic_isr_register+0xa8>
 8044b40:	e0bffe17 	ldw	r2,-8(fp)
 8044b44:	100b883a 	mov	r5,r2
 8044b48:	e13ffa17 	ldw	r4,-24(fp)
 8044b4c:	804494c0 	call	804494c <alt_ic_irq_enable>
 8044b50:	00000406 	br	8044b64 <alt_iic_isr_register+0xb8>
 8044b54:	e0bffe17 	ldw	r2,-8(fp)
 8044b58:	100b883a 	mov	r5,r2
 8044b5c:	e13ffa17 	ldw	r4,-24(fp)
 8044b60:	80449d40 	call	80449d4 <alt_ic_irq_disable>
 8044b64:	e0bfff15 	stw	r2,-4(fp)
 8044b68:	e0bffd17 	ldw	r2,-12(fp)
 8044b6c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8044b70:	e0bffb17 	ldw	r2,-20(fp)
 8044b74:	1001703a 	wrctl	status,r2
}
 8044b78:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 8044b7c:	e0bfff17 	ldw	r2,-4(fp)
}
 8044b80:	e037883a 	mov	sp,fp
 8044b84:	dfc00117 	ldw	ra,4(sp)
 8044b88:	df000017 	ldw	fp,0(sp)
 8044b8c:	dec00204 	addi	sp,sp,8
 8044b90:	f800283a 	ret

08044b94 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8044b94:	defff904 	addi	sp,sp,-28
 8044b98:	dfc00615 	stw	ra,24(sp)
 8044b9c:	df000515 	stw	fp,20(sp)
 8044ba0:	df000504 	addi	fp,sp,20
 8044ba4:	e13ffe15 	stw	r4,-8(fp)
 8044ba8:	e17ffd15 	stw	r5,-12(fp)
 8044bac:	e1bffc15 	stw	r6,-16(fp)
 8044bb0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 8044bb4:	e1bffb17 	ldw	r6,-20(fp)
 8044bb8:	e17ffc17 	ldw	r5,-16(fp)
 8044bbc:	e13ffd17 	ldw	r4,-12(fp)
 8044bc0:	8044dfc0 	call	8044dfc <open>
 8044bc4:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 8044bc8:	e0bfff17 	ldw	r2,-4(fp)
 8044bcc:	10002016 	blt	r2,zero,8044c50 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 8044bd0:	e0ffff17 	ldw	r3,-4(fp)
 8044bd4:	1805883a 	mov	r2,r3
 8044bd8:	1085883a 	add	r2,r2,r2
 8044bdc:	10c5883a 	add	r2,r2,r3
 8044be0:	100490ba 	slli	r2,r2,2
 8044be4:	00c20134 	movhi	r3,2052
 8044be8:	10c7883a 	add	r3,r2,r3
 8044bec:	18d7d817 	ldw	r3,24416(r3)
 8044bf0:	e0bffe17 	ldw	r2,-8(fp)
 8044bf4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8044bf8:	e0ffff17 	ldw	r3,-4(fp)
 8044bfc:	1805883a 	mov	r2,r3
 8044c00:	1085883a 	add	r2,r2,r2
 8044c04:	10c5883a 	add	r2,r2,r3
 8044c08:	100490ba 	slli	r2,r2,2
 8044c0c:	00c20134 	movhi	r3,2052
 8044c10:	10c7883a 	add	r3,r2,r3
 8044c14:	18d7d917 	ldw	r3,24420(r3)
 8044c18:	e0bffe17 	ldw	r2,-8(fp)
 8044c1c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8044c20:	e0ffff17 	ldw	r3,-4(fp)
 8044c24:	1805883a 	mov	r2,r3
 8044c28:	1085883a 	add	r2,r2,r2
 8044c2c:	10c5883a 	add	r2,r2,r3
 8044c30:	100490ba 	slli	r2,r2,2
 8044c34:	00c20134 	movhi	r3,2052
 8044c38:	10c7883a 	add	r3,r2,r3
 8044c3c:	18d7da17 	ldw	r3,24424(r3)
 8044c40:	e0bffe17 	ldw	r2,-8(fp)
 8044c44:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8044c48:	e13fff17 	ldw	r4,-4(fp)
 8044c4c:	804380c0 	call	804380c <alt_release_fd>
  }
} 
 8044c50:	0001883a 	nop
 8044c54:	e037883a 	mov	sp,fp
 8044c58:	dfc00117 	ldw	ra,4(sp)
 8044c5c:	df000017 	ldw	fp,0(sp)
 8044c60:	dec00204 	addi	sp,sp,8
 8044c64:	f800283a 	ret

08044c68 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8044c68:	defffb04 	addi	sp,sp,-20
 8044c6c:	dfc00415 	stw	ra,16(sp)
 8044c70:	df000315 	stw	fp,12(sp)
 8044c74:	df000304 	addi	fp,sp,12
 8044c78:	e13fff15 	stw	r4,-4(fp)
 8044c7c:	e17ffe15 	stw	r5,-8(fp)
 8044c80:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8044c84:	01c07fc4 	movi	r7,511
 8044c88:	01800044 	movi	r6,1
 8044c8c:	e17fff17 	ldw	r5,-4(fp)
 8044c90:	01020134 	movhi	r4,2052
 8044c94:	2117db04 	addi	r4,r4,24428
 8044c98:	8044b940 	call	8044b94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8044c9c:	01c07fc4 	movi	r7,511
 8044ca0:	000d883a 	mov	r6,zero
 8044ca4:	e17ffe17 	ldw	r5,-8(fp)
 8044ca8:	01020134 	movhi	r4,2052
 8044cac:	2117d804 	addi	r4,r4,24416
 8044cb0:	8044b940 	call	8044b94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8044cb4:	01c07fc4 	movi	r7,511
 8044cb8:	01800044 	movi	r6,1
 8044cbc:	e17ffd17 	ldw	r5,-12(fp)
 8044cc0:	01020134 	movhi	r4,2052
 8044cc4:	2117de04 	addi	r4,r4,24440
 8044cc8:	8044b940 	call	8044b94 <alt_open_fd>
}  
 8044ccc:	0001883a 	nop
 8044cd0:	e037883a 	mov	sp,fp
 8044cd4:	dfc00117 	ldw	ra,4(sp)
 8044cd8:	df000017 	ldw	fp,0(sp)
 8044cdc:	dec00204 	addi	sp,sp,8
 8044ce0:	f800283a 	ret

08044ce4 <alt_get_errno>:
{
 8044ce4:	defffe04 	addi	sp,sp,-8
 8044ce8:	dfc00115 	stw	ra,4(sp)
 8044cec:	df000015 	stw	fp,0(sp)
 8044cf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8044cf4:	d0a00917 	ldw	r2,-32732(gp)
 8044cf8:	10000326 	beq	r2,zero,8044d08 <alt_get_errno+0x24>
 8044cfc:	d0a00917 	ldw	r2,-32732(gp)
 8044d00:	103ee83a 	callr	r2
 8044d04:	00000106 	br	8044d0c <alt_get_errno+0x28>
 8044d08:	d0a6ac04 	addi	r2,gp,-25936
}
 8044d0c:	e037883a 	mov	sp,fp
 8044d10:	dfc00117 	ldw	ra,4(sp)
 8044d14:	df000017 	ldw	fp,0(sp)
 8044d18:	dec00204 	addi	sp,sp,8
 8044d1c:	f800283a 	ret

08044d20 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8044d20:	defffd04 	addi	sp,sp,-12
 8044d24:	df000215 	stw	fp,8(sp)
 8044d28:	df000204 	addi	fp,sp,8
 8044d2c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8044d30:	e0bffe17 	ldw	r2,-8(fp)
 8044d34:	10800217 	ldw	r2,8(r2)
 8044d38:	10d00034 	orhi	r3,r2,16384
 8044d3c:	e0bffe17 	ldw	r2,-8(fp)
 8044d40:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8044d44:	e03fff15 	stw	zero,-4(fp)
 8044d48:	00002306 	br	8044dd8 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8044d4c:	e0ffff17 	ldw	r3,-4(fp)
 8044d50:	1805883a 	mov	r2,r3
 8044d54:	1085883a 	add	r2,r2,r2
 8044d58:	10c5883a 	add	r2,r2,r3
 8044d5c:	100490ba 	slli	r2,r2,2
 8044d60:	00c20134 	movhi	r3,2052
 8044d64:	10c7883a 	add	r3,r2,r3
 8044d68:	18d7d817 	ldw	r3,24416(r3)
 8044d6c:	e0bffe17 	ldw	r2,-8(fp)
 8044d70:	10800017 	ldw	r2,0(r2)
 8044d74:	1880151e 	bne	r3,r2,8044dcc <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8044d78:	e0ffff17 	ldw	r3,-4(fp)
 8044d7c:	1805883a 	mov	r2,r3
 8044d80:	1085883a 	add	r2,r2,r2
 8044d84:	10c5883a 	add	r2,r2,r3
 8044d88:	100490ba 	slli	r2,r2,2
 8044d8c:	00c20134 	movhi	r3,2052
 8044d90:	10c7883a 	add	r3,r2,r3
 8044d94:	1897da17 	ldw	r2,24424(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 8044d98:	10000c0e 	bge	r2,zero,8044dcc <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 8044d9c:	e0ffff17 	ldw	r3,-4(fp)
 8044da0:	1805883a 	mov	r2,r3
 8044da4:	1085883a 	add	r2,r2,r2
 8044da8:	10c5883a 	add	r2,r2,r3
 8044dac:	100490ba 	slli	r2,r2,2
 8044db0:	00c20134 	movhi	r3,2052
 8044db4:	18d7d804 	addi	r3,r3,24416
 8044db8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8044dbc:	e0fffe17 	ldw	r3,-8(fp)
 8044dc0:	18800226 	beq	r3,r2,8044dcc <alt_file_locked+0xac>
    {
      return -EACCES;
 8044dc4:	00bffcc4 	movi	r2,-13
 8044dc8:	00000806 	br	8044dec <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 8044dcc:	e0bfff17 	ldw	r2,-4(fp)
 8044dd0:	10800044 	addi	r2,r2,1
 8044dd4:	e0bfff15 	stw	r2,-4(fp)
 8044dd8:	d0a00817 	ldw	r2,-32736(gp)
 8044ddc:	1007883a 	mov	r3,r2
 8044de0:	e0bfff17 	ldw	r2,-4(fp)
 8044de4:	18bfd92e 	bgeu	r3,r2,8044d4c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8044de8:	0005883a 	mov	r2,zero
}
 8044dec:	e037883a 	mov	sp,fp
 8044df0:	df000017 	ldw	fp,0(sp)
 8044df4:	dec00104 	addi	sp,sp,4
 8044df8:	f800283a 	ret

08044dfc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8044dfc:	defff604 	addi	sp,sp,-40
 8044e00:	dfc00915 	stw	ra,36(sp)
 8044e04:	df000815 	stw	fp,32(sp)
 8044e08:	df000804 	addi	fp,sp,32
 8044e0c:	e13ffa15 	stw	r4,-24(fp)
 8044e10:	e17ff915 	stw	r5,-28(fp)
 8044e14:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8044e18:	00bfffc4 	movi	r2,-1
 8044e1c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 8044e20:	00bffb44 	movi	r2,-19
 8044e24:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 8044e28:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8044e2c:	d1600604 	addi	r5,gp,-32744
 8044e30:	e13ffa17 	ldw	r4,-24(fp)
 8044e34:	80451500 	call	8045150 <alt_find_dev>
 8044e38:	e0bfff15 	stw	r2,-4(fp)
 8044e3c:	e0bfff17 	ldw	r2,-4(fp)
 8044e40:	1000051e 	bne	r2,zero,8044e58 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8044e44:	e13ffa17 	ldw	r4,-24(fp)
 8044e48:	80451e00 	call	80451e0 <alt_find_file>
 8044e4c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 8044e50:	00800044 	movi	r2,1
 8044e54:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8044e58:	e0bfff17 	ldw	r2,-4(fp)
 8044e5c:	10002c26 	beq	r2,zero,8044f10 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8044e60:	e13fff17 	ldw	r4,-4(fp)
 8044e64:	80452e80 	call	80452e8 <alt_get_fd>
 8044e68:	e0bffe15 	stw	r2,-8(fp)
 8044e6c:	e0bffe17 	ldw	r2,-8(fp)
 8044e70:	1000030e 	bge	r2,zero,8044e80 <open+0x84>
    {
      status = index;
 8044e74:	e0bffe17 	ldw	r2,-8(fp)
 8044e78:	e0bffd15 	stw	r2,-12(fp)
 8044e7c:	00002606 	br	8044f18 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8044e80:	e0fffe17 	ldw	r3,-8(fp)
 8044e84:	1805883a 	mov	r2,r3
 8044e88:	1085883a 	add	r2,r2,r2
 8044e8c:	10c5883a 	add	r2,r2,r3
 8044e90:	100490ba 	slli	r2,r2,2
 8044e94:	00c20134 	movhi	r3,2052
 8044e98:	18d7d804 	addi	r3,r3,24416
 8044e9c:	10c5883a 	add	r2,r2,r3
 8044ea0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8044ea4:	e0fff917 	ldw	r3,-28(fp)
 8044ea8:	00900034 	movhi	r2,16384
 8044eac:	10bfffc4 	addi	r2,r2,-1
 8044eb0:	1886703a 	and	r3,r3,r2
 8044eb4:	e0bffb17 	ldw	r2,-20(fp)
 8044eb8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8044ebc:	e0bffc17 	ldw	r2,-16(fp)
 8044ec0:	1000051e 	bne	r2,zero,8044ed8 <open+0xdc>
 8044ec4:	e13ffb17 	ldw	r4,-20(fp)
 8044ec8:	8044d200 	call	8044d20 <alt_file_locked>
 8044ecc:	e0bffd15 	stw	r2,-12(fp)
 8044ed0:	e0bffd17 	ldw	r2,-12(fp)
 8044ed4:	10001016 	blt	r2,zero,8044f18 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8044ed8:	e0bfff17 	ldw	r2,-4(fp)
 8044edc:	10800317 	ldw	r2,12(r2)
 8044ee0:	10000826 	beq	r2,zero,8044f04 <open+0x108>
 8044ee4:	e0bfff17 	ldw	r2,-4(fp)
 8044ee8:	10800317 	ldw	r2,12(r2)
 8044eec:	e1fff817 	ldw	r7,-32(fp)
 8044ef0:	e1bff917 	ldw	r6,-28(fp)
 8044ef4:	e17ffa17 	ldw	r5,-24(fp)
 8044ef8:	e13ffb17 	ldw	r4,-20(fp)
 8044efc:	103ee83a 	callr	r2
 8044f00:	00000106 	br	8044f08 <open+0x10c>
 8044f04:	0005883a 	mov	r2,zero
 8044f08:	e0bffd15 	stw	r2,-12(fp)
 8044f0c:	00000206 	br	8044f18 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8044f10:	00bffb44 	movi	r2,-19
 8044f14:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8044f18:	e0bffd17 	ldw	r2,-12(fp)
 8044f1c:	1000090e 	bge	r2,zero,8044f44 <open+0x148>
  {
    alt_release_fd (index);  
 8044f20:	e13ffe17 	ldw	r4,-8(fp)
 8044f24:	804380c0 	call	804380c <alt_release_fd>
    ALT_ERRNO = -status;
 8044f28:	8044ce40 	call	8044ce4 <alt_get_errno>
 8044f2c:	1007883a 	mov	r3,r2
 8044f30:	e0bffd17 	ldw	r2,-12(fp)
 8044f34:	0085c83a 	sub	r2,zero,r2
 8044f38:	18800015 	stw	r2,0(r3)
    return -1;
 8044f3c:	00bfffc4 	movi	r2,-1
 8044f40:	00000106 	br	8044f48 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8044f44:	e0bffe17 	ldw	r2,-8(fp)
}
 8044f48:	e037883a 	mov	sp,fp
 8044f4c:	dfc00117 	ldw	ra,4(sp)
 8044f50:	df000017 	ldw	fp,0(sp)
 8044f54:	dec00204 	addi	sp,sp,8
 8044f58:	f800283a 	ret

08044f5c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8044f5c:	defffa04 	addi	sp,sp,-24
 8044f60:	df000515 	stw	fp,20(sp)
 8044f64:	df000504 	addi	fp,sp,20
 8044f68:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 8044f6c:	0005303a 	rdctl	r2,status
 8044f70:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8044f74:	e0fffc17 	ldw	r3,-16(fp)
 8044f78:	00bfff84 	movi	r2,-2
 8044f7c:	1884703a 	and	r2,r3,r2
 8044f80:	1001703a 	wrctl	status,r2
  return context;
 8044f84:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8044f88:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 8044f8c:	e0bffb17 	ldw	r2,-20(fp)
 8044f90:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8044f94:	e0bffd17 	ldw	r2,-12(fp)
 8044f98:	10800017 	ldw	r2,0(r2)
 8044f9c:	e0fffd17 	ldw	r3,-12(fp)
 8044fa0:	18c00117 	ldw	r3,4(r3)
 8044fa4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8044fa8:	e0bffd17 	ldw	r2,-12(fp)
 8044fac:	10800117 	ldw	r2,4(r2)
 8044fb0:	e0fffd17 	ldw	r3,-12(fp)
 8044fb4:	18c00017 	ldw	r3,0(r3)
 8044fb8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8044fbc:	e0bffd17 	ldw	r2,-12(fp)
 8044fc0:	e0fffd17 	ldw	r3,-12(fp)
 8044fc4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8044fc8:	e0bffd17 	ldw	r2,-12(fp)
 8044fcc:	e0fffd17 	ldw	r3,-12(fp)
 8044fd0:	10c00015 	stw	r3,0(r2)
} 
 8044fd4:	0001883a 	nop
 8044fd8:	e0bfff17 	ldw	r2,-4(fp)
 8044fdc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8044fe0:	e0bffe17 	ldw	r2,-8(fp)
 8044fe4:	1001703a 	wrctl	status,r2
}
 8044fe8:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 8044fec:	0001883a 	nop
 8044ff0:	e037883a 	mov	sp,fp
 8044ff4:	df000017 	ldw	fp,0(sp)
 8044ff8:	dec00104 	addi	sp,sp,4
 8044ffc:	f800283a 	ret

08045000 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8045000:	defff904 	addi	sp,sp,-28
 8045004:	dfc00615 	stw	ra,24(sp)
 8045008:	df000515 	stw	fp,20(sp)
 804500c:	dc400415 	stw	r17,16(sp)
 8045010:	dc000315 	stw	r16,12(sp)
 8045014:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8045018:	d0a00c17 	ldw	r2,-32720(gp)
 804501c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8045020:	d126b217 	ldw	r4,-25912(gp)
 8045024:	d166b317 	ldw	r5,-25908(gp)
 8045028:	01800044 	movi	r6,1
 804502c:	000f883a 	mov	r7,zero
 8045030:	2185883a 	add	r2,r4,r6
 8045034:	1111803a 	cmpltu	r8,r2,r4
 8045038:	29c7883a 	add	r3,r5,r7
 804503c:	40c9883a 	add	r4,r8,r3
 8045040:	2007883a 	mov	r3,r4
 8045044:	1009883a 	mov	r4,r2
 8045048:	180b883a 	mov	r5,r3
 804504c:	d126b215 	stw	r4,-25912(gp)
 8045050:	d166b315 	stw	r5,-25908(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8045054:	00002906 	br	80450fc <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
 8045058:	e0bffd17 	ldw	r2,-12(fp)
 804505c:	10800017 	ldw	r2,0(r2)
 8045060:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
 8045064:	e13ffd17 	ldw	r4,-12(fp)
 8045068:	20800217 	ldw	r2,8(r4)
 804506c:	20c00317 	ldw	r3,12(r4)
 8045070:	d126b217 	ldw	r4,-25912(gp)
 8045074:	d166b317 	ldw	r5,-25908(gp)
 8045078:	28c01e36 	bltu	r5,r3,80450f4 <alt_tick+0xf4>
 804507c:	1940011e 	bne	r3,r5,8045084 <alt_tick+0x84>
 8045080:	20801c36 	bltu	r4,r2,80450f4 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
 8045084:	e0bffd17 	ldw	r2,-12(fp)
 8045088:	10800417 	ldw	r2,16(r2)
 804508c:	e0fffd17 	ldw	r3,-12(fp)
 8045090:	18c00517 	ldw	r3,20(r3)
 8045094:	1809883a 	mov	r4,r3
 8045098:	103ee83a 	callr	r2
 804509c:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80450a0:	e0bffb17 	ldw	r2,-20(fp)
 80450a4:	1000031e 	bne	r2,zero,80450b4 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
 80450a8:	e13ffd17 	ldw	r4,-12(fp)
 80450ac:	8044f5c0 	call	8044f5c <alt_alarm_stop>
 80450b0:	00001006 	br	80450f4 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
 80450b4:	e0bffd17 	ldw	r2,-12(fp)
 80450b8:	11000217 	ldw	r4,8(r2)
 80450bc:	11400317 	ldw	r5,12(r2)
 80450c0:	e0bffb17 	ldw	r2,-20(fp)
 80450c4:	1021883a 	mov	r16,r2
 80450c8:	0023883a 	mov	r17,zero
 80450cc:	2405883a 	add	r2,r4,r16
 80450d0:	110d803a 	cmpltu	r6,r2,r4
 80450d4:	2c47883a 	add	r3,r5,r17
 80450d8:	30c9883a 	add	r4,r6,r3
 80450dc:	2007883a 	mov	r3,r4
 80450e0:	1009883a 	mov	r4,r2
 80450e4:	180b883a 	mov	r5,r3
 80450e8:	e0bffd17 	ldw	r2,-12(fp)
 80450ec:	11000215 	stw	r4,8(r2)
 80450f0:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
 80450f4:	e0bffc17 	ldw	r2,-16(fp)
 80450f8:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 80450fc:	e0fffd17 	ldw	r3,-12(fp)
 8045100:	d0a00c04 	addi	r2,gp,-32720
 8045104:	18bfd41e 	bne	r3,r2,8045058 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8045108:	0001883a 	nop
}
 804510c:	0001883a 	nop
 8045110:	e6fffe04 	addi	sp,fp,-8
 8045114:	dfc00317 	ldw	ra,12(sp)
 8045118:	df000217 	ldw	fp,8(sp)
 804511c:	dc400117 	ldw	r17,4(sp)
 8045120:	dc000017 	ldw	r16,0(sp)
 8045124:	dec00404 	addi	sp,sp,16
 8045128:	f800283a 	ret

0804512c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 804512c:	deffff04 	addi	sp,sp,-4
 8045130:	df000015 	stw	fp,0(sp)
 8045134:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8045138:	000170fa 	wrctl	ienable,zero
}
 804513c:	0001883a 	nop
 8045140:	e037883a 	mov	sp,fp
 8045144:	df000017 	ldw	fp,0(sp)
 8045148:	dec00104 	addi	sp,sp,4
 804514c:	f800283a 	ret

08045150 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8045150:	defffa04 	addi	sp,sp,-24
 8045154:	dfc00515 	stw	ra,20(sp)
 8045158:	df000415 	stw	fp,16(sp)
 804515c:	df000404 	addi	fp,sp,16
 8045160:	e13ffd15 	stw	r4,-12(fp)
 8045164:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8045168:	e0bffc17 	ldw	r2,-16(fp)
 804516c:	10800017 	ldw	r2,0(r2)
 8045170:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8045174:	e13ffd17 	ldw	r4,-12(fp)
 8045178:	80403740 	call	8040374 <strlen>
 804517c:	10800044 	addi	r2,r2,1
 8045180:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8045184:	00000d06 	br	80451bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8045188:	e0bfff17 	ldw	r2,-4(fp)
 804518c:	10800217 	ldw	r2,8(r2)
 8045190:	e0fffe17 	ldw	r3,-8(fp)
 8045194:	180d883a 	mov	r6,r3
 8045198:	e17ffd17 	ldw	r5,-12(fp)
 804519c:	1009883a 	mov	r4,r2
 80451a0:	804545c0 	call	804545c <memcmp>
 80451a4:	1000021e 	bne	r2,zero,80451b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80451a8:	e0bfff17 	ldw	r2,-4(fp)
 80451ac:	00000706 	br	80451cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80451b0:	e0bfff17 	ldw	r2,-4(fp)
 80451b4:	10800017 	ldw	r2,0(r2)
 80451b8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 80451bc:	e0ffff17 	ldw	r3,-4(fp)
 80451c0:	e0bffc17 	ldw	r2,-16(fp)
 80451c4:	18bff01e 	bne	r3,r2,8045188 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 80451c8:	0005883a 	mov	r2,zero
}
 80451cc:	e037883a 	mov	sp,fp
 80451d0:	dfc00117 	ldw	ra,4(sp)
 80451d4:	df000017 	ldw	fp,0(sp)
 80451d8:	dec00204 	addi	sp,sp,8
 80451dc:	f800283a 	ret

080451e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80451e0:	defffb04 	addi	sp,sp,-20
 80451e4:	dfc00415 	stw	ra,16(sp)
 80451e8:	df000315 	stw	fp,12(sp)
 80451ec:	df000304 	addi	fp,sp,12
 80451f0:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80451f4:	d0a00417 	ldw	r2,-32752(gp)
 80451f8:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80451fc:	00003106 	br	80452c4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8045200:	e0bfff17 	ldw	r2,-4(fp)
 8045204:	10800217 	ldw	r2,8(r2)
 8045208:	1009883a 	mov	r4,r2
 804520c:	80403740 	call	8040374 <strlen>
 8045210:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8045214:	e0bfff17 	ldw	r2,-4(fp)
 8045218:	10c00217 	ldw	r3,8(r2)
 804521c:	e0bffe17 	ldw	r2,-8(fp)
 8045220:	10bfffc4 	addi	r2,r2,-1
 8045224:	1885883a 	add	r2,r3,r2
 8045228:	10800003 	ldbu	r2,0(r2)
 804522c:	10803fcc 	andi	r2,r2,255
 8045230:	1080201c 	xori	r2,r2,128
 8045234:	10bfe004 	addi	r2,r2,-128
 8045238:	10800bd8 	cmpnei	r2,r2,47
 804523c:	1000031e 	bne	r2,zero,804524c <alt_find_file+0x6c>
    {
      len -= 1;
 8045240:	e0bffe17 	ldw	r2,-8(fp)
 8045244:	10bfffc4 	addi	r2,r2,-1
 8045248:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 804524c:	e0bffe17 	ldw	r2,-8(fp)
 8045250:	e0fffd17 	ldw	r3,-12(fp)
 8045254:	1885883a 	add	r2,r3,r2
 8045258:	10800003 	ldbu	r2,0(r2)
 804525c:	10803fcc 	andi	r2,r2,255
 8045260:	1080201c 	xori	r2,r2,128
 8045264:	10bfe004 	addi	r2,r2,-128
 8045268:	10800be0 	cmpeqi	r2,r2,47
 804526c:	1000081e 	bne	r2,zero,8045290 <alt_find_file+0xb0>
 8045270:	e0bffe17 	ldw	r2,-8(fp)
 8045274:	e0fffd17 	ldw	r3,-12(fp)
 8045278:	1885883a 	add	r2,r3,r2
 804527c:	10800003 	ldbu	r2,0(r2)
 8045280:	10803fcc 	andi	r2,r2,255
 8045284:	1080201c 	xori	r2,r2,128
 8045288:	10bfe004 	addi	r2,r2,-128
 804528c:	10000a1e 	bne	r2,zero,80452b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8045290:	e0bfff17 	ldw	r2,-4(fp)
 8045294:	10800217 	ldw	r2,8(r2)
 8045298:	e0fffe17 	ldw	r3,-8(fp)
 804529c:	180d883a 	mov	r6,r3
 80452a0:	e17ffd17 	ldw	r5,-12(fp)
 80452a4:	1009883a 	mov	r4,r2
 80452a8:	804545c0 	call	804545c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 80452ac:	1000021e 	bne	r2,zero,80452b8 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 80452b0:	e0bfff17 	ldw	r2,-4(fp)
 80452b4:	00000706 	br	80452d4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 80452b8:	e0bfff17 	ldw	r2,-4(fp)
 80452bc:	10800017 	ldw	r2,0(r2)
 80452c0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 80452c4:	e0ffff17 	ldw	r3,-4(fp)
 80452c8:	d0a00404 	addi	r2,gp,-32752
 80452cc:	18bfcc1e 	bne	r3,r2,8045200 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 80452d0:	0005883a 	mov	r2,zero
}
 80452d4:	e037883a 	mov	sp,fp
 80452d8:	dfc00117 	ldw	ra,4(sp)
 80452dc:	df000017 	ldw	fp,0(sp)
 80452e0:	dec00204 	addi	sp,sp,8
 80452e4:	f800283a 	ret

080452e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80452e8:	defffc04 	addi	sp,sp,-16
 80452ec:	df000315 	stw	fp,12(sp)
 80452f0:	df000304 	addi	fp,sp,12
 80452f4:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 80452f8:	00bffa04 	movi	r2,-24
 80452fc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8045300:	e03fff15 	stw	zero,-4(fp)
 8045304:	00001d06 	br	804537c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8045308:	e0ffff17 	ldw	r3,-4(fp)
 804530c:	1805883a 	mov	r2,r3
 8045310:	1085883a 	add	r2,r2,r2
 8045314:	10c5883a 	add	r2,r2,r3
 8045318:	100490ba 	slli	r2,r2,2
 804531c:	00c20134 	movhi	r3,2052
 8045320:	10c7883a 	add	r3,r2,r3
 8045324:	1897d817 	ldw	r2,24416(r3)
 8045328:	1000111e 	bne	r2,zero,8045370 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 804532c:	e0ffff17 	ldw	r3,-4(fp)
 8045330:	1805883a 	mov	r2,r3
 8045334:	1085883a 	add	r2,r2,r2
 8045338:	10c5883a 	add	r2,r2,r3
 804533c:	100490ba 	slli	r2,r2,2
 8045340:	e13ffd17 	ldw	r4,-12(fp)
 8045344:	00c20134 	movhi	r3,2052
 8045348:	10c7883a 	add	r3,r2,r3
 804534c:	1917d815 	stw	r4,24416(r3)
      if (i > alt_max_fd)
 8045350:	d0e00817 	ldw	r3,-32736(gp)
 8045354:	e0bfff17 	ldw	r2,-4(fp)
 8045358:	1880020e 	bge	r3,r2,8045364 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 804535c:	e0bfff17 	ldw	r2,-4(fp)
 8045360:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 8045364:	e0bfff17 	ldw	r2,-4(fp)
 8045368:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 804536c:	00000706 	br	804538c <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 8045370:	e0bfff17 	ldw	r2,-4(fp)
 8045374:	10800044 	addi	r2,r2,1
 8045378:	e0bfff15 	stw	r2,-4(fp)
 804537c:	e0bfff17 	ldw	r2,-4(fp)
 8045380:	10800810 	cmplti	r2,r2,32
 8045384:	103fe01e 	bne	r2,zero,8045308 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 8045388:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 804538c:	e0bffe17 	ldw	r2,-8(fp)
}
 8045390:	e037883a 	mov	sp,fp
 8045394:	df000017 	ldw	fp,0(sp)
 8045398:	dec00104 	addi	sp,sp,4
 804539c:	f800283a 	ret

080453a0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 80453a0:	defffe04 	addi	sp,sp,-8
 80453a4:	df000115 	stw	fp,4(sp)
 80453a8:	df000104 	addi	fp,sp,4
 80453ac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 80453b0:	e0bfff17 	ldw	r2,-4(fp)
 80453b4:	10bffe84 	addi	r2,r2,-6
 80453b8:	10c00428 	cmpgeui	r3,r2,16
 80453bc:	18c03fcc 	andi	r3,r3,255
 80453c0:	18000f1e 	bne	r3,zero,8045400 <alt_exception_cause_generated_bad_addr+0x60>
 80453c4:	00c00044 	movi	r3,1
 80453c8:	1884983a 	sll	r2,r3,r2
 80453cc:	10e2c8cc 	andi	r3,r2,35619
 80453d0:	1806c03a 	cmpne	r3,r3,zero
 80453d4:	18c03fcc 	andi	r3,r3,255
 80453d8:	1800051e 	bne	r3,zero,80453f0 <alt_exception_cause_generated_bad_addr+0x50>
 80453dc:	1084100c 	andi	r2,r2,4160
 80453e0:	1004c03a 	cmpne	r2,r2,zero
 80453e4:	10803fcc 	andi	r2,r2,255
 80453e8:	1000031e 	bne	r2,zero,80453f8 <alt_exception_cause_generated_bad_addr+0x58>
 80453ec:	00000406 	br	8045400 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80453f0:	00800044 	movi	r2,1
 80453f4:	00000306 	br	8045404 <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80453f8:	0005883a 	mov	r2,zero
 80453fc:	00000106 	br	8045404 <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
 8045400:	0005883a 	mov	r2,zero
  }
}
 8045404:	e037883a 	mov	sp,fp
 8045408:	df000017 	ldw	fp,0(sp)
 804540c:	dec00104 	addi	sp,sp,4
 8045410:	f800283a 	ret

08045414 <atexit>:
 8045414:	200b883a 	mov	r5,r4
 8045418:	000f883a 	mov	r7,zero
 804541c:	000d883a 	mov	r6,zero
 8045420:	0009883a 	mov	r4,zero
 8045424:	80454d41 	jmpi	80454d4 <__register_exitproc>

08045428 <exit>:
 8045428:	defffe04 	addi	sp,sp,-8
 804542c:	000b883a 	mov	r5,zero
 8045430:	dc000015 	stw	r16,0(sp)
 8045434:	dfc00115 	stw	ra,4(sp)
 8045438:	2021883a 	mov	r16,r4
 804543c:	80455640 	call	8045564 <__call_exitprocs>
 8045440:	00820134 	movhi	r2,2052
 8045444:	111c5017 	ldw	r4,28992(r2)
 8045448:	20800f17 	ldw	r2,60(r4)
 804544c:	10000126 	beq	r2,zero,8045454 <exit+0x2c>
 8045450:	103ee83a 	callr	r2
 8045454:	8009883a 	mov	r4,r16
 8045458:	80456840 	call	8045684 <_exit>

0804545c <memcmp>:
 804545c:	30800128 	cmpgeui	r2,r6,4
 8045460:	10000d26 	beq	r2,zero,8045498 <memcmp+0x3c>
 8045464:	2144b03a 	or	r2,r4,r5
 8045468:	108000cc 	andi	r2,r2,3
 804546c:	10000726 	beq	r2,zero,804548c <memcmp+0x30>
 8045470:	30bfffc4 	addi	r2,r6,-1
 8045474:	00000a06 	br	80454a0 <memcmp+0x44>
 8045478:	31bfff04 	addi	r6,r6,-4
 804547c:	30800128 	cmpgeui	r2,r6,4
 8045480:	21000104 	addi	r4,r4,4
 8045484:	29400104 	addi	r5,r5,4
 8045488:	10000326 	beq	r2,zero,8045498 <memcmp+0x3c>
 804548c:	20c00017 	ldw	r3,0(r4)
 8045490:	28800017 	ldw	r2,0(r5)
 8045494:	18bff826 	beq	r3,r2,8045478 <memcmp+0x1c>
 8045498:	30bfffc4 	addi	r2,r6,-1
 804549c:	30000b26 	beq	r6,zero,80454cc <memcmp+0x70>
 80454a0:	11800044 	addi	r6,r2,1
 80454a4:	218d883a 	add	r6,r4,r6
 80454a8:	00000106 	br	80454b0 <memcmp+0x54>
 80454ac:	21800726 	beq	r4,r6,80454cc <memcmp+0x70>
 80454b0:	20800003 	ldbu	r2,0(r4)
 80454b4:	28c00003 	ldbu	r3,0(r5)
 80454b8:	21000044 	addi	r4,r4,1
 80454bc:	29400044 	addi	r5,r5,1
 80454c0:	10fffa26 	beq	r2,r3,80454ac <memcmp+0x50>
 80454c4:	10c5c83a 	sub	r2,r2,r3
 80454c8:	f800283a 	ret
 80454cc:	0005883a 	mov	r2,zero
 80454d0:	f800283a 	ret

080454d4 <__register_exitproc>:
 80454d4:	00820134 	movhi	r2,2052
 80454d8:	10dc5017 	ldw	r3,28992(r2)
 80454dc:	18805217 	ldw	r2,328(r3)
 80454e0:	10001726 	beq	r2,zero,8045540 <__register_exitproc+0x6c>
 80454e4:	10c00117 	ldw	r3,4(r2)
 80454e8:	1a000808 	cmpgei	r8,r3,32
 80454ec:	40001b1e 	bne	r8,zero,804555c <__register_exitproc+0x88>
 80454f0:	20000b26 	beq	r4,zero,8045520 <__register_exitproc+0x4c>
 80454f4:	181090ba 	slli	r8,r3,2
 80454f8:	02400044 	movi	r9,1
 80454fc:	48d2983a 	sll	r9,r9,r3
 8045500:	1211883a 	add	r8,r2,r8
 8045504:	41802215 	stw	r6,136(r8)
 8045508:	11806217 	ldw	r6,392(r2)
 804550c:	21000098 	cmpnei	r4,r4,2
 8045510:	324cb03a 	or	r6,r6,r9
 8045514:	11806215 	stw	r6,392(r2)
 8045518:	41c04215 	stw	r7,264(r8)
 804551c:	20000b26 	beq	r4,zero,804554c <__register_exitproc+0x78>
 8045520:	19000084 	addi	r4,r3,2
 8045524:	200890ba 	slli	r4,r4,2
 8045528:	18c00044 	addi	r3,r3,1
 804552c:	10c00115 	stw	r3,4(r2)
 8045530:	1105883a 	add	r2,r2,r4
 8045534:	11400015 	stw	r5,0(r2)
 8045538:	0005883a 	mov	r2,zero
 804553c:	f800283a 	ret
 8045540:	18805304 	addi	r2,r3,332
 8045544:	18805215 	stw	r2,328(r3)
 8045548:	003fe606 	br	80454e4 <__register_exitproc+0x10>
 804554c:	11006317 	ldw	r4,396(r2)
 8045550:	2248b03a 	or	r4,r4,r9
 8045554:	11006315 	stw	r4,396(r2)
 8045558:	003ff106 	br	8045520 <__register_exitproc+0x4c>
 804555c:	00bfffc4 	movi	r2,-1
 8045560:	f800283a 	ret

08045564 <__call_exitprocs>:
 8045564:	defff704 	addi	sp,sp,-36
 8045568:	00820134 	movhi	r2,2052
 804556c:	dcc00315 	stw	r19,12(sp)
 8045570:	14dc5017 	ldw	r19,28992(r2)
 8045574:	dc800215 	stw	r18,8(sp)
 8045578:	dfc00815 	stw	ra,32(sp)
 804557c:	9c805217 	ldw	r18,328(r19)
 8045580:	ddc00715 	stw	r23,28(sp)
 8045584:	dd800615 	stw	r22,24(sp)
 8045588:	dd400515 	stw	r21,20(sp)
 804558c:	dd000415 	stw	r20,16(sp)
 8045590:	dc400115 	stw	r17,4(sp)
 8045594:	dc000015 	stw	r16,0(sp)
 8045598:	90001026 	beq	r18,zero,80455dc <__call_exitprocs+0x78>
 804559c:	202b883a 	mov	r21,r4
 80455a0:	282d883a 	mov	r22,r5
 80455a4:	05000044 	movi	r20,1
 80455a8:	94000117 	ldw	r16,4(r18)
 80455ac:	847fffc4 	addi	r17,r16,-1
 80455b0:	88000a16 	blt	r17,zero,80455dc <__call_exitprocs+0x78>
 80455b4:	84000044 	addi	r16,r16,1
 80455b8:	802090ba 	slli	r16,r16,2
 80455bc:	9421883a 	add	r16,r18,r16
 80455c0:	b0001126 	beq	r22,zero,8045608 <__call_exitprocs+0xa4>
 80455c4:	80804017 	ldw	r2,256(r16)
 80455c8:	15800f26 	beq	r2,r22,8045608 <__call_exitprocs+0xa4>
 80455cc:	8c7fffc4 	addi	r17,r17,-1
 80455d0:	88bfffd8 	cmpnei	r2,r17,-1
 80455d4:	843fff04 	addi	r16,r16,-4
 80455d8:	103ff91e 	bne	r2,zero,80455c0 <__call_exitprocs+0x5c>
 80455dc:	dfc00817 	ldw	ra,32(sp)
 80455e0:	ddc00717 	ldw	r23,28(sp)
 80455e4:	dd800617 	ldw	r22,24(sp)
 80455e8:	dd400517 	ldw	r21,20(sp)
 80455ec:	dd000417 	ldw	r20,16(sp)
 80455f0:	dcc00317 	ldw	r19,12(sp)
 80455f4:	dc800217 	ldw	r18,8(sp)
 80455f8:	dc400117 	ldw	r17,4(sp)
 80455fc:	dc000017 	ldw	r16,0(sp)
 8045600:	dec00904 	addi	sp,sp,36
 8045604:	f800283a 	ret
 8045608:	90800117 	ldw	r2,4(r18)
 804560c:	81800017 	ldw	r6,0(r16)
 8045610:	10bfffc4 	addi	r2,r2,-1
 8045614:	14401726 	beq	r2,r17,8045674 <__call_exitprocs+0x110>
 8045618:	80000015 	stw	zero,0(r16)
 804561c:	303feb26 	beq	r6,zero,80455cc <__call_exitprocs+0x68>
 8045620:	a446983a 	sll	r3,r20,r17
 8045624:	90806217 	ldw	r2,392(r18)
 8045628:	95c00117 	ldw	r23,4(r18)
 804562c:	1884703a 	and	r2,r3,r2
 8045630:	1000081e 	bne	r2,zero,8045654 <__call_exitprocs+0xf0>
 8045634:	303ee83a 	callr	r6
 8045638:	90c00117 	ldw	r3,4(r18)
 804563c:	98805217 	ldw	r2,328(r19)
 8045640:	1dc0011e 	bne	r3,r23,8045648 <__call_exitprocs+0xe4>
 8045644:	14bfe126 	beq	r2,r18,80455cc <__call_exitprocs+0x68>
 8045648:	103fe426 	beq	r2,zero,80455dc <__call_exitprocs+0x78>
 804564c:	1025883a 	mov	r18,r2
 8045650:	003fd506 	br	80455a8 <__call_exitprocs+0x44>
 8045654:	90806317 	ldw	r2,396(r18)
 8045658:	81002017 	ldw	r4,128(r16)
 804565c:	1886703a 	and	r3,r3,r2
 8045660:	1800061e 	bne	r3,zero,804567c <__call_exitprocs+0x118>
 8045664:	200b883a 	mov	r5,r4
 8045668:	a809883a 	mov	r4,r21
 804566c:	303ee83a 	callr	r6
 8045670:	003ff106 	br	8045638 <__call_exitprocs+0xd4>
 8045674:	94400115 	stw	r17,4(r18)
 8045678:	003fe806 	br	804561c <__call_exitprocs+0xb8>
 804567c:	303ee83a 	callr	r6
 8045680:	003fed06 	br	8045638 <__call_exitprocs+0xd4>

08045684 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8045684:	defffd04 	addi	sp,sp,-12
 8045688:	df000215 	stw	fp,8(sp)
 804568c:	df000204 	addi	fp,sp,8
 8045690:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8045694:	0001883a 	nop
 8045698:	e0bffe17 	ldw	r2,-8(fp)
 804569c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80456a0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80456a4:	10000226 	beq	r2,zero,80456b0 <_exit+0x2c>
    ALT_SIM_FAIL();
 80456a8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 80456ac:	00000106 	br	80456b4 <_exit+0x30>
    ALT_SIM_PASS();
 80456b0:	002af0b0 	cmpltui	zero,zero,43970
}
 80456b4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80456b8:	0001883a 	nop
 80456bc:	003ffe06 	br	80456b8 <_exit+0x34>
